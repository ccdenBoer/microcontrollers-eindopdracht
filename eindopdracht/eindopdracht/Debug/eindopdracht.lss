
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003b6  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001360  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b05  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000897  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d1  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f1  00000000  00000000  00003411  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7b d0       	rcall	.+246    	; 0x1aa <main>
  b4:	7e c1       	rjmp	.+764    	; 0x3b2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <writeInitCommand_strobe_e>:
{
	char data_out[16];
	memset(data_out, 0, sizeof(data_out[0]) * 16);
	sprintf(data_out, "%u", data);
	lcd_write_string(data_out);
}
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <writeInitCommand_strobe_e+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <writeInitCommand_strobe_e+0x10>
  c8:	00 00       	nop
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <writeInitCommand_strobe_e+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <writeInitCommand_strobe_e+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <write2NibbleCommand_strobe_e>:
  de:	98 2f       	mov	r25, r24
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	98 60       	ori	r25, 0x08	; 8
  e4:	95 bb       	out	0x15, r25	; 21
  e6:	ef ec       	ldi	r30, 0xCF	; 207
  e8:	f7 e0       	ldi	r31, 0x07	; 7
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <write2NibbleCommand_strobe_e+0xc>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <write2NibbleCommand_strobe_e+0x12>
  f0:	00 00       	nop
  f2:	95 b3       	in	r25, 0x15	; 21
  f4:	97 7f       	andi	r25, 0xF7	; 247
  f6:	95 bb       	out	0x15, r25	; 21
  f8:	ef ec       	ldi	r30, 0xCF	; 207
  fa:	f7 e0       	ldi	r31, 0x07	; 7
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <write2NibbleCommand_strobe_e+0x1e>
 100:	00 c0       	rjmp	.+0      	; 0x102 <write2NibbleCommand_strobe_e+0x24>
 102:	00 00       	nop
 104:	82 95       	swap	r24
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	8f ec       	ldi	r24, 0xCF	; 207
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <write2NibbleCommand_strobe_e+0x32>
 114:	00 c0       	rjmp	.+0      	; 0x116 <write2NibbleCommand_strobe_e+0x38>
 116:	00 00       	nop
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	87 7f       	andi	r24, 0xF7	; 247
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	ef ec       	ldi	r30, 0xCF	; 207
 120:	f7 e0       	ldi	r31, 0x07	; 7
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <write2NibbleCommand_strobe_e+0x44>
 126:	00 c0       	rjmp	.+0      	; 0x128 <write2NibbleCommand_strobe_e+0x4a>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <write2NibbleData_Strobe_E>:
 12c:	98 2f       	mov	r25, r24
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	9c 60       	ori	r25, 0x0C	; 12
 132:	95 bb       	out	0x15, r25	; 21
 134:	ef ec       	ldi	r30, 0xCF	; 207
 136:	f7 e0       	ldi	r31, 0x07	; 7
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <write2NibbleData_Strobe_E+0xc>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <write2NibbleData_Strobe_E+0x12>
 13e:	00 00       	nop
 140:	95 b3       	in	r25, 0x15	; 21
 142:	97 7f       	andi	r25, 0xF7	; 247
 144:	95 bb       	out	0x15, r25	; 21
 146:	ef ec       	ldi	r30, 0xCF	; 207
 148:	f7 e0       	ldi	r31, 0x07	; 7
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <write2NibbleData_Strobe_E+0x1e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <write2NibbleData_Strobe_E+0x24>
 150:	00 00       	nop
 152:	82 95       	swap	r24
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	8c 60       	ori	r24, 0x0C	; 12
 158:	85 bb       	out	0x15, r24	; 21
 15a:	8f ec       	ldi	r24, 0xCF	; 207
 15c:	97 e0       	ldi	r25, 0x07	; 7
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <write2NibbleData_Strobe_E+0x32>
 162:	00 c0       	rjmp	.+0      	; 0x164 <write2NibbleData_Strobe_E+0x38>
 164:	00 00       	nop
 166:	85 b3       	in	r24, 0x15	; 21
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	ef ec       	ldi	r30, 0xCF	; 207
 16e:	f7 e0       	ldi	r31, 0x07	; 7
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <write2NibbleData_Strobe_E+0x44>
 174:	00 c0       	rjmp	.+0      	; 0x176 <write2NibbleData_Strobe_E+0x4a>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <init_4bits_mode>:
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	9d df       	rcall	.-198    	; 0xb8 <writeInitCommand_strobe_e>
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	ae df       	rcall	.-164    	; 0xde <write2NibbleCommand_strobe_e>
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	ac df       	rcall	.-168    	; 0xde <write2NibbleCommand_strobe_e>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	aa cf       	rjmp	.-172    	; 0xde <write2NibbleCommand_strobe_e>
 18a:	08 95       	ret

0000018c <lcd_write_string>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <lcd_write_string+0xc>
 194:	cb df       	rcall	.-106    	; 0x12c <write2NibbleData_Strobe_E>
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	fb cf       	rjmp	.-10     	; 0x194 <lcd_write_string+0x8>
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <lcd_clear>:

void lcd_clear()
{
	write2NibbleCommand_strobe_e (0x01);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	9b cf       	rjmp	.-202    	; 0xde <write2NibbleCommand_strobe_e>
 1a8:	08 95       	ret

000001aa <main>:
#endif

int main(void)
{
	//lcd
	DDRC = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 1ae:	15 ba       	out	0x15, r1	; 21
	
	init_4bits_mode();
 1b0:	e4 df       	rcall	.-56     	; 0x17a <init_4bits_mode>
	lcd_clear();
 1b2:	f8 df       	rcall	.-16     	; 0x1a4 <lcd_clear>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
	lcd_write_string("yoo");
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	e9 df       	rcall	.-46     	; 0x18c <lcd_write_string>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
	
	//spi
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 1bc:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 1be:	39 d0       	rcall	.+114    	; 0x232 <spi_masterInit>
 1c0:	6d d0       	rcall	.+218    	; 0x29c <displayDriverInit>
	displayDriverInit();            // Initialize display chip
 1c2:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <main+0x2e>
	{
		spi_slaveSelect(0); 		// Select display chip
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	43 d0       	rcall	.+134    	; 0x250 <spi_slaveSelect>
		spi_write(i);  				// 	digit adress: (digit place)
 1ca:	8c 2f       	mov	r24, r28
 1cc:	3d d0       	rcall	.+122    	; 0x248 <spi_write>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
		spi_write(0);				// 	digit value: 0
 1d0:	3b d0       	rcall	.+118    	; 0x248 <spi_write>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0);		// Deselect display chip
 1d4:	49 d0       	rcall	.+146    	; 0x268 <spi_slaveDeSelect>
 1d6:	cf 5f       	subi	r28, 0xFF	; 255
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	displayDriverInit();            // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1d8:	c5 30       	cpi	r28, 0x05	; 5
 1da:	a8 f3       	brcs	.-22     	; 0x1c6 <main+0x1c>
		spi_slaveSelect(0); 		// Select display chip
		spi_write(i);  				// 	digit adress: (digit place)
		spi_write(0);				// 	digit value: 0
		spi_slaveDeSelect(0);		// Deselect display chip
	}
	wait(1000);
 1dc:	88 ee       	ldi	r24, 0xE8	; 232
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	19 d0       	rcall	.+50     	; 0x214 <wait>
	// write 4-digit data
	writeLedDisplay(-1);
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	67 d0       	rcall	.+206    	; 0x2b6 <writeLedDisplay>
	writeLedDisplay(-12);
 1e8:	84 ef       	ldi	r24, 0xF4	; 244
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	64 d0       	rcall	.+200    	; 0x2b6 <writeLedDisplay>
	writeLedDisplay(-756);
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	9d ef       	ldi	r25, 0xFD	; 253
 1f2:	61 d0       	rcall	.+194    	; 0x2b6 <writeLedDisplay>
	writeLedDisplay(-1582);
 1f4:	82 ed       	ldi	r24, 0xD2	; 210
 1f6:	99 ef       	ldi	r25, 0xF9	; 249
 1f8:	5e d0       	rcall	.+188    	; 0x2b6 <writeLedDisplay>
	writeLedDisplay(8);
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	5b d0       	rcall	.+182    	; 0x2b6 <writeLedDisplay>
 200:	8c e0       	ldi	r24, 0x0C	; 12
	writeLedDisplay(12);
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	58 d0       	rcall	.+176    	; 0x2b6 <writeLedDisplay>
 206:	84 e5       	ldi	r24, 0x54	; 84
 208:	93 e0       	ldi	r25, 0x03	; 3
	writeLedDisplay(852);
 20a:	55 d0       	rcall	.+170    	; 0x2b6 <writeLedDisplay>
 20c:	8c e1       	ldi	r24, 0x1C	; 28
 20e:	96 e0       	ldi	r25, 0x06	; 6
 210:	52 d0       	rcall	.+164    	; 0x2b6 <writeLedDisplay>
	writeLedDisplay(1564);
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x68>

00000214 <wait>:
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	08 c0       	rjmp	.+16     	; 0x22a <wait+0x16>
 21a:	ef ec       	ldi	r30, 0xCF	; 207
void displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
 21c:	f7 e0       	ldi	r31, 0x07	; 7
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <wait+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <wait+0x10>
 224:	00 00       	nop
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	28 17       	cp	r18, r24
 22c:	39 07       	cpc	r19, r25
 22e:	ac f3       	brlt	.-22     	; 0x21a <wait+0x6>
 230:	08 95       	ret

00000232 <spi_masterInit>:
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	87 bb       	out	0x17, r24	; 23
 236:	87 b3       	in	r24, 0x17	; 23
 238:	87 7f       	andi	r24, 0xF7	; 247
 23a:	87 bb       	out	0x17, r24	; 23
 23c:	88 b3       	in	r24, 0x18	; 24
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	88 bb       	out	0x18, r24	; 24
 242:	82 e5       	ldi	r24, 0x52	; 82
 244:	8d b9       	out	0x0d, r24	; 13
 246:	08 95       	ret

00000248 <spi_write>:
 248:	8f b9       	out	0x0f, r24	; 15
 24a:	77 9b       	sbis	0x0e, 7	; 14
 24c:	fe cf       	rjmp	.-4      	; 0x24a <spi_write+0x2>
 24e:	08 95       	ret

00000250 <spi_slaveSelect>:
 250:	98 b3       	in	r25, 0x18	; 24
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <spi_slaveSelect+0xc>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <spi_slaveSelect+0x8>
 260:	20 95       	com	r18
 262:	29 23       	and	r18, r25
 264:	28 bb       	out	0x18, r18	; 24
 266:	08 95       	ret

00000268 <spi_slaveDeSelect>:
 268:	98 b3       	in	r25, 0x18	; 24
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <spi_slaveDeSelect+0xc>
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <spi_slaveDeSelect+0x8>
 278:	29 2b       	or	r18, r25
 27a:	28 bb       	out	0x18, r18	; 24
 27c:	08 95       	ret

0000027e <spi_writeWord>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	d8 2f       	mov	r29, r24
 284:	c6 2f       	mov	r28, r22
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	e3 df       	rcall	.-58     	; 0x250 <spi_slaveSelect>
 28a:	8d 2f       	mov	r24, r29
 28c:	dd df       	rcall	.-70     	; 0x248 <spi_write>
 28e:	8c 2f       	mov	r24, r28
 290:	db df       	rcall	.-74     	; 0x248 <spi_write>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	e9 df       	rcall	.-46     	; 0x268 <spi_slaveDeSelect>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <displayDriverInit>:
 29c:	6f ef       	ldi	r22, 0xFF	; 255
 29e:	89 e0       	ldi	r24, 0x09	; 9
 2a0:	ee df       	rcall	.-36     	; 0x27e <spi_writeWord>
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	8a e0       	ldi	r24, 0x0A	; 10
 2a6:	eb df       	rcall	.-42     	; 0x27e <spi_writeWord>
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	8b e0       	ldi	r24, 0x0B	; 11
 2ac:	e8 df       	rcall	.-48     	; 0x27e <spi_writeWord>
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	8c e0       	ldi	r24, 0x0C	; 12
 2b2:	e5 cf       	rjmp	.-54     	; 0x27e <spi_writeWord>
 2b4:	08 95       	ret

000002b6 <writeLedDisplay>:
}
void writeLedDisplay( int value ) {
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	int min_pos = -1;
	int pos_value = value;
	if(value < 0) {
 2c6:	99 23       	and	r25, r25
 2c8:	4c f4       	brge	.+18     	; 0x2dc <writeLedDisplay+0x26>
		pos_value *= -1;
 2ca:	ee 24       	eor	r14, r14
 2cc:	ff 24       	eor	r15, r15
 2ce:	e8 1a       	sub	r14, r24
 2d0:	f9 0a       	sbc	r15, r25
		min_pos = 4;
 2d2:	68 94       	set
 2d4:	cc 24       	eor	r12, r12
 2d6:	c2 f8       	bld	r12, 2
 2d8:	d1 2c       	mov	r13, r1
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <writeLedDisplay+0x2e>
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
}
void writeLedDisplay( int value ) {
	int min_pos = -1;
	int pos_value = value;
 2dc:	7c 01       	movw	r14, r24
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
}
void writeLedDisplay( int value ) {
	int min_pos = -1;
 2de:	cc 24       	eor	r12, r12
 2e0:	ca 94       	dec	r12
 2e2:	dc 2c       	mov	r13, r12
	if(value < 0) {
		pos_value *= -1;
		min_pos = 4;
	}
	
	if((value > -10) && (value < 0)){
 2e4:	9c 01       	movw	r18, r24
 2e6:	27 5f       	subi	r18, 0xF7	; 247
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	29 30       	cpi	r18, 0x09	; 9
 2ec:	31 05       	cpc	r19, r1
 2ee:	30 f0       	brcs	.+12     	; 0x2fc <writeLedDisplay+0x46>
		min_pos = 2;
	} else if((value > -100) && (value < 0)){
 2f0:	8d 59       	subi	r24, 0x9D	; 157
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	91 05       	cpc	r25, r1
 2f8:	30 f0       	brcs	.+12     	; 0x306 <writeLedDisplay+0x50>
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <writeLedDisplay+0x5a>
		pos_value *= -1;
		min_pos = 4;
	}
	
	if((value > -10) && (value < 0)){
		min_pos = 2;
 2fc:	68 94       	set
 2fe:	cc 24       	eor	r12, r12
 300:	c1 f8       	bld	r12, 1
 302:	d1 2c       	mov	r13, r1
 304:	05 c0       	rjmp	.+10     	; 0x310 <writeLedDisplay+0x5a>
	} else if((value > -100) && (value < 0)){
		min_pos = 3;
 306:	0f 2e       	mov	r0, r31
 308:	f3 e0       	ldi	r31, 0x03	; 3
 30a:	cf 2e       	mov	r12, r31
 30c:	d1 2c       	mov	r13, r1
 30e:	f0 2d       	mov	r31, r0
	}
	
	int i,divisor = 10000;
 310:	00 e1       	ldi	r16, 0x10	; 16
 312:	17 e2       	ldi	r17, 0x27	; 39
	int digit = 0;
    for (i = 5; i > 0; i--) {
 314:	c5 e0       	ldi	r28, 0x05	; 5
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	11 c0       	rjmp	.+34     	; 0x33c <writeLedDisplay+0x86>
        digit = pos_value / divisor;
        pos_value %= divisor;
 31a:	c7 01       	movw	r24, r14
 31c:	b8 01       	movw	r22, r16
 31e:	22 d0       	rcall	.+68     	; 0x364 <__divmodhi4>
 320:	26 2f       	mov	r18, r22
 322:	7c 01       	movw	r14, r24
        divisor /= 10;
 324:	c8 01       	movw	r24, r16
 326:	6a e0       	ldi	r22, 0x0A	; 10
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	1c d0       	rcall	.+56     	; 0x364 <__divmodhi4>
 32c:	8b 01       	movw	r16, r22
		spi_writeWord(i, digit);
 32e:	62 2f       	mov	r22, r18
 330:	8c 2f       	mov	r24, r28
 332:	a5 df       	rcall	.-182    	; 0x27e <spi_writeWord>
		wait(10);
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	6d df       	rcall	.-294    	; 0x214 <wait>
 33a:	21 97       	sbiw	r28, 0x01	; 1
		min_pos = 3;
	}
	
	int i,divisor = 10000;
	int digit = 0;
    for (i = 5; i > 0; i--) {
 33c:	1c 16       	cp	r1, r28
 33e:	1d 06       	cpc	r1, r29
 340:	64 f3       	brlt	.-40     	; 0x31a <writeLedDisplay+0x64>
 342:	dd 20       	and	r13, r13
        pos_value %= divisor;
        divisor /= 10;
		spi_writeWord(i, digit);
		wait(10);
    }
	if(min_pos>-1){
 344:	1c f0       	brlt	.+6      	; 0x34c <writeLedDisplay+0x96>
		spi_writeWord(min_pos, 10);
 346:	6a e0       	ldi	r22, 0x0A	; 10
 348:	8c 2d       	mov	r24, r12
 34a:	99 df       	rcall	.-206    	; 0x27e <spi_writeWord>
	}
	wait(1000);
 34c:	88 ee       	ldi	r24, 0xE8	; 232
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	61 df       	rcall	.-318    	; 0x214 <wait>
 352:	df 91       	pop	r29
	
}
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	08 95       	ret

00000364 <__divmodhi4>:
 364:	97 fb       	bst	r25, 7
 366:	07 2e       	mov	r0, r23
 368:	16 f4       	brtc	.+4      	; 0x36e <__divmodhi4+0xa>
 36a:	00 94       	com	r0
 36c:	06 d0       	rcall	.+12     	; 0x37a <__divmodhi4_neg1>
 36e:	77 fd       	sbrc	r23, 7
 370:	08 d0       	rcall	.+16     	; 0x382 <__divmodhi4_neg2>
 372:	0b d0       	rcall	.+22     	; 0x38a <__udivmodhi4>
 374:	07 fc       	sbrc	r0, 7
 376:	05 d0       	rcall	.+10     	; 0x382 <__divmodhi4_neg2>
 378:	3e f4       	brtc	.+14     	; 0x388 <__divmodhi4_exit>

0000037a <__divmodhi4_neg1>:
 37a:	90 95       	com	r25
 37c:	81 95       	neg	r24
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	08 95       	ret

00000382 <__divmodhi4_neg2>:
 382:	70 95       	com	r23
 384:	61 95       	neg	r22
 386:	7f 4f       	sbci	r23, 0xFF	; 255

00000388 <__divmodhi4_exit>:
 388:	08 95       	ret

0000038a <__udivmodhi4>:
 38a:	aa 1b       	sub	r26, r26
 38c:	bb 1b       	sub	r27, r27
 38e:	51 e1       	ldi	r21, 0x11	; 17
 390:	07 c0       	rjmp	.+14     	; 0x3a0 <__udivmodhi4_ep>

00000392 <__udivmodhi4_loop>:
 392:	aa 1f       	adc	r26, r26
 394:	bb 1f       	adc	r27, r27
 396:	a6 17       	cp	r26, r22
 398:	b7 07       	cpc	r27, r23
 39a:	10 f0       	brcs	.+4      	; 0x3a0 <__udivmodhi4_ep>
 39c:	a6 1b       	sub	r26, r22
 39e:	b7 0b       	sbc	r27, r23

000003a0 <__udivmodhi4_ep>:
 3a0:	88 1f       	adc	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	5a 95       	dec	r21
 3a6:	a9 f7       	brne	.-22     	; 0x392 <__udivmodhi4_loop>
 3a8:	80 95       	com	r24
 3aa:	90 95       	com	r25
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
