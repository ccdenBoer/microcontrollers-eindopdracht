
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000d62  00000df6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011c  0080011c  00000e12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017e6  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9c  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbd  00000000  00000000  00003496  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00004154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000707  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b91  00000000  00000000  00004b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000572c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	00 00       	nop
   4:	6f c1       	rjmp	.+734    	; 0x2e4 <__vector_1>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	12 c1       	rjmp	.+548    	; 0x256 <__vector_12>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3f 02       	muls	r19, r31
  8e:	7b 02       	muls	r23, r27
  90:	42 02       	muls	r20, r18
  92:	45 02       	muls	r20, r21
  94:	48 02       	muls	r20, r24
  96:	4b 02       	muls	r20, r27
  98:	4e 02       	muls	r20, r30
  9a:	51 02       	muls	r21, r17
  9c:	54 02       	muls	r21, r20
  9e:	57 02       	muls	r21, r23
  a0:	78 02       	muls	r23, r24
  a2:	5a 02       	muls	r21, r26
  a4:	78 02       	muls	r23, r24
  a6:	5d 02       	muls	r21, r29
  a8:	60 02       	muls	r22, r16
  aa:	63 02       	muls	r22, r19
  ac:	66 02       	muls	r22, r22
  ae:	69 02       	muls	r22, r25
  b0:	6c 02       	muls	r22, r28
  b2:	6f 02       	muls	r22, r31
  b4:	72 02       	muls	r23, r18
  b6:	78 02       	muls	r23, r24
  b8:	78 02       	muls	r23, r24
  ba:	78 02       	muls	r23, r24
  bc:	75 02       	muls	r23, r21

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d0 e1       	ldi	r29, 0x10	; 16
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e2 e6       	ldi	r30, 0x62	; 98
  d2:	fd e0       	ldi	r31, 0x0D	; 13
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
  da:	07 90       	elpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	ac 31       	cpi	r26, 0x1C	; 28
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	ac e1       	ldi	r26, 0x1C	; 28
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a0 32       	cpi	r26, 0x20	; 32
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0d d1       	rcall	.+538    	; 0x310 <main>
  f6:	33 c6       	rjmp	.+3174   	; 0xd5e <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <adc_init>:
#include <avr/io.h>
#include "adc.h"


void adc_init(){
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  fe:	86 ee       	ldi	r24, 0xE6	; 230
 100:	86 b9       	out	0x06, r24	; 6
 102:	08 95       	ret

00000104 <writeInitCommand_strobe_e>:
#include <stdio.h>
#include "lcd.h"

void writeInitCommand_strobe_e(unsigned char byte)
{
	byte &= 0xF0;
 104:	80 7f       	andi	r24, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
 106:	88 60       	ori	r24, 0x08	; 8
 108:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	97 e0       	ldi	r25, 0x07	; 7
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <writeInitCommand_strobe_e+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <writeInitCommand_strobe_e+0x10>
 114:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 116:	85 b3       	in	r24, 0x15	; 21
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <writeInitCommand_strobe_e+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <writeInitCommand_strobe_e+0x22>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <write2NibbleCommand_strobe_e>:
void write2NibbleCommand_strobe_e(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte &= 0xF0;
 12a:	98 2f       	mov	r25, r24
 12c:	90 7f       	andi	r25, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
 12e:	98 60       	ori	r25, 0x08	; 8
 130:	95 bb       	out	0x15, r25	; 21
 132:	ef ec       	ldi	r30, 0xCF	; 207
 134:	f7 e0       	ldi	r31, 0x07	; 7
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <write2NibbleCommand_strobe_e+0xc>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <write2NibbleCommand_strobe_e+0x12>
 13c:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 13e:	95 b3       	in	r25, 0x15	; 21
 140:	97 7f       	andi	r25, 0xF7	; 247
 142:	95 bb       	out	0x15, r25	; 21
 144:	ef ec       	ldi	r30, 0xCF	; 207
 146:	f7 e0       	ldi	r31, 0x07	; 7
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <write2NibbleCommand_strobe_e+0x1e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <write2NibbleCommand_strobe_e+0x24>
 14e:	00 00       	nop
	_delay_ms(1);				// nodig?
	
	// Second nibble
	byte = (tmpByte<<4);
 150:	82 95       	swap	r24
 152:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	PORTC = byte | (1<<LCD_E);	// E high
 154:	88 60       	ori	r24, 0x08	; 8
 156:	85 bb       	out	0x15, r24	; 21
 158:	8f ec       	ldi	r24, 0xCF	; 207
 15a:	97 e0       	ldi	r25, 0x07	; 7
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <write2NibbleCommand_strobe_e+0x32>
 160:	00 c0       	rjmp	.+0      	; 0x162 <write2NibbleCommand_strobe_e+0x38>
 162:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 164:	85 b3       	in	r24, 0x15	; 21
 166:	87 7f       	andi	r24, 0xF7	; 247
 168:	85 bb       	out	0x15, r24	; 21
 16a:	ef ec       	ldi	r30, 0xCF	; 207
 16c:	f7 e0       	ldi	r31, 0x07	; 7
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <write2NibbleCommand_strobe_e+0x44>
 172:	00 c0       	rjmp	.+0      	; 0x174 <write2NibbleCommand_strobe_e+0x4a>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <write2NibbleData_Strobe_E>:
void write2NibbleData_Strobe_E(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte = byte & 0xF0;
 178:	98 2f       	mov	r25, r24
 17a:	90 7f       	andi	r25, 0xF0	; 240
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
 17c:	9c 60       	ori	r25, 0x0C	; 12
 17e:	95 bb       	out	0x15, r25	; 21
 180:	ef ec       	ldi	r30, 0xCF	; 207
 182:	f7 e0       	ldi	r31, 0x07	; 7
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <write2NibbleData_Strobe_E+0xc>
 188:	00 c0       	rjmp	.+0      	; 0x18a <write2NibbleData_Strobe_E+0x12>
 18a:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 18c:	95 b3       	in	r25, 0x15	; 21
 18e:	97 7f       	andi	r25, 0xF7	; 247
 190:	95 bb       	out	0x15, r25	; 21
 192:	ef ec       	ldi	r30, 0xCF	; 207
 194:	f7 e0       	ldi	r31, 0x07	; 7
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <write2NibbleData_Strobe_E+0x1e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <write2NibbleData_Strobe_E+0x24>
 19c:	00 00       	nop
	_delay_ms(1);				// nodig?

	// Second nibble
	byte = (tmpByte<<4);
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
 1a2:	8c 60       	ori	r24, 0x0C	; 12
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	8f ec       	ldi	r24, 0xCF	; 207
 1a8:	97 e0       	ldi	r25, 0x07	; 7
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <write2NibbleData_Strobe_E+0x32>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <write2NibbleData_Strobe_E+0x38>
 1b0:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	ef ec       	ldi	r30, 0xCF	; 207
 1ba:	f7 e0       	ldi	r31, 0x07	; 7
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <write2NibbleData_Strobe_E+0x44>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <write2NibbleData_Strobe_E+0x4a>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <init_4bits_mode>:

void init_4bits_mode(void)
{
	// Step 2 (table 12)
	// function set
	writeInitCommand_strobe_e(0x20);
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	9d df       	rcall	.-198    	; 0x104 <writeInitCommand_strobe_e>

	// Step 3 (table 12)
	// function set
	write2NibbleCommand_strobe_e(0x28);
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	ae df       	rcall	.-164    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Display on/off control
	write2NibbleCommand_strobe_e(0x0F);
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	ac df       	rcall	.-168    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Entry mode set
	write2NibbleCommand_strobe_e(0x06);
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	aa cf       	rjmp	.-172    	; 0x12a <write2NibbleCommand_strobe_e>
 1d6:	08 95       	ret

000001d8 <lcd_write_string>:
 1d8:	cf 93       	push	r28
}

void lcd_write_string(char *str)
{
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	// of met een for:
	for(;*str; str++){
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcd_write_string+0xc>
		write2NibbleData_Strobe_E(*str);
 1e0:	cb df       	rcall	.-106    	; 0x178 <write2NibbleData_Strobe_E>
}

void lcd_write_string(char *str)
{
	// of met een for:
	for(;*str; str++){
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	88 81       	ld	r24, Y
 1e6:	81 11       	cpse	r24, r1
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <lcd_write_string+0x8>
		write2NibbleData_Strobe_E(*str);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <lcd_write_integer>:

void lcd_write_integer(int data)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	60 97       	sbiw	r28, 0x10	; 16
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
	char data_out[16];
	memset(data_out, 0, sizeof(data_out[0]) * 16);
 208:	8e 01       	movw	r16, r28
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	20 e1       	ldi	r18, 0x10	; 16
 210:	f8 01       	movw	r30, r16
 212:	11 92       	st	Z+, r1
 214:	2a 95       	dec	r18
 216:	e9 f7       	brne	.-6      	; 0x212 <lcd_write_integer+0x22>
	sprintf(data_out, "%u", data);
 218:	9f 93       	push	r25
 21a:	8f 93       	push	r24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	9f 93       	push	r25
 222:	8f 93       	push	r24
 224:	1f 93       	push	r17
 226:	0f 93       	push	r16
 228:	bf d2       	rcall	.+1406   	; 0x7a8 <sprintf>
	lcd_write_string(data_out);
 22a:	c8 01       	movw	r24, r16
 22c:	d5 df       	rcall	.-86     	; 0x1d8 <lcd_write_string>
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	60 96       	adiw	r28, 0x10	; 16
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <lcd_clear>:

void lcd_clear()
{
	write2NibbleCommand_strobe_e (0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	6b cf       	rjmp	.-298    	; 0x12a <write2NibbleCommand_strobe_e>
 254:	08 95       	ret

00000256 <__vector_12>:
volatile int msCount = 0;
static bool right_direction = true;

static int number = 0;

ISR( TIMER1_COMPA_vect ) {
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	0b b6       	in	r0, 0x3b	; 59
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	//read out the 10 bit value
	number = ADCH << 2;
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
	number |= ADCL >> 6;
 288:	24 b1       	in	r18, 0x04	; 4
 28a:	22 95       	swap	r18
 28c:	26 95       	lsr	r18
 28e:	26 95       	lsr	r18
 290:	23 70       	andi	r18, 0x03	; 3
 292:	82 2b       	or	r24, r18
	
	//10.240 + 54 * 1024(max 10 bit value) = 65536(max value of an 16 bit integer)
	timer_set_compare_value(64*number);
 294:	00 24       	eor	r0, r0
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	07 94       	ror	r0
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	07 94       	ror	r0
 2a2:	98 2f       	mov	r25, r24
 2a4:	80 2d       	mov	r24, r0
 2a6:	e3 d1       	rcall	.+966    	; 0x66e <timer_set_compare_value>
	
	//move the text on the 7-seg display
	if(right_direction){
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ac:	88 23       	and	r24, r24
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <__vector_12+0x62>
		spi_moveText(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	69 d1       	rcall	.+722    	; 0x588 <spi_moveText>
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <__vector_12+0x68>
	} else {
		spi_moveText(-1);
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	65 d1       	rcall	.+714    	; 0x588 <spi_moveText>
	}
	
	
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0b be       	out	0x3b, r0	; 59
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_1>:

//react to button pres to change the direction the 7-seg display scrolls
ISR( INT0_vect ) {
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
    if(right_direction){
 2f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f4:	88 23       	and	r24, r24
 2f6:	19 f0       	breq	.+6      	; 0x2fe <__vector_1+0x1a>
		right_direction = false;
 2f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <__vector_1+0x20>
	} else {
		right_direction = true;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <main>:

int main(void)
{
	//lcd
	DDRC = 0xFF;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 314:	15 ba       	out	0x15, r1	; 21
	
	init_4bits_mode();
 316:	57 df       	rcall	.-338    	; 0x1c6 <init_4bits_mode>
	lcd_clear();
 318:	9b df       	rcall	.-202    	; 0x250 <lcd_clear>
 31a:	81 e0       	ldi	r24, 0x01	; 1
	
	//spi
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 31c:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 31e:	62 d0       	rcall	.+196    	; 0x3e4 <spi_masterInit>
 320:	96 d0       	rcall	.+300    	; 0x44e <spi_displayDriverInit>
	spi_displayDriverInit();            // Initialize display chip
 322:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 324:	09 c0       	rjmp	.+18     	; 0x338 <main+0x28>
	{
		spi_slaveSelect(0); 		// Select display chip
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	6c d0       	rcall	.+216    	; 0x402 <spi_slaveSelect>
		spi_write(i);  				// 	digit adress: (digit place)
 32a:	8c 2f       	mov	r24, r28
 32c:	66 d0       	rcall	.+204    	; 0x3fa <spi_write>
		spi_write(0);				// 	digit value: 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	64 d0       	rcall	.+200    	; 0x3fa <spi_write>
 332:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0);		// Deselect display chip
 334:	72 d0       	rcall	.+228    	; 0x41a <spi_slaveDeSelect>
 336:	cf 5f       	subi	r28, 0xFF	; 255
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	spi_displayDriverInit();            // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 338:	c5 30       	cpi	r28, 0x05	; 5
 33a:	a8 f3       	brcs	.-22     	; 0x326 <main+0x16>
		spi_slaveDeSelect(0);		// Deselect display chip
	}
	
	char *text = "hallo iedereen.";
	
	spi_setText(text);
 33c:	84 e0       	ldi	r24, 0x04	; 4
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	1d d1       	rcall	.+570    	; 0x57c <spi_setText>
		
	//adc initialization
	DDRF = 0x00;				// set PORTF for input (ADC)
 342:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;				// set PORTA for output
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	8a bb       	out	0x1a, r24	; 26
	adc_init();
 34a:	d7 de       	rcall	.-594    	; 0xfa <adc_init>
 34c:	85 b1       	in	r24, 0x05	; 5
	
	//read the 10 bits from the adc into number
	number = ADCH << 2;
 34e:	84 b1       	in	r24, 0x04	; 4
	number |= ADCL >> 6;
 350:	83 d1       	rcall	.+774    	; 0x658 <timer_init>

	//timer initialization
	timer_init();
 352:	85 b1       	in	r24, 0x05	; 5
 354:	90 e0       	ldi	r25, 0x00	; 0
	number = ADCH << 2;
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	24 b1       	in	r18, 0x04	; 4
 360:	22 95       	swap	r18
	number |= ADCL >> 6;
 362:	26 95       	lsr	r18
 364:	26 95       	lsr	r18
 366:	23 70       	andi	r18, 0x03	; 3
 368:	82 2b       	or	r24, r18
 36a:	9c 01       	movw	r18, r24
	timer_set_compare_value(6*number);
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	82 0f       	add	r24, r18
 372:	93 1f       	adc	r25, r19
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	7a d1       	rcall	.+756    	; 0x66e <timer_set_compare_value>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	82 b9       	out	0x02, r24	; 2
	
	//interupt initialization
	DDRE = 0x01;			// PORTE 0 input	
 37e:	ea e6       	ldi	r30, 0x6A	; 106

	// Init Interrupt hardware
	EICRA |= 0x03;			// INT0 rising edge
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	83 60       	ori	r24, 0x03	; 3
 386:	80 83       	st	Z, r24
	EIMSK |= 0x01;			// Enable INT0
 388:	89 b7       	in	r24, 0x39	; 57
 38a:	81 60       	ori	r24, 0x01	; 1
	sei();
	
    while (1) 
    {

		PORTA = ADCH;
 38c:	89 bf       	out	0x39, r24	; 57
 38e:	78 94       	sei
		
		//write the full string and speed to the lcd, "<text> - <speed> hz"
		lcd_clear();
 390:	85 b1       	in	r24, 0x05	; 5
		lcd_write_string(text);
 392:	8b bb       	out	0x1b, r24	; 27
 394:	5d df       	rcall	.-326    	; 0x250 <lcd_clear>
 396:	84 e0       	ldi	r24, 0x04	; 4
		wait(3);
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	1e df       	rcall	.-452    	; 0x1d8 <lcd_write_string>
 39c:	83 e0       	ldi	r24, 0x03	; 3
		lcd_write_string(" - ");
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	12 d0       	rcall	.+36     	; 0x3c6 <wait>
 3a2:	84 e1       	ldi	r24, 0x14	; 20
		wait(3);
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	18 df       	rcall	.-464    	; 0x1d8 <lcd_write_string>
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	90 e0       	ldi	r25, 0x00	; 0
		lcd_write_integer(timer_get_hz());
 3ac:	0c d0       	rcall	.+24     	; 0x3c6 <wait>
 3ae:	70 d1       	rcall	.+736    	; 0x690 <timer_get_hz>
 3b0:	1f df       	rcall	.-450    	; 0x1f0 <lcd_write_integer>
 3b2:	83 e0       	ldi	r24, 0x03	; 3
		wait(3);
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	07 d0       	rcall	.+14     	; 0x3c6 <wait>
 3b8:	88 e1       	ldi	r24, 0x18	; 24
 3ba:	91 e0       	ldi	r25, 0x01	; 1
		lcd_write_string(" Hz");
 3bc:	0d df       	rcall	.-486    	; 0x1d8 <lcd_write_string>
 3be:	88 ee       	ldi	r24, 0xE8	; 232
 3c0:	93 e0       	ldi	r25, 0x03	; 3
 3c2:	01 d0       	rcall	.+2      	; 0x3c6 <wait>
		
		wait(1000);
 3c4:	e5 cf       	rjmp	.-54     	; 0x390 <main+0x80>

000003c6 <wait>:
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <wait+0x16>
 3cc:	ef ec       	ldi	r30, 0xCF	; 207
void spi_displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
 3ce:	f7 e0       	ldi	r31, 0x07	; 7
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <wait+0xa>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <wait+0x10>
 3d6:	00 00       	nop
 3d8:	2f 5f       	subi	r18, 0xFF	; 255
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	ac f3       	brlt	.-22     	; 0x3cc <wait+0x6>
 3e2:	08 95       	ret

000003e4 <spi_masterInit>:
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	87 bb       	out	0x17, r24	; 23
 3e8:	87 b3       	in	r24, 0x17	; 23
 3ea:	87 7f       	andi	r24, 0xF7	; 247
 3ec:	87 bb       	out	0x17, r24	; 23
 3ee:	88 b3       	in	r24, 0x18	; 24
 3f0:	81 60       	ori	r24, 0x01	; 1
 3f2:	88 bb       	out	0x18, r24	; 24
 3f4:	82 e5       	ldi	r24, 0x52	; 82
 3f6:	8d b9       	out	0x0d, r24	; 13
 3f8:	08 95       	ret

000003fa <spi_write>:
 3fa:	8f b9       	out	0x0f, r24	; 15
 3fc:	77 9b       	sbis	0x0e, 7	; 14
 3fe:	fe cf       	rjmp	.-4      	; 0x3fc <spi_write+0x2>
 400:	08 95       	ret

00000402 <spi_slaveSelect>:
 402:	98 b3       	in	r25, 0x18	; 24
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <spi_slaveSelect+0xc>
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <spi_slaveSelect+0x8>
 412:	20 95       	com	r18
 414:	29 23       	and	r18, r25
 416:	28 bb       	out	0x18, r18	; 24
 418:	08 95       	ret

0000041a <spi_slaveDeSelect>:
 41a:	98 b3       	in	r25, 0x18	; 24
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <spi_slaveDeSelect+0xc>
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <spi_slaveDeSelect+0x8>
 42a:	29 2b       	or	r18, r25
 42c:	28 bb       	out	0x18, r18	; 24
 42e:	08 95       	ret

00000430 <spi_writeWord>:
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	d8 2f       	mov	r29, r24
 436:	c6 2f       	mov	r28, r22
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	e3 df       	rcall	.-58     	; 0x402 <spi_slaveSelect>
 43c:	8d 2f       	mov	r24, r29
 43e:	dd df       	rcall	.-70     	; 0x3fa <spi_write>
 440:	8c 2f       	mov	r24, r28
 442:	db df       	rcall	.-74     	; 0x3fa <spi_write>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	e9 df       	rcall	.-46     	; 0x41a <spi_slaveDeSelect>
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <spi_displayDriverInit>:
 44e:	6f ef       	ldi	r22, 0xFF	; 255
 450:	89 e0       	ldi	r24, 0x09	; 9
 452:	ee df       	rcall	.-36     	; 0x430 <spi_writeWord>
 454:	64 e0       	ldi	r22, 0x04	; 4
 456:	8a e0       	ldi	r24, 0x0A	; 10
 458:	eb df       	rcall	.-42     	; 0x430 <spi_writeWord>
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	8b e0       	ldi	r24, 0x0B	; 11
 45e:	e8 df       	rcall	.-48     	; 0x430 <spi_writeWord>
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	8c e0       	ldi	r24, 0x0C	; 12
 464:	e5 cf       	rjmp	.-54     	; 0x430 <spi_writeWord>
 466:	08 95       	ret

00000468 <spi_getCharacterCode>:
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
	spi_writeText(newText);
}

int spi_getCharacterCode(char character) {
	switch (toupper(character)) {
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	8b d1       	rcall	.+790    	; 0x782 <toupper>
 46c:	81 54       	subi	r24, 0x41	; 65
 46e:	91 09       	sbc	r25, r1
 470:	89 31       	cpi	r24, 0x19	; 25
 472:	91 05       	cpc	r25, r1
 474:	e8 f5       	brcc	.+122    	; 0x4f0 <spi_getCharacterCode+0x88>
 476:	8a 5b       	subi	r24, 0xBA	; 186
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	fc 01       	movw	r30, r24
 47c:	43 c1       	rjmp	.+646    	; 0x704 <__tablejump2__>
		case 'A':
			return 0x77;
 47e:	87 e7       	ldi	r24, 0x77	; 119
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	08 95       	ret
		case 'B':
			return 0x1F;
		case 'C':
			return 0x4E;
 484:	8e e4       	ldi	r24, 0x4E	; 78
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	08 95       	ret
		case 'D':
			return 0x3D;
 48a:	8d e3       	ldi	r24, 0x3D	; 61
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	08 95       	ret
		case 'E':
			return 0x4F;
 490:	8f e4       	ldi	r24, 0x4F	; 79
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 95       	ret
		case 'F':
			return 0x47;
 496:	87 e4       	ldi	r24, 0x47	; 71
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	08 95       	ret
		case 'G':
			return 0x5E;
 49c:	8e e5       	ldi	r24, 0x5E	; 94
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 95       	ret
		case 'H':
			return 0x37;
 4a2:	87 e3       	ldi	r24, 0x37	; 55
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	08 95       	ret
		case 'I':
			return 0x06;
 4a8:	86 e0       	ldi	r24, 0x06	; 6
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	08 95       	ret
		case 'J':
			return 0x3C;
 4ae:	8c e3       	ldi	r24, 0x3C	; 60
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	08 95       	ret
		case 'L':
			return 0x0E;
 4b4:	8e e0       	ldi	r24, 0x0E	; 14
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	08 95       	ret
		case 'N':
			return 0x15;
 4ba:	85 e1       	ldi	r24, 0x15	; 21
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	08 95       	ret
		case 'O':
			return 0x7E;
 4c0:	8e e7       	ldi	r24, 0x7E	; 126
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	08 95       	ret
		case 'P':
			return 0x67;
 4c6:	87 e6       	ldi	r24, 0x67	; 103
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	08 95       	ret
		case 'Q':
			return 0x73;
 4cc:	83 e7       	ldi	r24, 0x73	; 115
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	08 95       	ret
		case 'R':
			return 0x05;
 4d2:	85 e0       	ldi	r24, 0x05	; 5
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	08 95       	ret
		case 'S':
			return 0x5B;
 4d8:	8b e5       	ldi	r24, 0x5B	; 91
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	08 95       	ret
		case 'T':
			return 0x0F;
 4de:	8f e0       	ldi	r24, 0x0F	; 15
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	08 95       	ret
		case 'U':
			return 0x3E;
 4e4:	8e e3       	ldi	r24, 0x3E	; 62
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	08 95       	ret
		case 'Y':
			return 0x3B;
 4ea:	8b e3       	ldi	r24, 0x3B	; 59
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 95       	ret
		default:
			return 0x00;  // return 0x00 for any other character
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	08 95       	ret
int spi_getCharacterCode(char character) {
	switch (toupper(character)) {
		case 'A':
			return 0x77;
		case 'B':
			return 0x1F;
 4f6:	8f e1       	ldi	r24, 0x1F	; 31
 4f8:	90 e0       	ldi	r25, 0x00	; 0
		case 'Y':
			return 0x3B;
		default:
			return 0x00;  // return 0x00 for any other character
	}
}
 4fa:	08 95       	ret

000004fc <spi_writeCharacter>:
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
}

void spi_writeCharacter(char character, char index) {
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	d8 2f       	mov	r29, r24
 502:	c6 2f       	mov	r28, r22
	spi_writeWord(0x9, 0);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	89 e0       	ldi	r24, 0x09	; 9
 508:	93 df       	rcall	.-218    	; 0x430 <spi_writeWord>
	spi_writeWord(index, spi_getCharacterCode(character));
 50a:	8d 2f       	mov	r24, r29
 50c:	ad df       	rcall	.-166    	; 0x468 <spi_getCharacterCode>
 50e:	68 2f       	mov	r22, r24
 510:	8c 2f       	mov	r24, r28
 512:	8e df       	rcall	.-228    	; 0x430 <spi_writeWord>
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <spi_writeText>:
void spi_setText(char *str) {
	text = str;
	spi_writeText(str);
}

void spi_writeText(char *string) {
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
	while(strlen(string) < 4){
 528:	04 c0       	rjmp	.+8      	; 0x532 <spi_writeText+0x18>
		strcat(string, (char*)' ');
 52a:	60 e2       	ldi	r22, 0x20	; 32
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	ce 01       	movw	r24, r28
 530:	30 d1       	rcall	.+608    	; 0x792 <strcat>
	text = str;
	spi_writeText(str);
}

void spi_writeText(char *string) {
	while(strlen(string) < 4){
 532:	fe 01       	movw	r30, r28
 534:	01 90       	ld	r0, Z+
 536:	00 20       	and	r0, r0
 538:	e9 f7       	brne	.-6      	; 0x534 <spi_writeText+0x1a>
 53a:	31 97       	sbiw	r30, 0x01	; 1
 53c:	ec 1b       	sub	r30, r28
 53e:	fd 0b       	sbc	r31, r29
 540:	34 97       	sbiw	r30, 0x04	; 4
 542:	98 f3       	brcs	.-26     	; 0x52a <spi_writeText+0x10>
 544:	00 e0       	ldi	r16, 0x00	; 0
 546:	10 e0       	ldi	r17, 0x00	; 0
 548:	68 94       	set
 54a:	ee 24       	eor	r14, r14
 54c:	e2 f8       	bld	r14, 2
 54e:	f1 2c       	mov	r15, r1
 550:	0b c0       	rjmp	.+22     	; 0x568 <spi_writeText+0x4e>
		strcat(string, (char*)' ');
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
		spi_writeCharacter(string[i], j);
 552:	fe 01       	movw	r30, r28
 554:	e0 0f       	add	r30, r16
 556:	f1 1f       	adc	r31, r17
 558:	6e 2d       	mov	r22, r14
 55a:	80 81       	ld	r24, Z
 55c:	cf df       	rcall	.-98     	; 0x4fc <spi_writeCharacter>
	while(strlen(string) < 4){
		strcat(string, (char*)' ');
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
 55e:	0f 5f       	subi	r16, 0xFF	; 255
 560:	1f 4f       	sbci	r17, 0xFF	; 255
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	e8 1a       	sub	r14, r24
 566:	f1 08       	sbc	r15, r1
 568:	04 30       	cpi	r16, 0x04	; 4
 56a:	11 05       	cpc	r17, r1
 56c:	94 f3       	brlt	.-28     	; 0x552 <spi_writeText+0x38>
		spi_writeCharacter(string[i], j);
	}
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	08 95       	ret

0000057c <spi_setText>:
void spi_writeCharacter(char character, char index) {
	spi_writeWord(0x9, 0);
	spi_writeWord(index, spi_getCharacterCode(character));
}
void spi_setText(char *str) {
	text = str;
 57c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 580:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	spi_writeText(str);
 584:	ca cf       	rjmp	.-108    	; 0x51a <spi_writeText>
 586:	08 95       	ret

00000588 <spi_moveText>:
	for (int i = 0; i < 4; i++, j--) {
		spi_writeCharacter(string[i], j);
	}
}

void spi_moveText(int steps) {
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	00 d0       	rcall	.+0      	; 0x592 <spi_moveText+0xa>
 592:	00 d0       	rcall	.+0      	; 0x594 <spi_moveText+0xc>
 594:	1f 92       	push	r1
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
	int len = strlen(text)+1;
 59a:	00 91 1c 01 	lds	r16, 0x011C	; 0x80011c <__data_end>
 59e:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <__data_end+0x1>
 5a2:	f8 01       	movw	r30, r16
 5a4:	01 90       	ld	r0, Z+
 5a6:	00 20       	and	r0, r0
 5a8:	e9 f7       	brne	.-6      	; 0x5a4 <spi_moveText+0x1c>
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	9f 01       	movw	r18, r30
 5ae:	20 1b       	sub	r18, r16
 5b0:	31 0b       	sbc	r19, r17
 5b2:	2f 5f       	subi	r18, 0xFF	; 255
 5b4:	3f 4f       	sbci	r19, 0xFF	; 255
 5b6:	62 2f       	mov	r22, r18
 5b8:	73 2f       	mov	r23, r19
	position+=steps;
 5ba:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <position>
 5be:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <position+0x1>
 5c2:	48 0f       	add	r20, r24
 5c4:	59 1f       	adc	r21, r25
 5c6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <position+0x1>
 5ca:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <position>
	if(position < 0){
 5ce:	55 23       	and	r21, r21
 5d0:	3c f4       	brge	.+14     	; 0x5e0 <spi_moveText+0x58>
		position = len + steps-1;
 5d2:	82 0f       	add	r24, r18
 5d4:	93 1f       	adc	r25, r19
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <position+0x1>
 5dc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <position>
	}
	position%=len;
 5e0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <position>
 5e4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <position+0x1>
 5e8:	5e d0       	rcall	.+188    	; 0x6a6 <__divmodhi4>
 5ea:	fc 01       	movw	r30, r24
 5ec:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <position+0x1>
 5f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <position>
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	31 09       	sbc	r19, r1
 5f8:	b9 01       	movw	r22, r18
 5fa:	55 d0       	rcall	.+170    	; 0x6a6 <__divmodhi4>
 5fc:	d8 01       	movw	r26, r16
 5fe:	a8 0f       	add	r26, r24
 600:	b9 1f       	adc	r27, r25
 602:	8c 91       	ld	r24, X
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	cf 01       	movw	r24, r30
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	b9 01       	movw	r22, r18
 60c:	4c d0       	rcall	.+152    	; 0x6a6 <__divmodhi4>
 60e:	d8 01       	movw	r26, r16
 610:	a8 0f       	add	r26, r24
 612:	b9 1f       	adc	r27, r25
 614:	8c 91       	ld	r24, X
 616:	8a 83       	std	Y+2, r24	; 0x02
 618:	cf 01       	movw	r24, r30
 61a:	02 96       	adiw	r24, 0x02	; 2
 61c:	b9 01       	movw	r22, r18
 61e:	43 d0       	rcall	.+134    	; 0x6a6 <__divmodhi4>
 620:	d8 01       	movw	r26, r16
 622:	a8 0f       	add	r26, r24
 624:	b9 1f       	adc	r27, r25
 626:	8c 91       	ld	r24, X
 628:	8b 83       	std	Y+3, r24	; 0x03
 62a:	cf 01       	movw	r24, r30
 62c:	03 96       	adiw	r24, 0x03	; 3
 62e:	b9 01       	movw	r22, r18
 630:	3a d0       	rcall	.+116    	; 0x6a6 <__divmodhi4>
 632:	f8 01       	movw	r30, r16
 634:	e8 0f       	add	r30, r24
 636:	f9 1f       	adc	r31, r25
 638:	80 81       	ld	r24, Z
 63a:	8c 83       	std	Y+4, r24	; 0x04
 63c:	1d 82       	std	Y+5, r1	; 0x05
	spi_writeText(newText);
 63e:	ce 01       	movw	r24, r28
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	6b df       	rcall	.-298    	; 0x51a <spi_writeText>
 644:	0f 90       	pop	r0
}
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
 
 //init a timer resulting in 10 Hz
void timer_init(){
	OCR1A = 31250; // 16-bits compare value of counter 1
 658:	82 e1       	ldi	r24, 0x12	; 18
 65a:	9a e7       	ldi	r25, 0x7A	; 122
 65c:	9b bd       	out	0x2b, r25	; 43
 65e:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0b00000000;
 660:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // // Initialize T1: timer, prescaler = 256, compare output disconnected, CTC, RUN
 662:	8c e0       	ldi	r24, 0x0C	; 12
 664:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<4); // T1 compare match A interrupt enable
 666:	87 b7       	in	r24, 0x37	; 55
 668:	80 61       	ori	r24, 0x10	; 16
 66a:	87 bf       	out	0x37, r24	; 55
 66c:	08 95       	ret

0000066e <timer_set_compare_value>:
}

//set the compare value, starting at 10240, allowing the timer to be between 30.5 Hz and 4.76 Hz
void timer_set_compare_value(int value){
	//check for overflow
	if(10240 + value > 0xFFFF || 10000 + value < 10000){
 66e:	9c 01       	movw	r18, r24
 670:	20 5f       	subi	r18, 0xF0	; 240
 672:	38 4d       	sbci	r19, 0xD8	; 216
 674:	20 31       	cpi	r18, 0x10	; 16
 676:	37 42       	sbci	r19, 0x27	; 39
 678:	2c f4       	brge	.+10     	; 0x684 <timer_set_compare_value+0x16>
		OCR1A = 0xFFFF;
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	9f ef       	ldi	r25, 0xFF	; 255
 67e:	9b bd       	out	0x2b, r25	; 43
 680:	8a bd       	out	0x2a, r24	; 42
 682:	03 c0       	rjmp	.+6      	; 0x68a <timer_set_compare_value+0x1c>
	} else{
		OCR1A = (10240+value);
 684:	98 5d       	subi	r25, 0xD8	; 216
 686:	9b bd       	out	0x2b, r25	; 43
 688:	8a bd       	out	0x2a, r24	; 42
	}
	
	TCNT1 = 0x00;
 68a:	1d bc       	out	0x2d, r1	; 45
 68c:	1c bc       	out	0x2c, r1	; 44
 68e:	08 95       	ret

00000690 <timer_get_hz>:
	
}

//calculate the hz of the current timer (80 Mhz / 256 prescaler / current compare value)
int timer_get_hz(){
	return 312500/OCR1A;
 690:	2a b5       	in	r18, 0x2a	; 42
 692:	3b b5       	in	r19, 0x2b	; 43
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	64 eb       	ldi	r22, 0xB4	; 180
 69a:	74 ec       	ldi	r23, 0xC4	; 196
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	15 d0       	rcall	.+42     	; 0x6cc <__divmodsi4>
}
 6a2:	c9 01       	movw	r24, r18
 6a4:	08 95       	ret

000006a6 <__divmodhi4>:
 6a6:	97 fb       	bst	r25, 7
 6a8:	07 2e       	mov	r0, r23
 6aa:	16 f4       	brtc	.+4      	; 0x6b0 <__divmodhi4+0xa>
 6ac:	00 94       	com	r0
 6ae:	06 d0       	rcall	.+12     	; 0x6bc <__divmodhi4_neg1>
 6b0:	77 fd       	sbrc	r23, 7
 6b2:	08 d0       	rcall	.+16     	; 0x6c4 <__divmodhi4_neg2>
 6b4:	30 d0       	rcall	.+96     	; 0x716 <__udivmodhi4>
 6b6:	07 fc       	sbrc	r0, 7
 6b8:	05 d0       	rcall	.+10     	; 0x6c4 <__divmodhi4_neg2>
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__divmodhi4_exit>

000006bc <__divmodhi4_neg1>:
 6bc:	90 95       	com	r25
 6be:	81 95       	neg	r24
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__divmodhi4_neg2>:
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255

000006ca <__divmodhi4_exit>:
 6ca:	08 95       	ret

000006cc <__divmodsi4>:
 6cc:	05 2e       	mov	r0, r21
 6ce:	97 fb       	bst	r25, 7
 6d0:	16 f4       	brtc	.+4      	; 0x6d6 <__divmodsi4+0xa>
 6d2:	00 94       	com	r0
 6d4:	0f d0       	rcall	.+30     	; 0x6f4 <__negsi2>
 6d6:	57 fd       	sbrc	r21, 7
 6d8:	05 d0       	rcall	.+10     	; 0x6e4 <__divmodsi4_neg2>
 6da:	31 d0       	rcall	.+98     	; 0x73e <__udivmodsi4>
 6dc:	07 fc       	sbrc	r0, 7
 6de:	02 d0       	rcall	.+4      	; 0x6e4 <__divmodsi4_neg2>
 6e0:	46 f4       	brtc	.+16     	; 0x6f2 <__divmodsi4_exit>
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <__negsi2>

000006e4 <__divmodsi4_neg2>:
 6e4:	50 95       	com	r21
 6e6:	40 95       	com	r20
 6e8:	30 95       	com	r19
 6ea:	21 95       	neg	r18
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	4f 4f       	sbci	r20, 0xFF	; 255
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255

000006f2 <__divmodsi4_exit>:
 6f2:	08 95       	ret

000006f4 <__negsi2>:
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__tablejump2__>:
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	00 24       	eor	r0, r0
 70a:	00 1c       	adc	r0, r0
 70c:	0b be       	out	0x3b, r0	; 59
 70e:	07 90       	elpm	r0, Z+
 710:	f6 91       	elpm	r31, Z
 712:	e0 2d       	mov	r30, r0
 714:	09 94       	ijmp

00000716 <__udivmodhi4>:
 716:	aa 1b       	sub	r26, r26
 718:	bb 1b       	sub	r27, r27
 71a:	51 e1       	ldi	r21, 0x11	; 17
 71c:	07 c0       	rjmp	.+14     	; 0x72c <__udivmodhi4_ep>

0000071e <__udivmodhi4_loop>:
 71e:	aa 1f       	adc	r26, r26
 720:	bb 1f       	adc	r27, r27
 722:	a6 17       	cp	r26, r22
 724:	b7 07       	cpc	r27, r23
 726:	10 f0       	brcs	.+4      	; 0x72c <__udivmodhi4_ep>
 728:	a6 1b       	sub	r26, r22
 72a:	b7 0b       	sbc	r27, r23

0000072c <__udivmodhi4_ep>:
 72c:	88 1f       	adc	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	5a 95       	dec	r21
 732:	a9 f7       	brne	.-22     	; 0x71e <__udivmodhi4_loop>
 734:	80 95       	com	r24
 736:	90 95       	com	r25
 738:	bc 01       	movw	r22, r24
 73a:	cd 01       	movw	r24, r26
 73c:	08 95       	ret

0000073e <__udivmodsi4>:
 73e:	a1 e2       	ldi	r26, 0x21	; 33
 740:	1a 2e       	mov	r1, r26
 742:	aa 1b       	sub	r26, r26
 744:	bb 1b       	sub	r27, r27
 746:	fd 01       	movw	r30, r26
 748:	0d c0       	rjmp	.+26     	; 0x764 <__udivmodsi4_ep>

0000074a <__udivmodsi4_loop>:
 74a:	aa 1f       	adc	r26, r26
 74c:	bb 1f       	adc	r27, r27
 74e:	ee 1f       	adc	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	a2 17       	cp	r26, r18
 754:	b3 07       	cpc	r27, r19
 756:	e4 07       	cpc	r30, r20
 758:	f5 07       	cpc	r31, r21
 75a:	20 f0       	brcs	.+8      	; 0x764 <__udivmodsi4_ep>
 75c:	a2 1b       	sub	r26, r18
 75e:	b3 0b       	sbc	r27, r19
 760:	e4 0b       	sbc	r30, r20
 762:	f5 0b       	sbc	r31, r21

00000764 <__udivmodsi4_ep>:
 764:	66 1f       	adc	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	1a 94       	dec	r1
 76e:	69 f7       	brne	.-38     	; 0x74a <__udivmodsi4_loop>
 770:	60 95       	com	r22
 772:	70 95       	com	r23
 774:	80 95       	com	r24
 776:	90 95       	com	r25
 778:	9b 01       	movw	r18, r22
 77a:	ac 01       	movw	r20, r24
 77c:	bd 01       	movw	r22, r26
 77e:	cf 01       	movw	r24, r30
 780:	08 95       	ret

00000782 <toupper>:
 782:	91 11       	cpse	r25, r1
 784:	08 95       	ret
 786:	81 56       	subi	r24, 0x61	; 97
 788:	8a 51       	subi	r24, 0x1A	; 26
 78a:	08 f4       	brcc	.+2      	; 0x78e <toupper+0xc>
 78c:	80 52       	subi	r24, 0x20	; 32
 78e:	85 58       	subi	r24, 0x85	; 133
 790:	08 95       	ret

00000792 <strcat>:
 792:	fb 01       	movw	r30, r22
 794:	dc 01       	movw	r26, r24
 796:	0d 90       	ld	r0, X+
 798:	00 20       	and	r0, r0
 79a:	e9 f7       	brne	.-6      	; 0x796 <strcat+0x4>
 79c:	11 97       	sbiw	r26, 0x01	; 1
 79e:	01 90       	ld	r0, Z+
 7a0:	0d 92       	st	X+, r0
 7a2:	00 20       	and	r0, r0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <strcat+0xc>
 7a6:	08 95       	ret

000007a8 <sprintf>:
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	2e 97       	sbiw	r28, 0x0e	; 14
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
 7c0:	0d 89       	ldd	r16, Y+21	; 0x15
 7c2:	1e 89       	ldd	r17, Y+22	; 0x16
 7c4:	86 e0       	ldi	r24, 0x06	; 6
 7c6:	8c 83       	std	Y+4, r24	; 0x04
 7c8:	1a 83       	std	Y+2, r17	; 0x02
 7ca:	09 83       	std	Y+1, r16	; 0x01
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	9f e7       	ldi	r25, 0x7F	; 127
 7d0:	9e 83       	std	Y+6, r25	; 0x06
 7d2:	8d 83       	std	Y+5, r24	; 0x05
 7d4:	ae 01       	movw	r20, r28
 7d6:	47 5e       	subi	r20, 0xE7	; 231
 7d8:	5f 4f       	sbci	r21, 0xFF	; 255
 7da:	6f 89       	ldd	r22, Y+23	; 0x17
 7dc:	78 8d       	ldd	r23, Y+24	; 0x18
 7de:	ce 01       	movw	r24, r28
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	10 d0       	rcall	.+32     	; 0x804 <vfprintf>
 7e4:	ef 81       	ldd	r30, Y+7	; 0x07
 7e6:	f8 85       	ldd	r31, Y+8	; 0x08
 7e8:	e0 0f       	add	r30, r16
 7ea:	f1 1f       	adc	r31, r17
 7ec:	10 82       	st	Z, r1
 7ee:	2e 96       	adiw	r28, 0x0e	; 14
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	08 95       	ret

00000804 <vfprintf>:
 804:	2f 92       	push	r2
 806:	3f 92       	push	r3
 808:	4f 92       	push	r4
 80a:	5f 92       	push	r5
 80c:	6f 92       	push	r6
 80e:	7f 92       	push	r7
 810:	8f 92       	push	r8
 812:	9f 92       	push	r9
 814:	af 92       	push	r10
 816:	bf 92       	push	r11
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	2b 97       	sbiw	r28, 0x0b	; 11
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	6c 01       	movw	r12, r24
 83a:	7b 01       	movw	r14, r22
 83c:	8a 01       	movw	r16, r20
 83e:	fc 01       	movw	r30, r24
 840:	17 82       	std	Z+7, r1	; 0x07
 842:	16 82       	std	Z+6, r1	; 0x06
 844:	83 81       	ldd	r24, Z+3	; 0x03
 846:	81 ff       	sbrs	r24, 1
 848:	bf c1       	rjmp	.+894    	; 0xbc8 <vfprintf+0x3c4>
 84a:	ce 01       	movw	r24, r28
 84c:	01 96       	adiw	r24, 0x01	; 1
 84e:	3c 01       	movw	r6, r24
 850:	f6 01       	movw	r30, r12
 852:	93 81       	ldd	r25, Z+3	; 0x03
 854:	f7 01       	movw	r30, r14
 856:	93 fd       	sbrc	r25, 3
 858:	85 91       	lpm	r24, Z+
 85a:	93 ff       	sbrs	r25, 3
 85c:	81 91       	ld	r24, Z+
 85e:	7f 01       	movw	r14, r30
 860:	88 23       	and	r24, r24
 862:	09 f4       	brne	.+2      	; 0x866 <vfprintf+0x62>
 864:	ad c1       	rjmp	.+858    	; 0xbc0 <vfprintf+0x3bc>
 866:	85 32       	cpi	r24, 0x25	; 37
 868:	39 f4       	brne	.+14     	; 0x878 <vfprintf+0x74>
 86a:	93 fd       	sbrc	r25, 3
 86c:	85 91       	lpm	r24, Z+
 86e:	93 ff       	sbrs	r25, 3
 870:	81 91       	ld	r24, Z+
 872:	7f 01       	movw	r14, r30
 874:	85 32       	cpi	r24, 0x25	; 37
 876:	21 f4       	brne	.+8      	; 0x880 <vfprintf+0x7c>
 878:	b6 01       	movw	r22, r12
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	d6 d1       	rcall	.+940    	; 0xc2a <fputc>
 87e:	e8 cf       	rjmp	.-48     	; 0x850 <vfprintf+0x4c>
 880:	91 2c       	mov	r9, r1
 882:	21 2c       	mov	r2, r1
 884:	31 2c       	mov	r3, r1
 886:	ff e1       	ldi	r31, 0x1F	; 31
 888:	f3 15       	cp	r31, r3
 88a:	d8 f0       	brcs	.+54     	; 0x8c2 <vfprintf+0xbe>
 88c:	8b 32       	cpi	r24, 0x2B	; 43
 88e:	79 f0       	breq	.+30     	; 0x8ae <vfprintf+0xaa>
 890:	38 f4       	brcc	.+14     	; 0x8a0 <vfprintf+0x9c>
 892:	80 32       	cpi	r24, 0x20	; 32
 894:	79 f0       	breq	.+30     	; 0x8b4 <vfprintf+0xb0>
 896:	83 32       	cpi	r24, 0x23	; 35
 898:	a1 f4       	brne	.+40     	; 0x8c2 <vfprintf+0xbe>
 89a:	23 2d       	mov	r18, r3
 89c:	20 61       	ori	r18, 0x10	; 16
 89e:	1d c0       	rjmp	.+58     	; 0x8da <vfprintf+0xd6>
 8a0:	8d 32       	cpi	r24, 0x2D	; 45
 8a2:	61 f0       	breq	.+24     	; 0x8bc <vfprintf+0xb8>
 8a4:	80 33       	cpi	r24, 0x30	; 48
 8a6:	69 f4       	brne	.+26     	; 0x8c2 <vfprintf+0xbe>
 8a8:	23 2d       	mov	r18, r3
 8aa:	21 60       	ori	r18, 0x01	; 1
 8ac:	16 c0       	rjmp	.+44     	; 0x8da <vfprintf+0xd6>
 8ae:	83 2d       	mov	r24, r3
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	38 2e       	mov	r3, r24
 8b4:	e3 2d       	mov	r30, r3
 8b6:	e4 60       	ori	r30, 0x04	; 4
 8b8:	3e 2e       	mov	r3, r30
 8ba:	2a c0       	rjmp	.+84     	; 0x910 <vfprintf+0x10c>
 8bc:	f3 2d       	mov	r31, r3
 8be:	f8 60       	ori	r31, 0x08	; 8
 8c0:	1d c0       	rjmp	.+58     	; 0x8fc <vfprintf+0xf8>
 8c2:	37 fc       	sbrc	r3, 7
 8c4:	2d c0       	rjmp	.+90     	; 0x920 <vfprintf+0x11c>
 8c6:	20 ed       	ldi	r18, 0xD0	; 208
 8c8:	28 0f       	add	r18, r24
 8ca:	2a 30       	cpi	r18, 0x0A	; 10
 8cc:	40 f0       	brcs	.+16     	; 0x8de <vfprintf+0xda>
 8ce:	8e 32       	cpi	r24, 0x2E	; 46
 8d0:	b9 f4       	brne	.+46     	; 0x900 <vfprintf+0xfc>
 8d2:	36 fc       	sbrc	r3, 6
 8d4:	75 c1       	rjmp	.+746    	; 0xbc0 <vfprintf+0x3bc>
 8d6:	23 2d       	mov	r18, r3
 8d8:	20 64       	ori	r18, 0x40	; 64
 8da:	32 2e       	mov	r3, r18
 8dc:	19 c0       	rjmp	.+50     	; 0x910 <vfprintf+0x10c>
 8de:	36 fe       	sbrs	r3, 6
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <vfprintf+0xea>
 8e2:	8a e0       	ldi	r24, 0x0A	; 10
 8e4:	98 9e       	mul	r9, r24
 8e6:	20 0d       	add	r18, r0
 8e8:	11 24       	eor	r1, r1
 8ea:	92 2e       	mov	r9, r18
 8ec:	11 c0       	rjmp	.+34     	; 0x910 <vfprintf+0x10c>
 8ee:	ea e0       	ldi	r30, 0x0A	; 10
 8f0:	2e 9e       	mul	r2, r30
 8f2:	20 0d       	add	r18, r0
 8f4:	11 24       	eor	r1, r1
 8f6:	22 2e       	mov	r2, r18
 8f8:	f3 2d       	mov	r31, r3
 8fa:	f0 62       	ori	r31, 0x20	; 32
 8fc:	3f 2e       	mov	r3, r31
 8fe:	08 c0       	rjmp	.+16     	; 0x910 <vfprintf+0x10c>
 900:	8c 36       	cpi	r24, 0x6C	; 108
 902:	21 f4       	brne	.+8      	; 0x90c <vfprintf+0x108>
 904:	83 2d       	mov	r24, r3
 906:	80 68       	ori	r24, 0x80	; 128
 908:	38 2e       	mov	r3, r24
 90a:	02 c0       	rjmp	.+4      	; 0x910 <vfprintf+0x10c>
 90c:	88 36       	cpi	r24, 0x68	; 104
 90e:	41 f4       	brne	.+16     	; 0x920 <vfprintf+0x11c>
 910:	f7 01       	movw	r30, r14
 912:	93 fd       	sbrc	r25, 3
 914:	85 91       	lpm	r24, Z+
 916:	93 ff       	sbrs	r25, 3
 918:	81 91       	ld	r24, Z+
 91a:	7f 01       	movw	r14, r30
 91c:	81 11       	cpse	r24, r1
 91e:	b3 cf       	rjmp	.-154    	; 0x886 <vfprintf+0x82>
 920:	98 2f       	mov	r25, r24
 922:	9f 7d       	andi	r25, 0xDF	; 223
 924:	95 54       	subi	r25, 0x45	; 69
 926:	93 30       	cpi	r25, 0x03	; 3
 928:	28 f4       	brcc	.+10     	; 0x934 <vfprintf+0x130>
 92a:	0c 5f       	subi	r16, 0xFC	; 252
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	9f e3       	ldi	r25, 0x3F	; 63
 930:	99 83       	std	Y+1, r25	; 0x01
 932:	0d c0       	rjmp	.+26     	; 0x94e <vfprintf+0x14a>
 934:	83 36       	cpi	r24, 0x63	; 99
 936:	31 f0       	breq	.+12     	; 0x944 <vfprintf+0x140>
 938:	83 37       	cpi	r24, 0x73	; 115
 93a:	71 f0       	breq	.+28     	; 0x958 <vfprintf+0x154>
 93c:	83 35       	cpi	r24, 0x53	; 83
 93e:	09 f0       	breq	.+2      	; 0x942 <vfprintf+0x13e>
 940:	55 c0       	rjmp	.+170    	; 0x9ec <vfprintf+0x1e8>
 942:	20 c0       	rjmp	.+64     	; 0x984 <vfprintf+0x180>
 944:	f8 01       	movw	r30, r16
 946:	80 81       	ld	r24, Z
 948:	89 83       	std	Y+1, r24	; 0x01
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	88 24       	eor	r8, r8
 950:	83 94       	inc	r8
 952:	91 2c       	mov	r9, r1
 954:	53 01       	movw	r10, r6
 956:	12 c0       	rjmp	.+36     	; 0x97c <vfprintf+0x178>
 958:	28 01       	movw	r4, r16
 95a:	f2 e0       	ldi	r31, 0x02	; 2
 95c:	4f 0e       	add	r4, r31
 95e:	51 1c       	adc	r5, r1
 960:	f8 01       	movw	r30, r16
 962:	a0 80       	ld	r10, Z
 964:	b1 80       	ldd	r11, Z+1	; 0x01
 966:	36 fe       	sbrs	r3, 6
 968:	03 c0       	rjmp	.+6      	; 0x970 <vfprintf+0x16c>
 96a:	69 2d       	mov	r22, r9
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <vfprintf+0x170>
 970:	6f ef       	ldi	r22, 0xFF	; 255
 972:	7f ef       	ldi	r23, 0xFF	; 255
 974:	c5 01       	movw	r24, r10
 976:	4e d1       	rcall	.+668    	; 0xc14 <strnlen>
 978:	4c 01       	movw	r8, r24
 97a:	82 01       	movw	r16, r4
 97c:	f3 2d       	mov	r31, r3
 97e:	ff 77       	andi	r31, 0x7F	; 127
 980:	3f 2e       	mov	r3, r31
 982:	15 c0       	rjmp	.+42     	; 0x9ae <vfprintf+0x1aa>
 984:	28 01       	movw	r4, r16
 986:	22 e0       	ldi	r18, 0x02	; 2
 988:	42 0e       	add	r4, r18
 98a:	51 1c       	adc	r5, r1
 98c:	f8 01       	movw	r30, r16
 98e:	a0 80       	ld	r10, Z
 990:	b1 80       	ldd	r11, Z+1	; 0x01
 992:	36 fe       	sbrs	r3, 6
 994:	03 c0       	rjmp	.+6      	; 0x99c <vfprintf+0x198>
 996:	69 2d       	mov	r22, r9
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <vfprintf+0x19c>
 99c:	6f ef       	ldi	r22, 0xFF	; 255
 99e:	7f ef       	ldi	r23, 0xFF	; 255
 9a0:	c5 01       	movw	r24, r10
 9a2:	2d d1       	rcall	.+602    	; 0xbfe <strnlen_P>
 9a4:	4c 01       	movw	r8, r24
 9a6:	f3 2d       	mov	r31, r3
 9a8:	f0 68       	ori	r31, 0x80	; 128
 9aa:	3f 2e       	mov	r3, r31
 9ac:	82 01       	movw	r16, r4
 9ae:	33 fc       	sbrc	r3, 3
 9b0:	19 c0       	rjmp	.+50     	; 0x9e4 <vfprintf+0x1e0>
 9b2:	82 2d       	mov	r24, r2
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	88 16       	cp	r8, r24
 9b8:	99 06       	cpc	r9, r25
 9ba:	a0 f4       	brcc	.+40     	; 0x9e4 <vfprintf+0x1e0>
 9bc:	b6 01       	movw	r22, r12
 9be:	80 e2       	ldi	r24, 0x20	; 32
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	33 d1       	rcall	.+614    	; 0xc2a <fputc>
 9c4:	2a 94       	dec	r2
 9c6:	f5 cf       	rjmp	.-22     	; 0x9b2 <vfprintf+0x1ae>
 9c8:	f5 01       	movw	r30, r10
 9ca:	37 fc       	sbrc	r3, 7
 9cc:	85 91       	lpm	r24, Z+
 9ce:	37 fe       	sbrs	r3, 7
 9d0:	81 91       	ld	r24, Z+
 9d2:	5f 01       	movw	r10, r30
 9d4:	b6 01       	movw	r22, r12
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	28 d1       	rcall	.+592    	; 0xc2a <fputc>
 9da:	21 10       	cpse	r2, r1
 9dc:	2a 94       	dec	r2
 9de:	21 e0       	ldi	r18, 0x01	; 1
 9e0:	82 1a       	sub	r8, r18
 9e2:	91 08       	sbc	r9, r1
 9e4:	81 14       	cp	r8, r1
 9e6:	91 04       	cpc	r9, r1
 9e8:	79 f7       	brne	.-34     	; 0x9c8 <vfprintf+0x1c4>
 9ea:	e1 c0       	rjmp	.+450    	; 0xbae <vfprintf+0x3aa>
 9ec:	84 36       	cpi	r24, 0x64	; 100
 9ee:	11 f0       	breq	.+4      	; 0x9f4 <vfprintf+0x1f0>
 9f0:	89 36       	cpi	r24, 0x69	; 105
 9f2:	39 f5       	brne	.+78     	; 0xa42 <vfprintf+0x23e>
 9f4:	f8 01       	movw	r30, r16
 9f6:	37 fe       	sbrs	r3, 7
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <vfprintf+0x204>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	82 81       	ldd	r24, Z+2	; 0x02
 a00:	93 81       	ldd	r25, Z+3	; 0x03
 a02:	0c 5f       	subi	r16, 0xFC	; 252
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	08 c0       	rjmp	.+16     	; 0xa18 <vfprintf+0x214>
 a08:	60 81       	ld	r22, Z
 a0a:	71 81       	ldd	r23, Z+1	; 0x01
 a0c:	07 2e       	mov	r0, r23
 a0e:	00 0c       	add	r0, r0
 a10:	88 0b       	sbc	r24, r24
 a12:	99 0b       	sbc	r25, r25
 a14:	0e 5f       	subi	r16, 0xFE	; 254
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	f3 2d       	mov	r31, r3
 a1a:	ff 76       	andi	r31, 0x6F	; 111
 a1c:	3f 2e       	mov	r3, r31
 a1e:	97 ff       	sbrs	r25, 7
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <vfprintf+0x230>
 a22:	90 95       	com	r25
 a24:	80 95       	com	r24
 a26:	70 95       	com	r23
 a28:	61 95       	neg	r22
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	f0 68       	ori	r31, 0x80	; 128
 a32:	3f 2e       	mov	r3, r31
 a34:	2a e0       	ldi	r18, 0x0A	; 10
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	a3 01       	movw	r20, r6
 a3a:	33 d1       	rcall	.+614    	; 0xca2 <__ultoa_invert>
 a3c:	88 2e       	mov	r8, r24
 a3e:	86 18       	sub	r8, r6
 a40:	44 c0       	rjmp	.+136    	; 0xaca <vfprintf+0x2c6>
 a42:	85 37       	cpi	r24, 0x75	; 117
 a44:	31 f4       	brne	.+12     	; 0xa52 <vfprintf+0x24e>
 a46:	23 2d       	mov	r18, r3
 a48:	2f 7e       	andi	r18, 0xEF	; 239
 a4a:	b2 2e       	mov	r11, r18
 a4c:	2a e0       	ldi	r18, 0x0A	; 10
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	25 c0       	rjmp	.+74     	; 0xa9c <vfprintf+0x298>
 a52:	93 2d       	mov	r25, r3
 a54:	99 7f       	andi	r25, 0xF9	; 249
 a56:	b9 2e       	mov	r11, r25
 a58:	8f 36       	cpi	r24, 0x6F	; 111
 a5a:	c1 f0       	breq	.+48     	; 0xa8c <vfprintf+0x288>
 a5c:	18 f4       	brcc	.+6      	; 0xa64 <vfprintf+0x260>
 a5e:	88 35       	cpi	r24, 0x58	; 88
 a60:	79 f0       	breq	.+30     	; 0xa80 <vfprintf+0x27c>
 a62:	ae c0       	rjmp	.+348    	; 0xbc0 <vfprintf+0x3bc>
 a64:	80 37       	cpi	r24, 0x70	; 112
 a66:	19 f0       	breq	.+6      	; 0xa6e <vfprintf+0x26a>
 a68:	88 37       	cpi	r24, 0x78	; 120
 a6a:	21 f0       	breq	.+8      	; 0xa74 <vfprintf+0x270>
 a6c:	a9 c0       	rjmp	.+338    	; 0xbc0 <vfprintf+0x3bc>
 a6e:	e9 2f       	mov	r30, r25
 a70:	e0 61       	ori	r30, 0x10	; 16
 a72:	be 2e       	mov	r11, r30
 a74:	b4 fe       	sbrs	r11, 4
 a76:	0d c0       	rjmp	.+26     	; 0xa92 <vfprintf+0x28e>
 a78:	fb 2d       	mov	r31, r11
 a7a:	f4 60       	ori	r31, 0x04	; 4
 a7c:	bf 2e       	mov	r11, r31
 a7e:	09 c0       	rjmp	.+18     	; 0xa92 <vfprintf+0x28e>
 a80:	34 fe       	sbrs	r3, 4
 a82:	0a c0       	rjmp	.+20     	; 0xa98 <vfprintf+0x294>
 a84:	29 2f       	mov	r18, r25
 a86:	26 60       	ori	r18, 0x06	; 6
 a88:	b2 2e       	mov	r11, r18
 a8a:	06 c0       	rjmp	.+12     	; 0xa98 <vfprintf+0x294>
 a8c:	28 e0       	ldi	r18, 0x08	; 8
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	05 c0       	rjmp	.+10     	; 0xa9c <vfprintf+0x298>
 a92:	20 e1       	ldi	r18, 0x10	; 16
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x298>
 a98:	20 e1       	ldi	r18, 0x10	; 16
 a9a:	32 e0       	ldi	r19, 0x02	; 2
 a9c:	f8 01       	movw	r30, r16
 a9e:	b7 fe       	sbrs	r11, 7
 aa0:	07 c0       	rjmp	.+14     	; 0xab0 <vfprintf+0x2ac>
 aa2:	60 81       	ld	r22, Z
 aa4:	71 81       	ldd	r23, Z+1	; 0x01
 aa6:	82 81       	ldd	r24, Z+2	; 0x02
 aa8:	93 81       	ldd	r25, Z+3	; 0x03
 aaa:	0c 5f       	subi	r16, 0xFC	; 252
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	06 c0       	rjmp	.+12     	; 0xabc <vfprintf+0x2b8>
 ab0:	60 81       	ld	r22, Z
 ab2:	71 81       	ldd	r23, Z+1	; 0x01
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 5f       	subi	r16, 0xFE	; 254
 aba:	1f 4f       	sbci	r17, 0xFF	; 255
 abc:	a3 01       	movw	r20, r6
 abe:	f1 d0       	rcall	.+482    	; 0xca2 <__ultoa_invert>
 ac0:	88 2e       	mov	r8, r24
 ac2:	86 18       	sub	r8, r6
 ac4:	fb 2d       	mov	r31, r11
 ac6:	ff 77       	andi	r31, 0x7F	; 127
 ac8:	3f 2e       	mov	r3, r31
 aca:	36 fe       	sbrs	r3, 6
 acc:	0d c0       	rjmp	.+26     	; 0xae8 <vfprintf+0x2e4>
 ace:	23 2d       	mov	r18, r3
 ad0:	2e 7f       	andi	r18, 0xFE	; 254
 ad2:	a2 2e       	mov	r10, r18
 ad4:	89 14       	cp	r8, r9
 ad6:	58 f4       	brcc	.+22     	; 0xaee <vfprintf+0x2ea>
 ad8:	34 fe       	sbrs	r3, 4
 ada:	0b c0       	rjmp	.+22     	; 0xaf2 <vfprintf+0x2ee>
 adc:	32 fc       	sbrc	r3, 2
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <vfprintf+0x2ee>
 ae0:	83 2d       	mov	r24, r3
 ae2:	8e 7e       	andi	r24, 0xEE	; 238
 ae4:	a8 2e       	mov	r10, r24
 ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <vfprintf+0x2ee>
 ae8:	b8 2c       	mov	r11, r8
 aea:	a3 2c       	mov	r10, r3
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <vfprintf+0x2f0>
 aee:	b8 2c       	mov	r11, r8
 af0:	01 c0       	rjmp	.+2      	; 0xaf4 <vfprintf+0x2f0>
 af2:	b9 2c       	mov	r11, r9
 af4:	a4 fe       	sbrs	r10, 4
 af6:	0f c0       	rjmp	.+30     	; 0xb16 <vfprintf+0x312>
 af8:	fe 01       	movw	r30, r28
 afa:	e8 0d       	add	r30, r8
 afc:	f1 1d       	adc	r31, r1
 afe:	80 81       	ld	r24, Z
 b00:	80 33       	cpi	r24, 0x30	; 48
 b02:	21 f4       	brne	.+8      	; 0xb0c <vfprintf+0x308>
 b04:	9a 2d       	mov	r25, r10
 b06:	99 7e       	andi	r25, 0xE9	; 233
 b08:	a9 2e       	mov	r10, r25
 b0a:	09 c0       	rjmp	.+18     	; 0xb1e <vfprintf+0x31a>
 b0c:	a2 fe       	sbrs	r10, 2
 b0e:	06 c0       	rjmp	.+12     	; 0xb1c <vfprintf+0x318>
 b10:	b3 94       	inc	r11
 b12:	b3 94       	inc	r11
 b14:	04 c0       	rjmp	.+8      	; 0xb1e <vfprintf+0x31a>
 b16:	8a 2d       	mov	r24, r10
 b18:	86 78       	andi	r24, 0x86	; 134
 b1a:	09 f0       	breq	.+2      	; 0xb1e <vfprintf+0x31a>
 b1c:	b3 94       	inc	r11
 b1e:	a3 fc       	sbrc	r10, 3
 b20:	10 c0       	rjmp	.+32     	; 0xb42 <vfprintf+0x33e>
 b22:	a0 fe       	sbrs	r10, 0
 b24:	06 c0       	rjmp	.+12     	; 0xb32 <vfprintf+0x32e>
 b26:	b2 14       	cp	r11, r2
 b28:	80 f4       	brcc	.+32     	; 0xb4a <vfprintf+0x346>
 b2a:	28 0c       	add	r2, r8
 b2c:	92 2c       	mov	r9, r2
 b2e:	9b 18       	sub	r9, r11
 b30:	0d c0       	rjmp	.+26     	; 0xb4c <vfprintf+0x348>
 b32:	b2 14       	cp	r11, r2
 b34:	58 f4       	brcc	.+22     	; 0xb4c <vfprintf+0x348>
 b36:	b6 01       	movw	r22, r12
 b38:	80 e2       	ldi	r24, 0x20	; 32
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	76 d0       	rcall	.+236    	; 0xc2a <fputc>
 b3e:	b3 94       	inc	r11
 b40:	f8 cf       	rjmp	.-16     	; 0xb32 <vfprintf+0x32e>
 b42:	b2 14       	cp	r11, r2
 b44:	18 f4       	brcc	.+6      	; 0xb4c <vfprintf+0x348>
 b46:	2b 18       	sub	r2, r11
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <vfprintf+0x34a>
 b4a:	98 2c       	mov	r9, r8
 b4c:	21 2c       	mov	r2, r1
 b4e:	a4 fe       	sbrs	r10, 4
 b50:	0f c0       	rjmp	.+30     	; 0xb70 <vfprintf+0x36c>
 b52:	b6 01       	movw	r22, r12
 b54:	80 e3       	ldi	r24, 0x30	; 48
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	68 d0       	rcall	.+208    	; 0xc2a <fputc>
 b5a:	a2 fe       	sbrs	r10, 2
 b5c:	16 c0       	rjmp	.+44     	; 0xb8a <vfprintf+0x386>
 b5e:	a1 fc       	sbrc	r10, 1
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <vfprintf+0x364>
 b62:	88 e7       	ldi	r24, 0x78	; 120
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <vfprintf+0x368>
 b68:	88 e5       	ldi	r24, 0x58	; 88
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	b6 01       	movw	r22, r12
 b6e:	0c c0       	rjmp	.+24     	; 0xb88 <vfprintf+0x384>
 b70:	8a 2d       	mov	r24, r10
 b72:	86 78       	andi	r24, 0x86	; 134
 b74:	51 f0       	breq	.+20     	; 0xb8a <vfprintf+0x386>
 b76:	a1 fe       	sbrs	r10, 1
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x37a>
 b7a:	8b e2       	ldi	r24, 0x2B	; 43
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <vfprintf+0x37c>
 b7e:	80 e2       	ldi	r24, 0x20	; 32
 b80:	a7 fc       	sbrc	r10, 7
 b82:	8d e2       	ldi	r24, 0x2D	; 45
 b84:	b6 01       	movw	r22, r12
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	50 d0       	rcall	.+160    	; 0xc2a <fputc>
 b8a:	89 14       	cp	r8, r9
 b8c:	30 f4       	brcc	.+12     	; 0xb9a <vfprintf+0x396>
 b8e:	b6 01       	movw	r22, r12
 b90:	80 e3       	ldi	r24, 0x30	; 48
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	4a d0       	rcall	.+148    	; 0xc2a <fputc>
 b96:	9a 94       	dec	r9
 b98:	f8 cf       	rjmp	.-16     	; 0xb8a <vfprintf+0x386>
 b9a:	8a 94       	dec	r8
 b9c:	f3 01       	movw	r30, r6
 b9e:	e8 0d       	add	r30, r8
 ba0:	f1 1d       	adc	r31, r1
 ba2:	80 81       	ld	r24, Z
 ba4:	b6 01       	movw	r22, r12
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	40 d0       	rcall	.+128    	; 0xc2a <fputc>
 baa:	81 10       	cpse	r8, r1
 bac:	f6 cf       	rjmp	.-20     	; 0xb9a <vfprintf+0x396>
 bae:	22 20       	and	r2, r2
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <vfprintf+0x3b0>
 bb2:	4e ce       	rjmp	.-868    	; 0x850 <vfprintf+0x4c>
 bb4:	b6 01       	movw	r22, r12
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	37 d0       	rcall	.+110    	; 0xc2a <fputc>
 bbc:	2a 94       	dec	r2
 bbe:	f7 cf       	rjmp	.-18     	; 0xbae <vfprintf+0x3aa>
 bc0:	f6 01       	movw	r30, r12
 bc2:	86 81       	ldd	r24, Z+6	; 0x06
 bc4:	97 81       	ldd	r25, Z+7	; 0x07
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <vfprintf+0x3c8>
 bc8:	8f ef       	ldi	r24, 0xFF	; 255
 bca:	9f ef       	ldi	r25, 0xFF	; 255
 bcc:	2b 96       	adiw	r28, 0x0b	; 11
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	1f 91       	pop	r17
 bde:	0f 91       	pop	r16
 be0:	ff 90       	pop	r15
 be2:	ef 90       	pop	r14
 be4:	df 90       	pop	r13
 be6:	cf 90       	pop	r12
 be8:	bf 90       	pop	r11
 bea:	af 90       	pop	r10
 bec:	9f 90       	pop	r9
 bee:	8f 90       	pop	r8
 bf0:	7f 90       	pop	r7
 bf2:	6f 90       	pop	r6
 bf4:	5f 90       	pop	r5
 bf6:	4f 90       	pop	r4
 bf8:	3f 90       	pop	r3
 bfa:	2f 90       	pop	r2
 bfc:	08 95       	ret

00000bfe <strnlen_P>:
 bfe:	fc 01       	movw	r30, r24
 c00:	05 90       	lpm	r0, Z+
 c02:	61 50       	subi	r22, 0x01	; 1
 c04:	70 40       	sbci	r23, 0x00	; 0
 c06:	01 10       	cpse	r0, r1
 c08:	d8 f7       	brcc	.-10     	; 0xc00 <strnlen_P+0x2>
 c0a:	80 95       	com	r24
 c0c:	90 95       	com	r25
 c0e:	8e 0f       	add	r24, r30
 c10:	9f 1f       	adc	r25, r31
 c12:	08 95       	ret

00000c14 <strnlen>:
 c14:	fc 01       	movw	r30, r24
 c16:	61 50       	subi	r22, 0x01	; 1
 c18:	70 40       	sbci	r23, 0x00	; 0
 c1a:	01 90       	ld	r0, Z+
 c1c:	01 10       	cpse	r0, r1
 c1e:	d8 f7       	brcc	.-10     	; 0xc16 <strnlen+0x2>
 c20:	80 95       	com	r24
 c22:	90 95       	com	r25
 c24:	8e 0f       	add	r24, r30
 c26:	9f 1f       	adc	r25, r31
 c28:	08 95       	ret

00000c2a <fputc>:
 c2a:	0f 93       	push	r16
 c2c:	1f 93       	push	r17
 c2e:	cf 93       	push	r28
 c30:	df 93       	push	r29
 c32:	fb 01       	movw	r30, r22
 c34:	23 81       	ldd	r18, Z+3	; 0x03
 c36:	21 fd       	sbrc	r18, 1
 c38:	03 c0       	rjmp	.+6      	; 0xc40 <fputc+0x16>
 c3a:	8f ef       	ldi	r24, 0xFF	; 255
 c3c:	9f ef       	ldi	r25, 0xFF	; 255
 c3e:	2c c0       	rjmp	.+88     	; 0xc98 <fputc+0x6e>
 c40:	22 ff       	sbrs	r18, 2
 c42:	16 c0       	rjmp	.+44     	; 0xc70 <fputc+0x46>
 c44:	46 81       	ldd	r20, Z+6	; 0x06
 c46:	57 81       	ldd	r21, Z+7	; 0x07
 c48:	24 81       	ldd	r18, Z+4	; 0x04
 c4a:	35 81       	ldd	r19, Z+5	; 0x05
 c4c:	42 17       	cp	r20, r18
 c4e:	53 07       	cpc	r21, r19
 c50:	44 f4       	brge	.+16     	; 0xc62 <fputc+0x38>
 c52:	a0 81       	ld	r26, Z
 c54:	b1 81       	ldd	r27, Z+1	; 0x01
 c56:	9d 01       	movw	r18, r26
 c58:	2f 5f       	subi	r18, 0xFF	; 255
 c5a:	3f 4f       	sbci	r19, 0xFF	; 255
 c5c:	31 83       	std	Z+1, r19	; 0x01
 c5e:	20 83       	st	Z, r18
 c60:	8c 93       	st	X, r24
 c62:	26 81       	ldd	r18, Z+6	; 0x06
 c64:	37 81       	ldd	r19, Z+7	; 0x07
 c66:	2f 5f       	subi	r18, 0xFF	; 255
 c68:	3f 4f       	sbci	r19, 0xFF	; 255
 c6a:	37 83       	std	Z+7, r19	; 0x07
 c6c:	26 83       	std	Z+6, r18	; 0x06
 c6e:	14 c0       	rjmp	.+40     	; 0xc98 <fputc+0x6e>
 c70:	8b 01       	movw	r16, r22
 c72:	ec 01       	movw	r28, r24
 c74:	fb 01       	movw	r30, r22
 c76:	00 84       	ldd	r0, Z+8	; 0x08
 c78:	f1 85       	ldd	r31, Z+9	; 0x09
 c7a:	e0 2d       	mov	r30, r0
 c7c:	09 95       	icall
 c7e:	89 2b       	or	r24, r25
 c80:	e1 f6       	brne	.-72     	; 0xc3a <fputc+0x10>
 c82:	d8 01       	movw	r26, r16
 c84:	16 96       	adiw	r26, 0x06	; 6
 c86:	8d 91       	ld	r24, X+
 c88:	9c 91       	ld	r25, X
 c8a:	17 97       	sbiw	r26, 0x07	; 7
 c8c:	01 96       	adiw	r24, 0x01	; 1
 c8e:	17 96       	adiw	r26, 0x07	; 7
 c90:	9c 93       	st	X, r25
 c92:	8e 93       	st	-X, r24
 c94:	16 97       	sbiw	r26, 0x06	; 6
 c96:	ce 01       	movw	r24, r28
 c98:	df 91       	pop	r29
 c9a:	cf 91       	pop	r28
 c9c:	1f 91       	pop	r17
 c9e:	0f 91       	pop	r16
 ca0:	08 95       	ret

00000ca2 <__ultoa_invert>:
 ca2:	fa 01       	movw	r30, r20
 ca4:	aa 27       	eor	r26, r26
 ca6:	28 30       	cpi	r18, 0x08	; 8
 ca8:	51 f1       	breq	.+84     	; 0xcfe <__ultoa_invert+0x5c>
 caa:	20 31       	cpi	r18, 0x10	; 16
 cac:	81 f1       	breq	.+96     	; 0xd0e <__ultoa_invert+0x6c>
 cae:	e8 94       	clt
 cb0:	6f 93       	push	r22
 cb2:	6e 7f       	andi	r22, 0xFE	; 254
 cb4:	6e 5f       	subi	r22, 0xFE	; 254
 cb6:	7f 4f       	sbci	r23, 0xFF	; 255
 cb8:	8f 4f       	sbci	r24, 0xFF	; 255
 cba:	9f 4f       	sbci	r25, 0xFF	; 255
 cbc:	af 4f       	sbci	r26, 0xFF	; 255
 cbe:	b1 e0       	ldi	r27, 0x01	; 1
 cc0:	3e d0       	rcall	.+124    	; 0xd3e <__ultoa_invert+0x9c>
 cc2:	b4 e0       	ldi	r27, 0x04	; 4
 cc4:	3c d0       	rcall	.+120    	; 0xd3e <__ultoa_invert+0x9c>
 cc6:	67 0f       	add	r22, r23
 cc8:	78 1f       	adc	r23, r24
 cca:	89 1f       	adc	r24, r25
 ccc:	9a 1f       	adc	r25, r26
 cce:	a1 1d       	adc	r26, r1
 cd0:	68 0f       	add	r22, r24
 cd2:	79 1f       	adc	r23, r25
 cd4:	8a 1f       	adc	r24, r26
 cd6:	91 1d       	adc	r25, r1
 cd8:	a1 1d       	adc	r26, r1
 cda:	6a 0f       	add	r22, r26
 cdc:	71 1d       	adc	r23, r1
 cde:	81 1d       	adc	r24, r1
 ce0:	91 1d       	adc	r25, r1
 ce2:	a1 1d       	adc	r26, r1
 ce4:	20 d0       	rcall	.+64     	; 0xd26 <__ultoa_invert+0x84>
 ce6:	09 f4       	brne	.+2      	; 0xcea <__ultoa_invert+0x48>
 ce8:	68 94       	set
 cea:	3f 91       	pop	r19
 cec:	2a e0       	ldi	r18, 0x0A	; 10
 cee:	26 9f       	mul	r18, r22
 cf0:	11 24       	eor	r1, r1
 cf2:	30 19       	sub	r19, r0
 cf4:	30 5d       	subi	r19, 0xD0	; 208
 cf6:	31 93       	st	Z+, r19
 cf8:	de f6       	brtc	.-74     	; 0xcb0 <__ultoa_invert+0xe>
 cfa:	cf 01       	movw	r24, r30
 cfc:	08 95       	ret
 cfe:	46 2f       	mov	r20, r22
 d00:	47 70       	andi	r20, 0x07	; 7
 d02:	40 5d       	subi	r20, 0xD0	; 208
 d04:	41 93       	st	Z+, r20
 d06:	b3 e0       	ldi	r27, 0x03	; 3
 d08:	0f d0       	rcall	.+30     	; 0xd28 <__ultoa_invert+0x86>
 d0a:	c9 f7       	brne	.-14     	; 0xcfe <__ultoa_invert+0x5c>
 d0c:	f6 cf       	rjmp	.-20     	; 0xcfa <__ultoa_invert+0x58>
 d0e:	46 2f       	mov	r20, r22
 d10:	4f 70       	andi	r20, 0x0F	; 15
 d12:	40 5d       	subi	r20, 0xD0	; 208
 d14:	4a 33       	cpi	r20, 0x3A	; 58
 d16:	18 f0       	brcs	.+6      	; 0xd1e <__ultoa_invert+0x7c>
 d18:	49 5d       	subi	r20, 0xD9	; 217
 d1a:	31 fd       	sbrc	r19, 1
 d1c:	40 52       	subi	r20, 0x20	; 32
 d1e:	41 93       	st	Z+, r20
 d20:	02 d0       	rcall	.+4      	; 0xd26 <__ultoa_invert+0x84>
 d22:	a9 f7       	brne	.-22     	; 0xd0e <__ultoa_invert+0x6c>
 d24:	ea cf       	rjmp	.-44     	; 0xcfa <__ultoa_invert+0x58>
 d26:	b4 e0       	ldi	r27, 0x04	; 4
 d28:	a6 95       	lsr	r26
 d2a:	97 95       	ror	r25
 d2c:	87 95       	ror	r24
 d2e:	77 95       	ror	r23
 d30:	67 95       	ror	r22
 d32:	ba 95       	dec	r27
 d34:	c9 f7       	brne	.-14     	; 0xd28 <__ultoa_invert+0x86>
 d36:	00 97       	sbiw	r24, 0x00	; 0
 d38:	61 05       	cpc	r22, r1
 d3a:	71 05       	cpc	r23, r1
 d3c:	08 95       	ret
 d3e:	9b 01       	movw	r18, r22
 d40:	ac 01       	movw	r20, r24
 d42:	0a 2e       	mov	r0, r26
 d44:	06 94       	lsr	r0
 d46:	57 95       	ror	r21
 d48:	47 95       	ror	r20
 d4a:	37 95       	ror	r19
 d4c:	27 95       	ror	r18
 d4e:	ba 95       	dec	r27
 d50:	c9 f7       	brne	.-14     	; 0xd44 <__ultoa_invert+0xa2>
 d52:	62 0f       	add	r22, r18
 d54:	73 1f       	adc	r23, r19
 d56:	84 1f       	adc	r24, r20
 d58:	95 1f       	adc	r25, r21
 d5a:	a0 1d       	adc	r26, r0
 d5c:	08 95       	ret

00000d5e <_exit>:
 d5e:	f8 94       	cli

00000d60 <__stop_program>:
 d60:	ff cf       	rjmp	.-2      	; 0xd60 <__stop_program>
