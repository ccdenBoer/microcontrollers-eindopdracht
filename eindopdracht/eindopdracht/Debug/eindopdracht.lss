
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000fa8  0000103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800120  00800120  0000105c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d2  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb2  00000000  00000000  00002a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc9  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  000043ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000707  00000000  00000000  000046ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb9  00000000  00000000  00004df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000059ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	00 00       	nop
   4:	6f c1       	rjmp	.+734    	; 0x2e4 <__vector_1>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	12 c1       	rjmp	.+548    	; 0x256 <__vector_12>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	49 02       	muls	r20, r25
  8e:	85 02       	muls	r24, r21
  90:	4c 02       	muls	r20, r28
  92:	4f 02       	muls	r20, r31
  94:	52 02       	muls	r21, r18
  96:	55 02       	muls	r21, r21
  98:	58 02       	muls	r21, r24
  9a:	5b 02       	muls	r21, r27
  9c:	5e 02       	muls	r21, r30
  9e:	61 02       	muls	r22, r17
  a0:	82 02       	muls	r24, r18
  a2:	64 02       	muls	r22, r20
  a4:	82 02       	muls	r24, r18
  a6:	67 02       	muls	r22, r23
  a8:	6a 02       	muls	r22, r26
  aa:	6d 02       	muls	r22, r29
  ac:	70 02       	muls	r23, r16
  ae:	73 02       	muls	r23, r19
  b0:	76 02       	muls	r23, r22
  b2:	79 02       	muls	r23, r25
  b4:	7c 02       	muls	r23, r28
  b6:	82 02       	muls	r24, r18
  b8:	82 02       	muls	r24, r18
  ba:	82 02       	muls	r24, r18
  bc:	7f 02       	muls	r23, r31

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d0 e1       	ldi	r29, 0x10	; 16
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e8 ea       	ldi	r30, 0xA8	; 168
  d2:	ff e0       	ldi	r31, 0x0F	; 15
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
  da:	07 90       	elpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 32       	cpi	r26, 0x20	; 32
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a0 e2       	ldi	r26, 0x20	; 32
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a8 32       	cpi	r26, 0x28	; 40
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0d d1       	rcall	.+538    	; 0x310 <main>
  f6:	56 c7       	rjmp	.+3756   	; 0xfa4 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <adc_init>:
#include <avr/io.h>
#include "adc.h"


void adc_init(){
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  fe:	86 ee       	ldi	r24, 0xE6	; 230
 100:	86 b9       	out	0x06, r24	; 6
 102:	08 95       	ret

00000104 <writeInitCommand_strobe_e>:
#include <stdio.h>
#include "lcd.h"

void writeInitCommand_strobe_e(unsigned char byte)
{
	byte &= 0xF0;
 104:	80 7f       	andi	r24, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
 106:	88 60       	ori	r24, 0x08	; 8
 108:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	97 e0       	ldi	r25, 0x07	; 7
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <writeInitCommand_strobe_e+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <writeInitCommand_strobe_e+0x10>
 114:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 116:	85 b3       	in	r24, 0x15	; 21
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <writeInitCommand_strobe_e+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <writeInitCommand_strobe_e+0x22>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <write2NibbleCommand_strobe_e>:
void write2NibbleCommand_strobe_e(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte &= 0xF0;
 12a:	98 2f       	mov	r25, r24
 12c:	90 7f       	andi	r25, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
 12e:	98 60       	ori	r25, 0x08	; 8
 130:	95 bb       	out	0x15, r25	; 21
 132:	ef ec       	ldi	r30, 0xCF	; 207
 134:	f7 e0       	ldi	r31, 0x07	; 7
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <write2NibbleCommand_strobe_e+0xc>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <write2NibbleCommand_strobe_e+0x12>
 13c:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 13e:	95 b3       	in	r25, 0x15	; 21
 140:	97 7f       	andi	r25, 0xF7	; 247
 142:	95 bb       	out	0x15, r25	; 21
 144:	ef ec       	ldi	r30, 0xCF	; 207
 146:	f7 e0       	ldi	r31, 0x07	; 7
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <write2NibbleCommand_strobe_e+0x1e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <write2NibbleCommand_strobe_e+0x24>
 14e:	00 00       	nop
	_delay_ms(1);				// nodig?
	
	// Second nibble
	byte = (tmpByte<<4);
 150:	82 95       	swap	r24
 152:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	PORTC = byte | (1<<LCD_E);	// E high
 154:	88 60       	ori	r24, 0x08	; 8
 156:	85 bb       	out	0x15, r24	; 21
 158:	8f ec       	ldi	r24, 0xCF	; 207
 15a:	97 e0       	ldi	r25, 0x07	; 7
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <write2NibbleCommand_strobe_e+0x32>
 160:	00 c0       	rjmp	.+0      	; 0x162 <write2NibbleCommand_strobe_e+0x38>
 162:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 164:	85 b3       	in	r24, 0x15	; 21
 166:	87 7f       	andi	r24, 0xF7	; 247
 168:	85 bb       	out	0x15, r24	; 21
 16a:	ef ec       	ldi	r30, 0xCF	; 207
 16c:	f7 e0       	ldi	r31, 0x07	; 7
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <write2NibbleCommand_strobe_e+0x44>
 172:	00 c0       	rjmp	.+0      	; 0x174 <write2NibbleCommand_strobe_e+0x4a>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <write2NibbleData_Strobe_E>:
void write2NibbleData_Strobe_E(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte = byte & 0xF0;
 178:	98 2f       	mov	r25, r24
 17a:	90 7f       	andi	r25, 0xF0	; 240
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
 17c:	9c 60       	ori	r25, 0x0C	; 12
 17e:	95 bb       	out	0x15, r25	; 21
 180:	ef ec       	ldi	r30, 0xCF	; 207
 182:	f7 e0       	ldi	r31, 0x07	; 7
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <write2NibbleData_Strobe_E+0xc>
 188:	00 c0       	rjmp	.+0      	; 0x18a <write2NibbleData_Strobe_E+0x12>
 18a:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 18c:	95 b3       	in	r25, 0x15	; 21
 18e:	97 7f       	andi	r25, 0xF7	; 247
 190:	95 bb       	out	0x15, r25	; 21
 192:	ef ec       	ldi	r30, 0xCF	; 207
 194:	f7 e0       	ldi	r31, 0x07	; 7
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <write2NibbleData_Strobe_E+0x1e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <write2NibbleData_Strobe_E+0x24>
 19c:	00 00       	nop
	_delay_ms(1);				// nodig?

	// Second nibble
	byte = (tmpByte<<4);
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
 1a2:	8c 60       	ori	r24, 0x0C	; 12
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	8f ec       	ldi	r24, 0xCF	; 207
 1a8:	97 e0       	ldi	r25, 0x07	; 7
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <write2NibbleData_Strobe_E+0x32>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <write2NibbleData_Strobe_E+0x38>
 1b0:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	ef ec       	ldi	r30, 0xCF	; 207
 1ba:	f7 e0       	ldi	r31, 0x07	; 7
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <write2NibbleData_Strobe_E+0x44>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <write2NibbleData_Strobe_E+0x4a>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <init_4bits_mode>:

void init_4bits_mode(void)
{
	// Step 2 (table 12)
	// function set
	writeInitCommand_strobe_e(0x20);
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	9d df       	rcall	.-198    	; 0x104 <writeInitCommand_strobe_e>

	// Step 3 (table 12)
	// function set
	write2NibbleCommand_strobe_e(0x28);
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	ae df       	rcall	.-164    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Display on/off control
	write2NibbleCommand_strobe_e(0x0F);
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	ac df       	rcall	.-168    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Entry mode set
	write2NibbleCommand_strobe_e(0x06);
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	aa cf       	rjmp	.-172    	; 0x12a <write2NibbleCommand_strobe_e>
 1d6:	08 95       	ret

000001d8 <lcd_write_string>:
 1d8:	cf 93       	push	r28
}

void lcd_write_string(char *str)
{
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	// of met een for:
	for(;*str; str++){
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcd_write_string+0xc>
		write2NibbleData_Strobe_E(*str);
 1e0:	cb df       	rcall	.-106    	; 0x178 <write2NibbleData_Strobe_E>
}

void lcd_write_string(char *str)
{
	// of met een for:
	for(;*str; str++){
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	88 81       	ld	r24, Y
 1e6:	81 11       	cpse	r24, r1
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <lcd_write_string+0x8>
		write2NibbleData_Strobe_E(*str);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <lcd_write_integer>:

void lcd_write_integer(int data)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	60 97       	sbiw	r28, 0x10	; 16
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
	char data_out[16];
	memset(data_out, 0, sizeof(data_out[0]) * 16);
 208:	8e 01       	movw	r16, r28
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	20 e1       	ldi	r18, 0x10	; 16
 210:	f8 01       	movw	r30, r16
 212:	11 92       	st	Z+, r1
 214:	2a 95       	dec	r18
 216:	e9 f7       	brne	.-6      	; 0x212 <lcd_write_integer+0x22>
	sprintf(data_out, "%u", data);
 218:	9f 93       	push	r25
 21a:	8f 93       	push	r24
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	9f 93       	push	r25
 222:	8f 93       	push	r24
 224:	1f 93       	push	r17
 226:	0f 93       	push	r16
 228:	e2 d3       	rcall	.+1988   	; 0x9ee <sprintf>
	lcd_write_string(data_out);
 22a:	c8 01       	movw	r24, r16
 22c:	d5 df       	rcall	.-86     	; 0x1d8 <lcd_write_string>
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	60 96       	adiw	r28, 0x10	; 16
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <lcd_clear>:

void lcd_clear()
{
	write2NibbleCommand_strobe_e (0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	6b cf       	rjmp	.-298    	; 0x12a <write2NibbleCommand_strobe_e>
 254:	08 95       	ret

00000256 <__vector_12>:
volatile int msCount = 0;
static bool right_direction = true;

static int number = 0;

ISR( TIMER1_COMPA_vect ) {
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	0b b6       	in	r0, 0x3b	; 59
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	//read out the 10 bit value
	number = ADCH << 2;
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
	number |= ADCL >> 6;
 288:	24 b1       	in	r18, 0x04	; 4
 28a:	22 95       	swap	r18
 28c:	26 95       	lsr	r18
 28e:	26 95       	lsr	r18
 290:	23 70       	andi	r18, 0x03	; 3
 292:	82 2b       	or	r24, r18
	
	//10.240 + 54 * 1024(max 10 bit value) = 65536(max value of an 16 bit integer)
	timer_set_compare_value(64*number);
 294:	00 24       	eor	r0, r0
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	07 94       	ror	r0
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	07 94       	ror	r0
 2a2:	98 2f       	mov	r25, r24
 2a4:	80 2d       	mov	r24, r0
 2a6:	f0 d1       	rcall	.+992    	; 0x688 <timer_set_compare_value>
	
	//move the text on the 7-seg display
	if(right_direction){
 2a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <right_direction>
 2ac:	88 23       	and	r24, r24
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <__vector_12+0x62>
		spi_moveText(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	76 d1       	rcall	.+748    	; 0x5a2 <spi_moveText>
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <__vector_12+0x68>
	} else {
		spi_moveText(-1);
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	72 d1       	rcall	.+740    	; 0x5a2 <spi_moveText>
	}
	
	
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0b be       	out	0x3b, r0	; 59
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_1>:

//react to button pres to change the direction the 7-seg display scrolls
ISR( INT0_vect ) {
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
    if(right_direction){
 2f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <right_direction>
 2f4:	88 23       	and	r24, r24
 2f6:	19 f0       	breq	.+6      	; 0x2fe <__vector_1+0x1a>
		right_direction = false;
 2f8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <right_direction>
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <__vector_1+0x20>
	} else {
		right_direction = true;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <right_direction>
	}
}
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <main>:

int main(void)
{
	//lcd
	DDRC = 0xFF;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 314:	15 ba       	out	0x15, r1	; 21
	
	init_4bits_mode();
 316:	57 df       	rcall	.-338    	; 0x1c6 <init_4bits_mode>
	lcd_clear();
 318:	9b df       	rcall	.-202    	; 0x250 <lcd_clear>
 31a:	81 e0       	ldi	r24, 0x01	; 1
	
	//spi
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 31c:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 31e:	6c d0       	rcall	.+216    	; 0x3f8 <spi_masterInit>
 320:	a0 d0       	rcall	.+320    	; 0x462 <spi_displayDriverInit>
	spi_displayDriverInit();            // Initialize display chip
 322:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 324:	09 c0       	rjmp	.+18     	; 0x338 <main+0x28>
	{
		spi_slaveSelect(0); 		// Select display chip
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	76 d0       	rcall	.+236    	; 0x416 <spi_slaveSelect>
		spi_write(i);  				// 	digit adress: (digit place)
 32a:	8c 2f       	mov	r24, r28
 32c:	70 d0       	rcall	.+224    	; 0x40e <spi_write>
		spi_write(0);				// 	digit value: 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	6e d0       	rcall	.+220    	; 0x40e <spi_write>
 332:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0);		// Deselect display chip
 334:	7c d0       	rcall	.+248    	; 0x42e <spi_slaveDeSelect>
 336:	cf 5f       	subi	r28, 0xFF	; 255
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	spi_displayDriverInit();            // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 338:	c5 30       	cpi	r28, 0x05	; 5
 33a:	a8 f3       	brcs	.-22     	; 0x326 <main+0x16>
 33c:	89 e1       	ldi	r24, 0x19	; 25
		spi_write(i);  				// 	digit adress: (digit place)
		spi_write(0);				// 	digit value: 0
		spi_slaveDeSelect(0);		// Deselect display chip
	}
	
	char *text = (char *) malloc(sizeof(char) * 25);
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	2d d2       	rcall	.+1114   	; 0x79c <malloc>
 342:	ec 01       	movw	r28, r24
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	ea e0       	ldi	r30, 0x0A	; 10
	snprintf(text, 25, "langere text");
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	de 01       	movw	r26, r28
 34c:	01 90       	ld	r0, Z+
 34e:	0d 92       	st	X+, r0
 350:	8a 95       	dec	r24
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x3c>
	spi_setText(text);
 354:	ce 01       	movw	r24, r28
 356:	1f d1       	rcall	.+574    	; 0x596 <spi_setText>
		
	//adc initialization
	DDRF = 0x00;				// set PORTF for input (ADC)
 358:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;				// set PORTA for output
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	8a bb       	out	0x1a, r24	; 26
	adc_init();
 360:	cc de       	rcall	.-616    	; 0xfa <adc_init>
 362:	85 b1       	in	r24, 0x05	; 5
	
	//read the 10 bits from the adc into number
	number = ADCH << 2;
 364:	84 b1       	in	r24, 0x04	; 4
	number |= ADCL >> 6;
 366:	85 d1       	rcall	.+778    	; 0x672 <timer_init>

	//timer initialization
	timer_init();
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	90 e0       	ldi	r25, 0x00	; 0
	number = ADCH << 2;
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	24 b1       	in	r18, 0x04	; 4
 376:	22 95       	swap	r18
	number |= ADCL >> 6;
 378:	26 95       	lsr	r18
 37a:	26 95       	lsr	r18
 37c:	23 70       	andi	r18, 0x03	; 3
 37e:	82 2b       	or	r24, r18
 380:	9c 01       	movw	r18, r24
	timer_set_compare_value(6*number);
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	7c d1       	rcall	.+760    	; 0x688 <timer_set_compare_value>
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	82 b9       	out	0x02, r24	; 2
	
	//interupt initialization
	DDRE = 0x01;			// PORTE 0 input	
 394:	ea e6       	ldi	r30, 0x6A	; 106

	// Init Interrupt hardware
	EICRA |= 0x03;			// INT0 rising edge
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	83 60       	ori	r24, 0x03	; 3
	EIMSK |= 0x01;			// Enable INT0
 39c:	80 83       	st	Z, r24
 39e:	89 b7       	in	r24, 0x39	; 57
	
	//enable global interupts
	sei();
 3a0:	81 60       	ori	r24, 0x01	; 1
	
    while (1) 
    {

		PORTA = ADCH;
 3a2:	89 bf       	out	0x39, r24	; 57
		
		//write the full string and speed to the lcd, "<text> - <speed> hz"
		lcd_clear();
 3a4:	78 94       	sei
		lcd_write_string(text);
 3a6:	85 b1       	in	r24, 0x05	; 5
 3a8:	8b bb       	out	0x1b, r24	; 27
		wait(3);
 3aa:	52 df       	rcall	.-348    	; 0x250 <lcd_clear>
 3ac:	ce 01       	movw	r24, r28
 3ae:	14 df       	rcall	.-472    	; 0x1d8 <lcd_write_string>
		lcd_write_string(" - ");
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	12 d0       	rcall	.+36     	; 0x3da <wait>
		wait(3);
 3b6:	87 e1       	ldi	r24, 0x17	; 23
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e df       	rcall	.-484    	; 0x1d8 <lcd_write_string>
 3bc:	83 e0       	ldi	r24, 0x03	; 3
		lcd_write_integer(timer_get_hz());
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0c d0       	rcall	.+24     	; 0x3da <wait>
 3c2:	73 d1       	rcall	.+742    	; 0x6aa <timer_get_hz>
 3c4:	15 df       	rcall	.-470    	; 0x1f0 <lcd_write_integer>
		wait(3);
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	07 d0       	rcall	.+14     	; 0x3da <wait>
 3cc:	8b e1       	ldi	r24, 0x1B	; 27
		lcd_write_string(" Hz");
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	03 df       	rcall	.-506    	; 0x1d8 <lcd_write_string>
 3d2:	88 ee       	ldi	r24, 0xE8	; 232
 3d4:	93 e0       	ldi	r25, 0x03	; 3
		
		wait(1000);
 3d6:	01 d0       	rcall	.+2      	; 0x3da <wait>
 3d8:	e6 cf       	rjmp	.-52     	; 0x3a6 <main+0x96>

000003da <wait>:
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <wait+0x16>
void spi_displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
 3e0:	ef ec       	ldi	r30, 0xCF	; 207
 3e2:	f7 e0       	ldi	r31, 0x07	; 7
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <wait+0xa>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <wait+0x10>
 3ea:	00 00       	nop
 3ec:	2f 5f       	subi	r18, 0xFF	; 255
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	28 17       	cp	r18, r24
 3f2:	39 07       	cpc	r19, r25
 3f4:	ac f3       	brlt	.-22     	; 0x3e0 <wait+0x6>
 3f6:	08 95       	ret

000003f8 <spi_masterInit>:
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	87 bb       	out	0x17, r24	; 23
 3fc:	87 b3       	in	r24, 0x17	; 23
 3fe:	87 7f       	andi	r24, 0xF7	; 247
 400:	87 bb       	out	0x17, r24	; 23
 402:	88 b3       	in	r24, 0x18	; 24
 404:	81 60       	ori	r24, 0x01	; 1
 406:	88 bb       	out	0x18, r24	; 24
 408:	82 e5       	ldi	r24, 0x52	; 82
 40a:	8d b9       	out	0x0d, r24	; 13
 40c:	08 95       	ret

0000040e <spi_write>:
 40e:	8f b9       	out	0x0f, r24	; 15
 410:	77 9b       	sbis	0x0e, 7	; 14
 412:	fe cf       	rjmp	.-4      	; 0x410 <spi_write+0x2>
 414:	08 95       	ret

00000416 <spi_slaveSelect>:
 416:	98 b3       	in	r25, 0x18	; 24
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <spi_slaveSelect+0xc>
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	8a 95       	dec	r24
 424:	e2 f7       	brpl	.-8      	; 0x41e <spi_slaveSelect+0x8>
 426:	20 95       	com	r18
 428:	29 23       	and	r18, r25
 42a:	28 bb       	out	0x18, r18	; 24
 42c:	08 95       	ret

0000042e <spi_slaveDeSelect>:
 42e:	98 b3       	in	r25, 0x18	; 24
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <spi_slaveDeSelect+0xc>
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <spi_slaveDeSelect+0x8>
 43e:	29 2b       	or	r18, r25
 440:	28 bb       	out	0x18, r18	; 24
 442:	08 95       	ret

00000444 <spi_writeWord>:
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	d8 2f       	mov	r29, r24
 44a:	c6 2f       	mov	r28, r22
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	e3 df       	rcall	.-58     	; 0x416 <spi_slaveSelect>
 450:	8d 2f       	mov	r24, r29
 452:	dd df       	rcall	.-70     	; 0x40e <spi_write>
 454:	8c 2f       	mov	r24, r28
 456:	db df       	rcall	.-74     	; 0x40e <spi_write>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	e9 df       	rcall	.-46     	; 0x42e <spi_slaveDeSelect>
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <spi_displayDriverInit>:
 462:	6f ef       	ldi	r22, 0xFF	; 255
 464:	89 e0       	ldi	r24, 0x09	; 9
 466:	ee df       	rcall	.-36     	; 0x444 <spi_writeWord>
 468:	64 e0       	ldi	r22, 0x04	; 4
 46a:	8a e0       	ldi	r24, 0x0A	; 10
 46c:	eb df       	rcall	.-42     	; 0x444 <spi_writeWord>
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	8b e0       	ldi	r24, 0x0B	; 11
 472:	e8 df       	rcall	.-48     	; 0x444 <spi_writeWord>
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	e5 cf       	rjmp	.-54     	; 0x444 <spi_writeWord>
 47a:	08 95       	ret

0000047c <spi_getCharacterCode>:
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
	spi_writeText(newText);
}

int spi_getCharacterCode(char character) {
	switch (toupper(character)) {
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	af d2       	rcall	.+1374   	; 0x9de <toupper>
 480:	81 54       	subi	r24, 0x41	; 65
 482:	91 09       	sbc	r25, r1
 484:	89 31       	cpi	r24, 0x19	; 25
 486:	91 05       	cpc	r25, r1
 488:	e8 f5       	brcc	.+122    	; 0x504 <spi_getCharacterCode+0x88>
 48a:	8a 5b       	subi	r24, 0xBA	; 186
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	fc 01       	movw	r30, r24
 490:	46 c1       	rjmp	.+652    	; 0x71e <__tablejump2__>
		case 'A':
			return 0x77;
 492:	87 e7       	ldi	r24, 0x77	; 119
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 95       	ret
		case 'B':
			return 0x1F;
		case 'C':
			return 0x4E;
 498:	8e e4       	ldi	r24, 0x4E	; 78
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	08 95       	ret
		case 'D':
			return 0x3D;
 49e:	8d e3       	ldi	r24, 0x3D	; 61
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	08 95       	ret
		case 'E':
			return 0x4F;
 4a4:	8f e4       	ldi	r24, 0x4F	; 79
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	08 95       	ret
		case 'F':
			return 0x47;
 4aa:	87 e4       	ldi	r24, 0x47	; 71
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	08 95       	ret
		case 'G':
			return 0x5E;
 4b0:	8e e5       	ldi	r24, 0x5E	; 94
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	08 95       	ret
		case 'H':
			return 0x37;
 4b6:	87 e3       	ldi	r24, 0x37	; 55
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	08 95       	ret
		case 'I':
			return 0x06;
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	08 95       	ret
		case 'J':
			return 0x3C;
 4c2:	8c e3       	ldi	r24, 0x3C	; 60
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	08 95       	ret
		case 'L':
			return 0x0E;
 4c8:	8e e0       	ldi	r24, 0x0E	; 14
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	08 95       	ret
		case 'N':
			return 0x15;
 4ce:	85 e1       	ldi	r24, 0x15	; 21
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	08 95       	ret
		case 'O':
			return 0x7E;
 4d4:	8e e7       	ldi	r24, 0x7E	; 126
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	08 95       	ret
		case 'P':
			return 0x67;
 4da:	87 e6       	ldi	r24, 0x67	; 103
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	08 95       	ret
		case 'Q':
			return 0x73;
 4e0:	83 e7       	ldi	r24, 0x73	; 115
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	08 95       	ret
		case 'R':
			return 0x05;
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	08 95       	ret
		case 'S':
			return 0x5B;
 4ec:	8b e5       	ldi	r24, 0x5B	; 91
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	08 95       	ret
		case 'T':
			return 0x0F;
 4f2:	8f e0       	ldi	r24, 0x0F	; 15
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	08 95       	ret
		case 'U':
			return 0x3E;
 4f8:	8e e3       	ldi	r24, 0x3E	; 62
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret
		case 'Y':
			return 0x3B;
 4fe:	8b e3       	ldi	r24, 0x3B	; 59
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	08 95       	ret
		default:
			return 0x00;  // return 0x00 for any other character
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	08 95       	ret
int spi_getCharacterCode(char character) {
	switch (toupper(character)) {
		case 'A':
			return 0x77;
		case 'B':
			return 0x1F;
 50a:	8f e1       	ldi	r24, 0x1F	; 31
 50c:	90 e0       	ldi	r25, 0x00	; 0
		case 'Y':
			return 0x3B;
		default:
			return 0x00;  // return 0x00 for any other character
	}
}
 50e:	08 95       	ret

00000510 <spi_writeCharacter>:
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
}

void spi_writeCharacter(char character, char index) {
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	d8 2f       	mov	r29, r24
 516:	c6 2f       	mov	r28, r22
	spi_writeWord(0x9, 0);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	89 e0       	ldi	r24, 0x09	; 9
 51c:	93 df       	rcall	.-218    	; 0x444 <spi_writeWord>
	spi_writeWord(index, spi_getCharacterCode(character));
 51e:	8d 2f       	mov	r24, r29
 520:	ad df       	rcall	.-166    	; 0x47c <spi_getCharacterCode>
 522:	68 2f       	mov	r22, r24
 524:	8c 2f       	mov	r24, r28
 526:	8e df       	rcall	.-228    	; 0x444 <spi_writeWord>
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <spi_writeText>:
void spi_setText(char *str) {
	text = str;
	spi_writeText(str);
}

void spi_writeText(char *string) {
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	ec 01       	movw	r28, r24
	while(strlen(string) < 4){
 53c:	06 c0       	rjmp	.+12     	; 0x54a <spi_writeText+0x1c>
		strcat(string, " ");
 53e:	ec 0f       	add	r30, r28
 540:	fd 1f       	adc	r31, r29
 542:	80 e2       	ldi	r24, 0x20	; 32
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	91 83       	std	Z+1, r25	; 0x01
 548:	80 83       	st	Z, r24
	text = str;
	spi_writeText(str);
}

void spi_writeText(char *string) {
	while(strlen(string) < 4){
 54a:	fe 01       	movw	r30, r28
 54c:	01 90       	ld	r0, Z+
 54e:	00 20       	and	r0, r0
 550:	e9 f7       	brne	.-6      	; 0x54c <spi_writeText+0x1e>
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	ec 1b       	sub	r30, r28
 556:	fd 0b       	sbc	r31, r29
 558:	e4 30       	cpi	r30, 0x04	; 4
 55a:	f1 05       	cpc	r31, r1
 55c:	80 f3       	brcs	.-32     	; 0x53e <spi_writeText+0x10>
 55e:	00 e0       	ldi	r16, 0x00	; 0
 560:	10 e0       	ldi	r17, 0x00	; 0
 562:	68 94       	set
 564:	ee 24       	eor	r14, r14
 566:	e2 f8       	bld	r14, 2
 568:	f1 2c       	mov	r15, r1
 56a:	0b c0       	rjmp	.+22     	; 0x582 <spi_writeText+0x54>
		strcat(string, " ");
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
		spi_writeCharacter(string[i], j);
 56c:	fe 01       	movw	r30, r28
 56e:	e0 0f       	add	r30, r16
 570:	f1 1f       	adc	r31, r17
 572:	6e 2d       	mov	r22, r14
 574:	80 81       	ld	r24, Z
 576:	cc df       	rcall	.-104    	; 0x510 <spi_writeCharacter>
	while(strlen(string) < 4){
		strcat(string, " ");
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
 578:	0f 5f       	subi	r16, 0xFF	; 255
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	e8 1a       	sub	r14, r24
 580:	f1 08       	sbc	r15, r1
 582:	04 30       	cpi	r16, 0x04	; 4
 584:	11 05       	cpc	r17, r1
 586:	94 f3       	brlt	.-28     	; 0x56c <spi_writeText+0x3e>
		spi_writeCharacter(string[i], j);
	}
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	08 95       	ret

00000596 <spi_setText>:
void spi_writeCharacter(char character, char index) {
	spi_writeWord(0x9, 0);
	spi_writeWord(index, spi_getCharacterCode(character));
}
void spi_setText(char *str) {
	text = str;
 596:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 59a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	spi_writeText(str);
 59e:	c7 cf       	rjmp	.-114    	; 0x52e <spi_writeText>
 5a0:	08 95       	ret

000005a2 <spi_moveText>:
	for (int i = 0; i < 4; i++, j--) {
		spi_writeCharacter(string[i], j);
	}
}

void spi_moveText(int steps) {
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <spi_moveText+0xa>
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <spi_moveText+0xc>
 5ae:	1f 92       	push	r1
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
	int len = strlen(text)+1;
 5b4:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <__data_end>
 5b8:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <__data_end+0x1>
 5bc:	f8 01       	movw	r30, r16
 5be:	01 90       	ld	r0, Z+
 5c0:	00 20       	and	r0, r0
 5c2:	e9 f7       	brne	.-6      	; 0x5be <spi_moveText+0x1c>
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	9f 01       	movw	r18, r30
 5c8:	20 1b       	sub	r18, r16
 5ca:	31 0b       	sbc	r19, r17
 5cc:	2f 5f       	subi	r18, 0xFF	; 255
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	62 2f       	mov	r22, r18
 5d2:	73 2f       	mov	r23, r19
	position+=steps;
 5d4:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <position>
 5d8:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <position+0x1>
 5dc:	48 0f       	add	r20, r24
 5de:	59 1f       	adc	r21, r25
 5e0:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <position+0x1>
 5e4:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <position>
	if(position < 0){
 5e8:	55 23       	and	r21, r21
 5ea:	3c f4       	brge	.+14     	; 0x5fa <spi_moveText+0x58>
		position = len + steps-1;
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <position+0x1>
 5f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <position>
	}
	position%=len;
 5fa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <position>
 5fe:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <position+0x1>
 602:	5e d0       	rcall	.+188    	; 0x6c0 <__divmodhi4>
 604:	fc 01       	movw	r30, r24
 606:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <position+0x1>
 60a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <position>
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
 60e:	21 50       	subi	r18, 0x01	; 1
 610:	31 09       	sbc	r19, r1
 612:	b9 01       	movw	r22, r18
 614:	55 d0       	rcall	.+170    	; 0x6c0 <__divmodhi4>
 616:	d8 01       	movw	r26, r16
 618:	a8 0f       	add	r26, r24
 61a:	b9 1f       	adc	r27, r25
 61c:	8c 91       	ld	r24, X
 61e:	89 83       	std	Y+1, r24	; 0x01
 620:	cf 01       	movw	r24, r30
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	b9 01       	movw	r22, r18
 626:	4c d0       	rcall	.+152    	; 0x6c0 <__divmodhi4>
 628:	d8 01       	movw	r26, r16
 62a:	a8 0f       	add	r26, r24
 62c:	b9 1f       	adc	r27, r25
 62e:	8c 91       	ld	r24, X
 630:	8a 83       	std	Y+2, r24	; 0x02
 632:	cf 01       	movw	r24, r30
 634:	02 96       	adiw	r24, 0x02	; 2
 636:	b9 01       	movw	r22, r18
 638:	43 d0       	rcall	.+134    	; 0x6c0 <__divmodhi4>
 63a:	d8 01       	movw	r26, r16
 63c:	a8 0f       	add	r26, r24
 63e:	b9 1f       	adc	r27, r25
 640:	8c 91       	ld	r24, X
 642:	8b 83       	std	Y+3, r24	; 0x03
 644:	cf 01       	movw	r24, r30
 646:	03 96       	adiw	r24, 0x03	; 3
 648:	b9 01       	movw	r22, r18
 64a:	3a d0       	rcall	.+116    	; 0x6c0 <__divmodhi4>
 64c:	f8 01       	movw	r30, r16
 64e:	e8 0f       	add	r30, r24
 650:	f9 1f       	adc	r31, r25
 652:	80 81       	ld	r24, Z
 654:	8c 83       	std	Y+4, r24	; 0x04
 656:	1d 82       	std	Y+5, r1	; 0x05
	spi_writeText(newText);
 658:	ce 01       	movw	r24, r28
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	68 df       	rcall	.-304    	; 0x52e <spi_writeText>
 65e:	0f 90       	pop	r0
}
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	08 95       	ret

00000672 <timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
 
 //init a timer resulting in 10 Hz
void timer_init(){
	OCR1A = 31250; // 16-bits compare value of counter 1
 672:	82 e1       	ldi	r24, 0x12	; 18
 674:	9a e7       	ldi	r25, 0x7A	; 122
 676:	9b bd       	out	0x2b, r25	; 43
 678:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0b00000000;
 67a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // // Initialize T1: timer, prescaler = 256, compare output disconnected, CTC, RUN
 67c:	8c e0       	ldi	r24, 0x0C	; 12
 67e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<4); // T1 compare match A interrupt enable
 680:	87 b7       	in	r24, 0x37	; 55
 682:	80 61       	ori	r24, 0x10	; 16
 684:	87 bf       	out	0x37, r24	; 55
 686:	08 95       	ret

00000688 <timer_set_compare_value>:
}

//set the compare value, starting at 10240, allowing the timer to be between 30.5 Hz and 4.76 Hz
void timer_set_compare_value(int value){
	//check for overflow
	if(10240 + value > 0xFFFF || 10000 + value < 10000){
 688:	9c 01       	movw	r18, r24
 68a:	20 5f       	subi	r18, 0xF0	; 240
 68c:	38 4d       	sbci	r19, 0xD8	; 216
 68e:	20 31       	cpi	r18, 0x10	; 16
 690:	37 42       	sbci	r19, 0x27	; 39
 692:	2c f4       	brge	.+10     	; 0x69e <timer_set_compare_value+0x16>
		OCR1A = 0xFFFF;
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	9b bd       	out	0x2b, r25	; 43
 69a:	8a bd       	out	0x2a, r24	; 42
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <timer_set_compare_value+0x1c>
	} else{
		OCR1A = (10240+value);
 69e:	98 5d       	subi	r25, 0xD8	; 216
 6a0:	9b bd       	out	0x2b, r25	; 43
 6a2:	8a bd       	out	0x2a, r24	; 42
	}
	
	TCNT1 = 0x00;
 6a4:	1d bc       	out	0x2d, r1	; 45
 6a6:	1c bc       	out	0x2c, r1	; 44
 6a8:	08 95       	ret

000006aa <timer_get_hz>:
	
}

//calculate the hz of the current timer (80 Mhz / 256 prescaler / current compare value)
int timer_get_hz(){
	return 312500/OCR1A;
 6aa:	2a b5       	in	r18, 0x2a	; 42
 6ac:	3b b5       	in	r19, 0x2b	; 43
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	64 eb       	ldi	r22, 0xB4	; 180
 6b4:	74 ec       	ldi	r23, 0xC4	; 196
 6b6:	84 e0       	ldi	r24, 0x04	; 4
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	15 d0       	rcall	.+42     	; 0x6e6 <__divmodsi4>
}
 6bc:	c9 01       	movw	r24, r18
 6be:	08 95       	ret

000006c0 <__divmodhi4>:
 6c0:	97 fb       	bst	r25, 7
 6c2:	07 2e       	mov	r0, r23
 6c4:	16 f4       	brtc	.+4      	; 0x6ca <__divmodhi4+0xa>
 6c6:	00 94       	com	r0
 6c8:	06 d0       	rcall	.+12     	; 0x6d6 <__divmodhi4_neg1>
 6ca:	77 fd       	sbrc	r23, 7
 6cc:	08 d0       	rcall	.+16     	; 0x6de <__divmodhi4_neg2>
 6ce:	30 d0       	rcall	.+96     	; 0x730 <__udivmodhi4>
 6d0:	07 fc       	sbrc	r0, 7
 6d2:	05 d0       	rcall	.+10     	; 0x6de <__divmodhi4_neg2>
 6d4:	3e f4       	brtc	.+14     	; 0x6e4 <__divmodhi4_exit>

000006d6 <__divmodhi4_neg1>:
 6d6:	90 95       	com	r25
 6d8:	81 95       	neg	r24
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__divmodhi4_neg2>:
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255

000006e4 <__divmodhi4_exit>:
 6e4:	08 95       	ret

000006e6 <__divmodsi4>:
 6e6:	05 2e       	mov	r0, r21
 6e8:	97 fb       	bst	r25, 7
 6ea:	16 f4       	brtc	.+4      	; 0x6f0 <__divmodsi4+0xa>
 6ec:	00 94       	com	r0
 6ee:	0f d0       	rcall	.+30     	; 0x70e <__negsi2>
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	05 d0       	rcall	.+10     	; 0x6fe <__divmodsi4_neg2>
 6f4:	31 d0       	rcall	.+98     	; 0x758 <__udivmodsi4>
 6f6:	07 fc       	sbrc	r0, 7
 6f8:	02 d0       	rcall	.+4      	; 0x6fe <__divmodsi4_neg2>
 6fa:	46 f4       	brtc	.+16     	; 0x70c <__divmodsi4_exit>
 6fc:	08 c0       	rjmp	.+16     	; 0x70e <__negsi2>

000006fe <__divmodsi4_neg2>:
 6fe:	50 95       	com	r21
 700:	40 95       	com	r20
 702:	30 95       	com	r19
 704:	21 95       	neg	r18
 706:	3f 4f       	sbci	r19, 0xFF	; 255
 708:	4f 4f       	sbci	r20, 0xFF	; 255
 70a:	5f 4f       	sbci	r21, 0xFF	; 255

0000070c <__divmodsi4_exit>:
 70c:	08 95       	ret

0000070e <__negsi2>:
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	08 95       	ret

0000071e <__tablejump2__>:
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	00 24       	eor	r0, r0
 724:	00 1c       	adc	r0, r0
 726:	0b be       	out	0x3b, r0	; 59
 728:	07 90       	elpm	r0, Z+
 72a:	f6 91       	elpm	r31, Z
 72c:	e0 2d       	mov	r30, r0
 72e:	09 94       	ijmp

00000730 <__udivmodhi4>:
 730:	aa 1b       	sub	r26, r26
 732:	bb 1b       	sub	r27, r27
 734:	51 e1       	ldi	r21, 0x11	; 17
 736:	07 c0       	rjmp	.+14     	; 0x746 <__udivmodhi4_ep>

00000738 <__udivmodhi4_loop>:
 738:	aa 1f       	adc	r26, r26
 73a:	bb 1f       	adc	r27, r27
 73c:	a6 17       	cp	r26, r22
 73e:	b7 07       	cpc	r27, r23
 740:	10 f0       	brcs	.+4      	; 0x746 <__udivmodhi4_ep>
 742:	a6 1b       	sub	r26, r22
 744:	b7 0b       	sbc	r27, r23

00000746 <__udivmodhi4_ep>:
 746:	88 1f       	adc	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	5a 95       	dec	r21
 74c:	a9 f7       	brne	.-22     	; 0x738 <__udivmodhi4_loop>
 74e:	80 95       	com	r24
 750:	90 95       	com	r25
 752:	bc 01       	movw	r22, r24
 754:	cd 01       	movw	r24, r26
 756:	08 95       	ret

00000758 <__udivmodsi4>:
 758:	a1 e2       	ldi	r26, 0x21	; 33
 75a:	1a 2e       	mov	r1, r26
 75c:	aa 1b       	sub	r26, r26
 75e:	bb 1b       	sub	r27, r27
 760:	fd 01       	movw	r30, r26
 762:	0d c0       	rjmp	.+26     	; 0x77e <__udivmodsi4_ep>

00000764 <__udivmodsi4_loop>:
 764:	aa 1f       	adc	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	ee 1f       	adc	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	a2 17       	cp	r26, r18
 76e:	b3 07       	cpc	r27, r19
 770:	e4 07       	cpc	r30, r20
 772:	f5 07       	cpc	r31, r21
 774:	20 f0       	brcs	.+8      	; 0x77e <__udivmodsi4_ep>
 776:	a2 1b       	sub	r26, r18
 778:	b3 0b       	sbc	r27, r19
 77a:	e4 0b       	sbc	r30, r20
 77c:	f5 0b       	sbc	r31, r21

0000077e <__udivmodsi4_ep>:
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	1a 94       	dec	r1
 788:	69 f7       	brne	.-38     	; 0x764 <__udivmodsi4_loop>
 78a:	60 95       	com	r22
 78c:	70 95       	com	r23
 78e:	80 95       	com	r24
 790:	90 95       	com	r25
 792:	9b 01       	movw	r18, r22
 794:	ac 01       	movw	r20, r24
 796:	bd 01       	movw	r22, r26
 798:	cf 01       	movw	r24, r30
 79a:	08 95       	ret

0000079c <malloc>:
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	91 05       	cpc	r25, r1
 7a8:	10 f4       	brcc	.+4      	; 0x7ae <malloc+0x12>
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__flp>
 7b2:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__flp+0x1>
 7b6:	20 e0       	ldi	r18, 0x00	; 0
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	a0 e0       	ldi	r26, 0x00	; 0
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	30 97       	sbiw	r30, 0x00	; 0
 7c0:	19 f1       	breq	.+70     	; 0x808 <malloc+0x6c>
 7c2:	40 81       	ld	r20, Z
 7c4:	51 81       	ldd	r21, Z+1	; 0x01
 7c6:	02 81       	ldd	r16, Z+2	; 0x02
 7c8:	13 81       	ldd	r17, Z+3	; 0x03
 7ca:	48 17       	cp	r20, r24
 7cc:	59 07       	cpc	r21, r25
 7ce:	c8 f0       	brcs	.+50     	; 0x802 <malloc+0x66>
 7d0:	84 17       	cp	r24, r20
 7d2:	95 07       	cpc	r25, r21
 7d4:	69 f4       	brne	.+26     	; 0x7f0 <malloc+0x54>
 7d6:	10 97       	sbiw	r26, 0x00	; 0
 7d8:	31 f0       	breq	.+12     	; 0x7e6 <malloc+0x4a>
 7da:	12 96       	adiw	r26, 0x02	; 2
 7dc:	0c 93       	st	X, r16
 7de:	12 97       	sbiw	r26, 0x02	; 2
 7e0:	13 96       	adiw	r26, 0x03	; 3
 7e2:	1c 93       	st	X, r17
 7e4:	27 c0       	rjmp	.+78     	; 0x834 <malloc+0x98>
 7e6:	00 93 26 01 	sts	0x0126, r16	; 0x800126 <__flp>
 7ea:	10 93 27 01 	sts	0x0127, r17	; 0x800127 <__flp+0x1>
 7ee:	22 c0       	rjmp	.+68     	; 0x834 <malloc+0x98>
 7f0:	21 15       	cp	r18, r1
 7f2:	31 05       	cpc	r19, r1
 7f4:	19 f0       	breq	.+6      	; 0x7fc <malloc+0x60>
 7f6:	42 17       	cp	r20, r18
 7f8:	53 07       	cpc	r21, r19
 7fa:	18 f4       	brcc	.+6      	; 0x802 <malloc+0x66>
 7fc:	9a 01       	movw	r18, r20
 7fe:	bd 01       	movw	r22, r26
 800:	ef 01       	movw	r28, r30
 802:	df 01       	movw	r26, r30
 804:	f8 01       	movw	r30, r16
 806:	db cf       	rjmp	.-74     	; 0x7be <malloc+0x22>
 808:	21 15       	cp	r18, r1
 80a:	31 05       	cpc	r19, r1
 80c:	f9 f0       	breq	.+62     	; 0x84c <malloc+0xb0>
 80e:	28 1b       	sub	r18, r24
 810:	39 0b       	sbc	r19, r25
 812:	24 30       	cpi	r18, 0x04	; 4
 814:	31 05       	cpc	r19, r1
 816:	80 f4       	brcc	.+32     	; 0x838 <malloc+0x9c>
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	9b 81       	ldd	r25, Y+3	; 0x03
 81c:	61 15       	cp	r22, r1
 81e:	71 05       	cpc	r23, r1
 820:	21 f0       	breq	.+8      	; 0x82a <malloc+0x8e>
 822:	fb 01       	movw	r30, r22
 824:	93 83       	std	Z+3, r25	; 0x03
 826:	82 83       	std	Z+2, r24	; 0x02
 828:	04 c0       	rjmp	.+8      	; 0x832 <malloc+0x96>
 82a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__flp+0x1>
 82e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__flp>
 832:	fe 01       	movw	r30, r28
 834:	32 96       	adiw	r30, 0x02	; 2
 836:	44 c0       	rjmp	.+136    	; 0x8c0 <malloc+0x124>
 838:	fe 01       	movw	r30, r28
 83a:	e2 0f       	add	r30, r18
 83c:	f3 1f       	adc	r31, r19
 83e:	81 93       	st	Z+, r24
 840:	91 93       	st	Z+, r25
 842:	22 50       	subi	r18, 0x02	; 2
 844:	31 09       	sbc	r19, r1
 846:	39 83       	std	Y+1, r19	; 0x01
 848:	28 83       	st	Y, r18
 84a:	3a c0       	rjmp	.+116    	; 0x8c0 <malloc+0x124>
 84c:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__brkval>
 850:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__brkval+0x1>
 854:	23 2b       	or	r18, r19
 856:	41 f4       	brne	.+16     	; 0x868 <malloc+0xcc>
 858:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 85c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 860:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <__brkval+0x1>
 864:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <__brkval>
 868:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 86c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 870:	21 15       	cp	r18, r1
 872:	31 05       	cpc	r19, r1
 874:	41 f4       	brne	.+16     	; 0x886 <malloc+0xea>
 876:	2d b7       	in	r18, 0x3d	; 61
 878:	3e b7       	in	r19, 0x3e	; 62
 87a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 87e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 882:	24 1b       	sub	r18, r20
 884:	35 0b       	sbc	r19, r21
 886:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__brkval>
 88a:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__brkval+0x1>
 88e:	e2 17       	cp	r30, r18
 890:	f3 07       	cpc	r31, r19
 892:	a0 f4       	brcc	.+40     	; 0x8bc <malloc+0x120>
 894:	2e 1b       	sub	r18, r30
 896:	3f 0b       	sbc	r19, r31
 898:	28 17       	cp	r18, r24
 89a:	39 07       	cpc	r19, r25
 89c:	78 f0       	brcs	.+30     	; 0x8bc <malloc+0x120>
 89e:	ac 01       	movw	r20, r24
 8a0:	4e 5f       	subi	r20, 0xFE	; 254
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	24 17       	cp	r18, r20
 8a6:	35 07       	cpc	r19, r21
 8a8:	48 f0       	brcs	.+18     	; 0x8bc <malloc+0x120>
 8aa:	4e 0f       	add	r20, r30
 8ac:	5f 1f       	adc	r21, r31
 8ae:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <__brkval+0x1>
 8b2:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <__brkval>
 8b6:	81 93       	st	Z+, r24
 8b8:	91 93       	st	Z+, r25
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <malloc+0x124>
 8bc:	e0 e0       	ldi	r30, 0x00	; 0
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	cf 01       	movw	r24, r30
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	08 95       	ret

000008cc <free>:
 8cc:	cf 93       	push	r28
 8ce:	df 93       	push	r29
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <free+0xa>
 8d4:	81 c0       	rjmp	.+258    	; 0x9d8 <free+0x10c>
 8d6:	fc 01       	movw	r30, r24
 8d8:	32 97       	sbiw	r30, 0x02	; 2
 8da:	13 82       	std	Z+3, r1	; 0x03
 8dc:	12 82       	std	Z+2, r1	; 0x02
 8de:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <__flp>
 8e2:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <__flp+0x1>
 8e6:	10 97       	sbiw	r26, 0x00	; 0
 8e8:	81 f4       	brne	.+32     	; 0x90a <free+0x3e>
 8ea:	20 81       	ld	r18, Z
 8ec:	31 81       	ldd	r19, Z+1	; 0x01
 8ee:	82 0f       	add	r24, r18
 8f0:	93 1f       	adc	r25, r19
 8f2:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__brkval>
 8f6:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__brkval+0x1>
 8fa:	28 17       	cp	r18, r24
 8fc:	39 07       	cpc	r19, r25
 8fe:	51 f5       	brne	.+84     	; 0x954 <free+0x88>
 900:	f0 93 25 01 	sts	0x0125, r31	; 0x800125 <__brkval+0x1>
 904:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <__brkval>
 908:	67 c0       	rjmp	.+206    	; 0x9d8 <free+0x10c>
 90a:	ed 01       	movw	r28, r26
 90c:	20 e0       	ldi	r18, 0x00	; 0
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	ce 17       	cp	r28, r30
 912:	df 07       	cpc	r29, r31
 914:	40 f4       	brcc	.+16     	; 0x926 <free+0x5a>
 916:	4a 81       	ldd	r20, Y+2	; 0x02
 918:	5b 81       	ldd	r21, Y+3	; 0x03
 91a:	9e 01       	movw	r18, r28
 91c:	41 15       	cp	r20, r1
 91e:	51 05       	cpc	r21, r1
 920:	f1 f0       	breq	.+60     	; 0x95e <free+0x92>
 922:	ea 01       	movw	r28, r20
 924:	f5 cf       	rjmp	.-22     	; 0x910 <free+0x44>
 926:	d3 83       	std	Z+3, r29	; 0x03
 928:	c2 83       	std	Z+2, r28	; 0x02
 92a:	40 81       	ld	r20, Z
 92c:	51 81       	ldd	r21, Z+1	; 0x01
 92e:	84 0f       	add	r24, r20
 930:	95 1f       	adc	r25, r21
 932:	c8 17       	cp	r28, r24
 934:	d9 07       	cpc	r29, r25
 936:	59 f4       	brne	.+22     	; 0x94e <free+0x82>
 938:	88 81       	ld	r24, Y
 93a:	99 81       	ldd	r25, Y+1	; 0x01
 93c:	84 0f       	add	r24, r20
 93e:	95 1f       	adc	r25, r21
 940:	02 96       	adiw	r24, 0x02	; 2
 942:	91 83       	std	Z+1, r25	; 0x01
 944:	80 83       	st	Z, r24
 946:	8a 81       	ldd	r24, Y+2	; 0x02
 948:	9b 81       	ldd	r25, Y+3	; 0x03
 94a:	93 83       	std	Z+3, r25	; 0x03
 94c:	82 83       	std	Z+2, r24	; 0x02
 94e:	21 15       	cp	r18, r1
 950:	31 05       	cpc	r19, r1
 952:	29 f4       	brne	.+10     	; 0x95e <free+0x92>
 954:	f0 93 27 01 	sts	0x0127, r31	; 0x800127 <__flp+0x1>
 958:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <__flp>
 95c:	3d c0       	rjmp	.+122    	; 0x9d8 <free+0x10c>
 95e:	e9 01       	movw	r28, r18
 960:	fb 83       	std	Y+3, r31	; 0x03
 962:	ea 83       	std	Y+2, r30	; 0x02
 964:	49 91       	ld	r20, Y+
 966:	59 91       	ld	r21, Y+
 968:	c4 0f       	add	r28, r20
 96a:	d5 1f       	adc	r29, r21
 96c:	ec 17       	cp	r30, r28
 96e:	fd 07       	cpc	r31, r29
 970:	61 f4       	brne	.+24     	; 0x98a <free+0xbe>
 972:	80 81       	ld	r24, Z
 974:	91 81       	ldd	r25, Z+1	; 0x01
 976:	84 0f       	add	r24, r20
 978:	95 1f       	adc	r25, r21
 97a:	02 96       	adiw	r24, 0x02	; 2
 97c:	e9 01       	movw	r28, r18
 97e:	99 83       	std	Y+1, r25	; 0x01
 980:	88 83       	st	Y, r24
 982:	82 81       	ldd	r24, Z+2	; 0x02
 984:	93 81       	ldd	r25, Z+3	; 0x03
 986:	9b 83       	std	Y+3, r25	; 0x03
 988:	8a 83       	std	Y+2, r24	; 0x02
 98a:	e0 e0       	ldi	r30, 0x00	; 0
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	12 96       	adiw	r26, 0x02	; 2
 990:	8d 91       	ld	r24, X+
 992:	9c 91       	ld	r25, X
 994:	13 97       	sbiw	r26, 0x03	; 3
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	19 f0       	breq	.+6      	; 0x9a0 <free+0xd4>
 99a:	fd 01       	movw	r30, r26
 99c:	dc 01       	movw	r26, r24
 99e:	f7 cf       	rjmp	.-18     	; 0x98e <free+0xc2>
 9a0:	8d 91       	ld	r24, X+
 9a2:	9c 91       	ld	r25, X
 9a4:	11 97       	sbiw	r26, 0x01	; 1
 9a6:	9d 01       	movw	r18, r26
 9a8:	2e 5f       	subi	r18, 0xFE	; 254
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	82 0f       	add	r24, r18
 9ae:	93 1f       	adc	r25, r19
 9b0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__brkval>
 9b4:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__brkval+0x1>
 9b8:	28 17       	cp	r18, r24
 9ba:	39 07       	cpc	r19, r25
 9bc:	69 f4       	brne	.+26     	; 0x9d8 <free+0x10c>
 9be:	30 97       	sbiw	r30, 0x00	; 0
 9c0:	29 f4       	brne	.+10     	; 0x9cc <free+0x100>
 9c2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__flp+0x1>
 9c6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__flp>
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <free+0x104>
 9cc:	13 82       	std	Z+3, r1	; 0x03
 9ce:	12 82       	std	Z+2, r1	; 0x02
 9d0:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <__brkval+0x1>
 9d4:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <__brkval>
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	08 95       	ret

000009de <toupper>:
 9de:	91 11       	cpse	r25, r1
 9e0:	08 95       	ret
 9e2:	81 56       	subi	r24, 0x61	; 97
 9e4:	8a 51       	subi	r24, 0x1A	; 26
 9e6:	08 f4       	brcc	.+2      	; 0x9ea <toupper+0xc>
 9e8:	80 52       	subi	r24, 0x20	; 32
 9ea:	85 58       	subi	r24, 0x85	; 133
 9ec:	08 95       	ret

000009ee <sprintf>:
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
 9fa:	2e 97       	sbiw	r28, 0x0e	; 14
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	de bf       	out	0x3e, r29	; 62
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	cd bf       	out	0x3d, r28	; 61
 a06:	0d 89       	ldd	r16, Y+21	; 0x15
 a08:	1e 89       	ldd	r17, Y+22	; 0x16
 a0a:	86 e0       	ldi	r24, 0x06	; 6
 a0c:	8c 83       	std	Y+4, r24	; 0x04
 a0e:	1a 83       	std	Y+2, r17	; 0x02
 a10:	09 83       	std	Y+1, r16	; 0x01
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	9f e7       	ldi	r25, 0x7F	; 127
 a16:	9e 83       	std	Y+6, r25	; 0x06
 a18:	8d 83       	std	Y+5, r24	; 0x05
 a1a:	ae 01       	movw	r20, r28
 a1c:	47 5e       	subi	r20, 0xE7	; 231
 a1e:	5f 4f       	sbci	r21, 0xFF	; 255
 a20:	6f 89       	ldd	r22, Y+23	; 0x17
 a22:	78 8d       	ldd	r23, Y+24	; 0x18
 a24:	ce 01       	movw	r24, r28
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	10 d0       	rcall	.+32     	; 0xa4a <vfprintf>
 a2a:	ef 81       	ldd	r30, Y+7	; 0x07
 a2c:	f8 85       	ldd	r31, Y+8	; 0x08
 a2e:	e0 0f       	add	r30, r16
 a30:	f1 1f       	adc	r31, r17
 a32:	10 82       	st	Z, r1
 a34:	2e 96       	adiw	r28, 0x0e	; 14
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	f8 94       	cli
 a3a:	de bf       	out	0x3e, r29	; 62
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	cd bf       	out	0x3d, r28	; 61
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <vfprintf>:
 a4a:	2f 92       	push	r2
 a4c:	3f 92       	push	r3
 a4e:	4f 92       	push	r4
 a50:	5f 92       	push	r5
 a52:	6f 92       	push	r6
 a54:	7f 92       	push	r7
 a56:	8f 92       	push	r8
 a58:	9f 92       	push	r9
 a5a:	af 92       	push	r10
 a5c:	bf 92       	push	r11
 a5e:	cf 92       	push	r12
 a60:	df 92       	push	r13
 a62:	ef 92       	push	r14
 a64:	ff 92       	push	r15
 a66:	0f 93       	push	r16
 a68:	1f 93       	push	r17
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	cd b7       	in	r28, 0x3d	; 61
 a70:	de b7       	in	r29, 0x3e	; 62
 a72:	2b 97       	sbiw	r28, 0x0b	; 11
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	f8 94       	cli
 a78:	de bf       	out	0x3e, r29	; 62
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	cd bf       	out	0x3d, r28	; 61
 a7e:	6c 01       	movw	r12, r24
 a80:	7b 01       	movw	r14, r22
 a82:	8a 01       	movw	r16, r20
 a84:	fc 01       	movw	r30, r24
 a86:	17 82       	std	Z+7, r1	; 0x07
 a88:	16 82       	std	Z+6, r1	; 0x06
 a8a:	83 81       	ldd	r24, Z+3	; 0x03
 a8c:	81 ff       	sbrs	r24, 1
 a8e:	bf c1       	rjmp	.+894    	; 0xe0e <vfprintf+0x3c4>
 a90:	ce 01       	movw	r24, r28
 a92:	01 96       	adiw	r24, 0x01	; 1
 a94:	3c 01       	movw	r6, r24
 a96:	f6 01       	movw	r30, r12
 a98:	93 81       	ldd	r25, Z+3	; 0x03
 a9a:	f7 01       	movw	r30, r14
 a9c:	93 fd       	sbrc	r25, 3
 a9e:	85 91       	lpm	r24, Z+
 aa0:	93 ff       	sbrs	r25, 3
 aa2:	81 91       	ld	r24, Z+
 aa4:	7f 01       	movw	r14, r30
 aa6:	88 23       	and	r24, r24
 aa8:	09 f4       	brne	.+2      	; 0xaac <vfprintf+0x62>
 aaa:	ad c1       	rjmp	.+858    	; 0xe06 <vfprintf+0x3bc>
 aac:	85 32       	cpi	r24, 0x25	; 37
 aae:	39 f4       	brne	.+14     	; 0xabe <vfprintf+0x74>
 ab0:	93 fd       	sbrc	r25, 3
 ab2:	85 91       	lpm	r24, Z+
 ab4:	93 ff       	sbrs	r25, 3
 ab6:	81 91       	ld	r24, Z+
 ab8:	7f 01       	movw	r14, r30
 aba:	85 32       	cpi	r24, 0x25	; 37
 abc:	21 f4       	brne	.+8      	; 0xac6 <vfprintf+0x7c>
 abe:	b6 01       	movw	r22, r12
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	d6 d1       	rcall	.+940    	; 0xe70 <fputc>
 ac4:	e8 cf       	rjmp	.-48     	; 0xa96 <vfprintf+0x4c>
 ac6:	91 2c       	mov	r9, r1
 ac8:	21 2c       	mov	r2, r1
 aca:	31 2c       	mov	r3, r1
 acc:	ff e1       	ldi	r31, 0x1F	; 31
 ace:	f3 15       	cp	r31, r3
 ad0:	d8 f0       	brcs	.+54     	; 0xb08 <vfprintf+0xbe>
 ad2:	8b 32       	cpi	r24, 0x2B	; 43
 ad4:	79 f0       	breq	.+30     	; 0xaf4 <vfprintf+0xaa>
 ad6:	38 f4       	brcc	.+14     	; 0xae6 <vfprintf+0x9c>
 ad8:	80 32       	cpi	r24, 0x20	; 32
 ada:	79 f0       	breq	.+30     	; 0xafa <vfprintf+0xb0>
 adc:	83 32       	cpi	r24, 0x23	; 35
 ade:	a1 f4       	brne	.+40     	; 0xb08 <vfprintf+0xbe>
 ae0:	23 2d       	mov	r18, r3
 ae2:	20 61       	ori	r18, 0x10	; 16
 ae4:	1d c0       	rjmp	.+58     	; 0xb20 <vfprintf+0xd6>
 ae6:	8d 32       	cpi	r24, 0x2D	; 45
 ae8:	61 f0       	breq	.+24     	; 0xb02 <vfprintf+0xb8>
 aea:	80 33       	cpi	r24, 0x30	; 48
 aec:	69 f4       	brne	.+26     	; 0xb08 <vfprintf+0xbe>
 aee:	23 2d       	mov	r18, r3
 af0:	21 60       	ori	r18, 0x01	; 1
 af2:	16 c0       	rjmp	.+44     	; 0xb20 <vfprintf+0xd6>
 af4:	83 2d       	mov	r24, r3
 af6:	82 60       	ori	r24, 0x02	; 2
 af8:	38 2e       	mov	r3, r24
 afa:	e3 2d       	mov	r30, r3
 afc:	e4 60       	ori	r30, 0x04	; 4
 afe:	3e 2e       	mov	r3, r30
 b00:	2a c0       	rjmp	.+84     	; 0xb56 <vfprintf+0x10c>
 b02:	f3 2d       	mov	r31, r3
 b04:	f8 60       	ori	r31, 0x08	; 8
 b06:	1d c0       	rjmp	.+58     	; 0xb42 <vfprintf+0xf8>
 b08:	37 fc       	sbrc	r3, 7
 b0a:	2d c0       	rjmp	.+90     	; 0xb66 <vfprintf+0x11c>
 b0c:	20 ed       	ldi	r18, 0xD0	; 208
 b0e:	28 0f       	add	r18, r24
 b10:	2a 30       	cpi	r18, 0x0A	; 10
 b12:	40 f0       	brcs	.+16     	; 0xb24 <vfprintf+0xda>
 b14:	8e 32       	cpi	r24, 0x2E	; 46
 b16:	b9 f4       	brne	.+46     	; 0xb46 <vfprintf+0xfc>
 b18:	36 fc       	sbrc	r3, 6
 b1a:	75 c1       	rjmp	.+746    	; 0xe06 <vfprintf+0x3bc>
 b1c:	23 2d       	mov	r18, r3
 b1e:	20 64       	ori	r18, 0x40	; 64
 b20:	32 2e       	mov	r3, r18
 b22:	19 c0       	rjmp	.+50     	; 0xb56 <vfprintf+0x10c>
 b24:	36 fe       	sbrs	r3, 6
 b26:	06 c0       	rjmp	.+12     	; 0xb34 <vfprintf+0xea>
 b28:	8a e0       	ldi	r24, 0x0A	; 10
 b2a:	98 9e       	mul	r9, r24
 b2c:	20 0d       	add	r18, r0
 b2e:	11 24       	eor	r1, r1
 b30:	92 2e       	mov	r9, r18
 b32:	11 c0       	rjmp	.+34     	; 0xb56 <vfprintf+0x10c>
 b34:	ea e0       	ldi	r30, 0x0A	; 10
 b36:	2e 9e       	mul	r2, r30
 b38:	20 0d       	add	r18, r0
 b3a:	11 24       	eor	r1, r1
 b3c:	22 2e       	mov	r2, r18
 b3e:	f3 2d       	mov	r31, r3
 b40:	f0 62       	ori	r31, 0x20	; 32
 b42:	3f 2e       	mov	r3, r31
 b44:	08 c0       	rjmp	.+16     	; 0xb56 <vfprintf+0x10c>
 b46:	8c 36       	cpi	r24, 0x6C	; 108
 b48:	21 f4       	brne	.+8      	; 0xb52 <vfprintf+0x108>
 b4a:	83 2d       	mov	r24, r3
 b4c:	80 68       	ori	r24, 0x80	; 128
 b4e:	38 2e       	mov	r3, r24
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <vfprintf+0x10c>
 b52:	88 36       	cpi	r24, 0x68	; 104
 b54:	41 f4       	brne	.+16     	; 0xb66 <vfprintf+0x11c>
 b56:	f7 01       	movw	r30, r14
 b58:	93 fd       	sbrc	r25, 3
 b5a:	85 91       	lpm	r24, Z+
 b5c:	93 ff       	sbrs	r25, 3
 b5e:	81 91       	ld	r24, Z+
 b60:	7f 01       	movw	r14, r30
 b62:	81 11       	cpse	r24, r1
 b64:	b3 cf       	rjmp	.-154    	; 0xacc <vfprintf+0x82>
 b66:	98 2f       	mov	r25, r24
 b68:	9f 7d       	andi	r25, 0xDF	; 223
 b6a:	95 54       	subi	r25, 0x45	; 69
 b6c:	93 30       	cpi	r25, 0x03	; 3
 b6e:	28 f4       	brcc	.+10     	; 0xb7a <vfprintf+0x130>
 b70:	0c 5f       	subi	r16, 0xFC	; 252
 b72:	1f 4f       	sbci	r17, 0xFF	; 255
 b74:	9f e3       	ldi	r25, 0x3F	; 63
 b76:	99 83       	std	Y+1, r25	; 0x01
 b78:	0d c0       	rjmp	.+26     	; 0xb94 <vfprintf+0x14a>
 b7a:	83 36       	cpi	r24, 0x63	; 99
 b7c:	31 f0       	breq	.+12     	; 0xb8a <vfprintf+0x140>
 b7e:	83 37       	cpi	r24, 0x73	; 115
 b80:	71 f0       	breq	.+28     	; 0xb9e <vfprintf+0x154>
 b82:	83 35       	cpi	r24, 0x53	; 83
 b84:	09 f0       	breq	.+2      	; 0xb88 <vfprintf+0x13e>
 b86:	55 c0       	rjmp	.+170    	; 0xc32 <vfprintf+0x1e8>
 b88:	20 c0       	rjmp	.+64     	; 0xbca <vfprintf+0x180>
 b8a:	f8 01       	movw	r30, r16
 b8c:	80 81       	ld	r24, Z
 b8e:	89 83       	std	Y+1, r24	; 0x01
 b90:	0e 5f       	subi	r16, 0xFE	; 254
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	88 24       	eor	r8, r8
 b96:	83 94       	inc	r8
 b98:	91 2c       	mov	r9, r1
 b9a:	53 01       	movw	r10, r6
 b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <vfprintf+0x178>
 b9e:	28 01       	movw	r4, r16
 ba0:	f2 e0       	ldi	r31, 0x02	; 2
 ba2:	4f 0e       	add	r4, r31
 ba4:	51 1c       	adc	r5, r1
 ba6:	f8 01       	movw	r30, r16
 ba8:	a0 80       	ld	r10, Z
 baa:	b1 80       	ldd	r11, Z+1	; 0x01
 bac:	36 fe       	sbrs	r3, 6
 bae:	03 c0       	rjmp	.+6      	; 0xbb6 <vfprintf+0x16c>
 bb0:	69 2d       	mov	r22, r9
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <vfprintf+0x170>
 bb6:	6f ef       	ldi	r22, 0xFF	; 255
 bb8:	7f ef       	ldi	r23, 0xFF	; 255
 bba:	c5 01       	movw	r24, r10
 bbc:	4e d1       	rcall	.+668    	; 0xe5a <strnlen>
 bbe:	4c 01       	movw	r8, r24
 bc0:	82 01       	movw	r16, r4
 bc2:	f3 2d       	mov	r31, r3
 bc4:	ff 77       	andi	r31, 0x7F	; 127
 bc6:	3f 2e       	mov	r3, r31
 bc8:	15 c0       	rjmp	.+42     	; 0xbf4 <vfprintf+0x1aa>
 bca:	28 01       	movw	r4, r16
 bcc:	22 e0       	ldi	r18, 0x02	; 2
 bce:	42 0e       	add	r4, r18
 bd0:	51 1c       	adc	r5, r1
 bd2:	f8 01       	movw	r30, r16
 bd4:	a0 80       	ld	r10, Z
 bd6:	b1 80       	ldd	r11, Z+1	; 0x01
 bd8:	36 fe       	sbrs	r3, 6
 bda:	03 c0       	rjmp	.+6      	; 0xbe2 <vfprintf+0x198>
 bdc:	69 2d       	mov	r22, r9
 bde:	70 e0       	ldi	r23, 0x00	; 0
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <vfprintf+0x19c>
 be2:	6f ef       	ldi	r22, 0xFF	; 255
 be4:	7f ef       	ldi	r23, 0xFF	; 255
 be6:	c5 01       	movw	r24, r10
 be8:	2d d1       	rcall	.+602    	; 0xe44 <strnlen_P>
 bea:	4c 01       	movw	r8, r24
 bec:	f3 2d       	mov	r31, r3
 bee:	f0 68       	ori	r31, 0x80	; 128
 bf0:	3f 2e       	mov	r3, r31
 bf2:	82 01       	movw	r16, r4
 bf4:	33 fc       	sbrc	r3, 3
 bf6:	19 c0       	rjmp	.+50     	; 0xc2a <vfprintf+0x1e0>
 bf8:	82 2d       	mov	r24, r2
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	88 16       	cp	r8, r24
 bfe:	99 06       	cpc	r9, r25
 c00:	a0 f4       	brcc	.+40     	; 0xc2a <vfprintf+0x1e0>
 c02:	b6 01       	movw	r22, r12
 c04:	80 e2       	ldi	r24, 0x20	; 32
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	33 d1       	rcall	.+614    	; 0xe70 <fputc>
 c0a:	2a 94       	dec	r2
 c0c:	f5 cf       	rjmp	.-22     	; 0xbf8 <vfprintf+0x1ae>
 c0e:	f5 01       	movw	r30, r10
 c10:	37 fc       	sbrc	r3, 7
 c12:	85 91       	lpm	r24, Z+
 c14:	37 fe       	sbrs	r3, 7
 c16:	81 91       	ld	r24, Z+
 c18:	5f 01       	movw	r10, r30
 c1a:	b6 01       	movw	r22, r12
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	28 d1       	rcall	.+592    	; 0xe70 <fputc>
 c20:	21 10       	cpse	r2, r1
 c22:	2a 94       	dec	r2
 c24:	21 e0       	ldi	r18, 0x01	; 1
 c26:	82 1a       	sub	r8, r18
 c28:	91 08       	sbc	r9, r1
 c2a:	81 14       	cp	r8, r1
 c2c:	91 04       	cpc	r9, r1
 c2e:	79 f7       	brne	.-34     	; 0xc0e <vfprintf+0x1c4>
 c30:	e1 c0       	rjmp	.+450    	; 0xdf4 <vfprintf+0x3aa>
 c32:	84 36       	cpi	r24, 0x64	; 100
 c34:	11 f0       	breq	.+4      	; 0xc3a <vfprintf+0x1f0>
 c36:	89 36       	cpi	r24, 0x69	; 105
 c38:	39 f5       	brne	.+78     	; 0xc88 <vfprintf+0x23e>
 c3a:	f8 01       	movw	r30, r16
 c3c:	37 fe       	sbrs	r3, 7
 c3e:	07 c0       	rjmp	.+14     	; 0xc4e <vfprintf+0x204>
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	82 81       	ldd	r24, Z+2	; 0x02
 c46:	93 81       	ldd	r25, Z+3	; 0x03
 c48:	0c 5f       	subi	r16, 0xFC	; 252
 c4a:	1f 4f       	sbci	r17, 0xFF	; 255
 c4c:	08 c0       	rjmp	.+16     	; 0xc5e <vfprintf+0x214>
 c4e:	60 81       	ld	r22, Z
 c50:	71 81       	ldd	r23, Z+1	; 0x01
 c52:	07 2e       	mov	r0, r23
 c54:	00 0c       	add	r0, r0
 c56:	88 0b       	sbc	r24, r24
 c58:	99 0b       	sbc	r25, r25
 c5a:	0e 5f       	subi	r16, 0xFE	; 254
 c5c:	1f 4f       	sbci	r17, 0xFF	; 255
 c5e:	f3 2d       	mov	r31, r3
 c60:	ff 76       	andi	r31, 0x6F	; 111
 c62:	3f 2e       	mov	r3, r31
 c64:	97 ff       	sbrs	r25, 7
 c66:	09 c0       	rjmp	.+18     	; 0xc7a <vfprintf+0x230>
 c68:	90 95       	com	r25
 c6a:	80 95       	com	r24
 c6c:	70 95       	com	r23
 c6e:	61 95       	neg	r22
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	f0 68       	ori	r31, 0x80	; 128
 c78:	3f 2e       	mov	r3, r31
 c7a:	2a e0       	ldi	r18, 0x0A	; 10
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	a3 01       	movw	r20, r6
 c80:	33 d1       	rcall	.+614    	; 0xee8 <__ultoa_invert>
 c82:	88 2e       	mov	r8, r24
 c84:	86 18       	sub	r8, r6
 c86:	44 c0       	rjmp	.+136    	; 0xd10 <vfprintf+0x2c6>
 c88:	85 37       	cpi	r24, 0x75	; 117
 c8a:	31 f4       	brne	.+12     	; 0xc98 <vfprintf+0x24e>
 c8c:	23 2d       	mov	r18, r3
 c8e:	2f 7e       	andi	r18, 0xEF	; 239
 c90:	b2 2e       	mov	r11, r18
 c92:	2a e0       	ldi	r18, 0x0A	; 10
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	25 c0       	rjmp	.+74     	; 0xce2 <vfprintf+0x298>
 c98:	93 2d       	mov	r25, r3
 c9a:	99 7f       	andi	r25, 0xF9	; 249
 c9c:	b9 2e       	mov	r11, r25
 c9e:	8f 36       	cpi	r24, 0x6F	; 111
 ca0:	c1 f0       	breq	.+48     	; 0xcd2 <vfprintf+0x288>
 ca2:	18 f4       	brcc	.+6      	; 0xcaa <vfprintf+0x260>
 ca4:	88 35       	cpi	r24, 0x58	; 88
 ca6:	79 f0       	breq	.+30     	; 0xcc6 <vfprintf+0x27c>
 ca8:	ae c0       	rjmp	.+348    	; 0xe06 <vfprintf+0x3bc>
 caa:	80 37       	cpi	r24, 0x70	; 112
 cac:	19 f0       	breq	.+6      	; 0xcb4 <vfprintf+0x26a>
 cae:	88 37       	cpi	r24, 0x78	; 120
 cb0:	21 f0       	breq	.+8      	; 0xcba <vfprintf+0x270>
 cb2:	a9 c0       	rjmp	.+338    	; 0xe06 <vfprintf+0x3bc>
 cb4:	e9 2f       	mov	r30, r25
 cb6:	e0 61       	ori	r30, 0x10	; 16
 cb8:	be 2e       	mov	r11, r30
 cba:	b4 fe       	sbrs	r11, 4
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x28e>
 cbe:	fb 2d       	mov	r31, r11
 cc0:	f4 60       	ori	r31, 0x04	; 4
 cc2:	bf 2e       	mov	r11, r31
 cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <vfprintf+0x28e>
 cc6:	34 fe       	sbrs	r3, 4
 cc8:	0a c0       	rjmp	.+20     	; 0xcde <vfprintf+0x294>
 cca:	29 2f       	mov	r18, r25
 ccc:	26 60       	ori	r18, 0x06	; 6
 cce:	b2 2e       	mov	r11, r18
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x294>
 cd2:	28 e0       	ldi	r18, 0x08	; 8
 cd4:	30 e0       	ldi	r19, 0x00	; 0
 cd6:	05 c0       	rjmp	.+10     	; 0xce2 <vfprintf+0x298>
 cd8:	20 e1       	ldi	r18, 0x10	; 16
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x298>
 cde:	20 e1       	ldi	r18, 0x10	; 16
 ce0:	32 e0       	ldi	r19, 0x02	; 2
 ce2:	f8 01       	movw	r30, r16
 ce4:	b7 fe       	sbrs	r11, 7
 ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <vfprintf+0x2ac>
 ce8:	60 81       	ld	r22, Z
 cea:	71 81       	ldd	r23, Z+1	; 0x01
 cec:	82 81       	ldd	r24, Z+2	; 0x02
 cee:	93 81       	ldd	r25, Z+3	; 0x03
 cf0:	0c 5f       	subi	r16, 0xFC	; 252
 cf2:	1f 4f       	sbci	r17, 0xFF	; 255
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0x2b8>
 cf6:	60 81       	ld	r22, Z
 cf8:	71 81       	ldd	r23, Z+1	; 0x01
 cfa:	80 e0       	ldi	r24, 0x00	; 0
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 5f       	subi	r16, 0xFE	; 254
 d00:	1f 4f       	sbci	r17, 0xFF	; 255
 d02:	a3 01       	movw	r20, r6
 d04:	f1 d0       	rcall	.+482    	; 0xee8 <__ultoa_invert>
 d06:	88 2e       	mov	r8, r24
 d08:	86 18       	sub	r8, r6
 d0a:	fb 2d       	mov	r31, r11
 d0c:	ff 77       	andi	r31, 0x7F	; 127
 d0e:	3f 2e       	mov	r3, r31
 d10:	36 fe       	sbrs	r3, 6
 d12:	0d c0       	rjmp	.+26     	; 0xd2e <vfprintf+0x2e4>
 d14:	23 2d       	mov	r18, r3
 d16:	2e 7f       	andi	r18, 0xFE	; 254
 d18:	a2 2e       	mov	r10, r18
 d1a:	89 14       	cp	r8, r9
 d1c:	58 f4       	brcc	.+22     	; 0xd34 <vfprintf+0x2ea>
 d1e:	34 fe       	sbrs	r3, 4
 d20:	0b c0       	rjmp	.+22     	; 0xd38 <vfprintf+0x2ee>
 d22:	32 fc       	sbrc	r3, 2
 d24:	09 c0       	rjmp	.+18     	; 0xd38 <vfprintf+0x2ee>
 d26:	83 2d       	mov	r24, r3
 d28:	8e 7e       	andi	r24, 0xEE	; 238
 d2a:	a8 2e       	mov	r10, r24
 d2c:	05 c0       	rjmp	.+10     	; 0xd38 <vfprintf+0x2ee>
 d2e:	b8 2c       	mov	r11, r8
 d30:	a3 2c       	mov	r10, r3
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x2f0>
 d34:	b8 2c       	mov	r11, r8
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x2f0>
 d38:	b9 2c       	mov	r11, r9
 d3a:	a4 fe       	sbrs	r10, 4
 d3c:	0f c0       	rjmp	.+30     	; 0xd5c <vfprintf+0x312>
 d3e:	fe 01       	movw	r30, r28
 d40:	e8 0d       	add	r30, r8
 d42:	f1 1d       	adc	r31, r1
 d44:	80 81       	ld	r24, Z
 d46:	80 33       	cpi	r24, 0x30	; 48
 d48:	21 f4       	brne	.+8      	; 0xd52 <vfprintf+0x308>
 d4a:	9a 2d       	mov	r25, r10
 d4c:	99 7e       	andi	r25, 0xE9	; 233
 d4e:	a9 2e       	mov	r10, r25
 d50:	09 c0       	rjmp	.+18     	; 0xd64 <vfprintf+0x31a>
 d52:	a2 fe       	sbrs	r10, 2
 d54:	06 c0       	rjmp	.+12     	; 0xd62 <vfprintf+0x318>
 d56:	b3 94       	inc	r11
 d58:	b3 94       	inc	r11
 d5a:	04 c0       	rjmp	.+8      	; 0xd64 <vfprintf+0x31a>
 d5c:	8a 2d       	mov	r24, r10
 d5e:	86 78       	andi	r24, 0x86	; 134
 d60:	09 f0       	breq	.+2      	; 0xd64 <vfprintf+0x31a>
 d62:	b3 94       	inc	r11
 d64:	a3 fc       	sbrc	r10, 3
 d66:	10 c0       	rjmp	.+32     	; 0xd88 <vfprintf+0x33e>
 d68:	a0 fe       	sbrs	r10, 0
 d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0x32e>
 d6c:	b2 14       	cp	r11, r2
 d6e:	80 f4       	brcc	.+32     	; 0xd90 <vfprintf+0x346>
 d70:	28 0c       	add	r2, r8
 d72:	92 2c       	mov	r9, r2
 d74:	9b 18       	sub	r9, r11
 d76:	0d c0       	rjmp	.+26     	; 0xd92 <vfprintf+0x348>
 d78:	b2 14       	cp	r11, r2
 d7a:	58 f4       	brcc	.+22     	; 0xd92 <vfprintf+0x348>
 d7c:	b6 01       	movw	r22, r12
 d7e:	80 e2       	ldi	r24, 0x20	; 32
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	76 d0       	rcall	.+236    	; 0xe70 <fputc>
 d84:	b3 94       	inc	r11
 d86:	f8 cf       	rjmp	.-16     	; 0xd78 <vfprintf+0x32e>
 d88:	b2 14       	cp	r11, r2
 d8a:	18 f4       	brcc	.+6      	; 0xd92 <vfprintf+0x348>
 d8c:	2b 18       	sub	r2, r11
 d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfprintf+0x34a>
 d90:	98 2c       	mov	r9, r8
 d92:	21 2c       	mov	r2, r1
 d94:	a4 fe       	sbrs	r10, 4
 d96:	0f c0       	rjmp	.+30     	; 0xdb6 <vfprintf+0x36c>
 d98:	b6 01       	movw	r22, r12
 d9a:	80 e3       	ldi	r24, 0x30	; 48
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	68 d0       	rcall	.+208    	; 0xe70 <fputc>
 da0:	a2 fe       	sbrs	r10, 2
 da2:	16 c0       	rjmp	.+44     	; 0xdd0 <vfprintf+0x386>
 da4:	a1 fc       	sbrc	r10, 1
 da6:	03 c0       	rjmp	.+6      	; 0xdae <vfprintf+0x364>
 da8:	88 e7       	ldi	r24, 0x78	; 120
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x368>
 dae:	88 e5       	ldi	r24, 0x58	; 88
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	b6 01       	movw	r22, r12
 db4:	0c c0       	rjmp	.+24     	; 0xdce <vfprintf+0x384>
 db6:	8a 2d       	mov	r24, r10
 db8:	86 78       	andi	r24, 0x86	; 134
 dba:	51 f0       	breq	.+20     	; 0xdd0 <vfprintf+0x386>
 dbc:	a1 fe       	sbrs	r10, 1
 dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <vfprintf+0x37a>
 dc0:	8b e2       	ldi	r24, 0x2B	; 43
 dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <vfprintf+0x37c>
 dc4:	80 e2       	ldi	r24, 0x20	; 32
 dc6:	a7 fc       	sbrc	r10, 7
 dc8:	8d e2       	ldi	r24, 0x2D	; 45
 dca:	b6 01       	movw	r22, r12
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	50 d0       	rcall	.+160    	; 0xe70 <fputc>
 dd0:	89 14       	cp	r8, r9
 dd2:	30 f4       	brcc	.+12     	; 0xde0 <vfprintf+0x396>
 dd4:	b6 01       	movw	r22, r12
 dd6:	80 e3       	ldi	r24, 0x30	; 48
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	4a d0       	rcall	.+148    	; 0xe70 <fputc>
 ddc:	9a 94       	dec	r9
 dde:	f8 cf       	rjmp	.-16     	; 0xdd0 <vfprintf+0x386>
 de0:	8a 94       	dec	r8
 de2:	f3 01       	movw	r30, r6
 de4:	e8 0d       	add	r30, r8
 de6:	f1 1d       	adc	r31, r1
 de8:	80 81       	ld	r24, Z
 dea:	b6 01       	movw	r22, r12
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	40 d0       	rcall	.+128    	; 0xe70 <fputc>
 df0:	81 10       	cpse	r8, r1
 df2:	f6 cf       	rjmp	.-20     	; 0xde0 <vfprintf+0x396>
 df4:	22 20       	and	r2, r2
 df6:	09 f4       	brne	.+2      	; 0xdfa <vfprintf+0x3b0>
 df8:	4e ce       	rjmp	.-868    	; 0xa96 <vfprintf+0x4c>
 dfa:	b6 01       	movw	r22, r12
 dfc:	80 e2       	ldi	r24, 0x20	; 32
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	37 d0       	rcall	.+110    	; 0xe70 <fputc>
 e02:	2a 94       	dec	r2
 e04:	f7 cf       	rjmp	.-18     	; 0xdf4 <vfprintf+0x3aa>
 e06:	f6 01       	movw	r30, r12
 e08:	86 81       	ldd	r24, Z+6	; 0x06
 e0a:	97 81       	ldd	r25, Z+7	; 0x07
 e0c:	02 c0       	rjmp	.+4      	; 0xe12 <vfprintf+0x3c8>
 e0e:	8f ef       	ldi	r24, 0xFF	; 255
 e10:	9f ef       	ldi	r25, 0xFF	; 255
 e12:	2b 96       	adiw	r28, 0x0b	; 11
 e14:	0f b6       	in	r0, 0x3f	; 63
 e16:	f8 94       	cli
 e18:	de bf       	out	0x3e, r29	; 62
 e1a:	0f be       	out	0x3f, r0	; 63
 e1c:	cd bf       	out	0x3d, r28	; 61
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
 e22:	1f 91       	pop	r17
 e24:	0f 91       	pop	r16
 e26:	ff 90       	pop	r15
 e28:	ef 90       	pop	r14
 e2a:	df 90       	pop	r13
 e2c:	cf 90       	pop	r12
 e2e:	bf 90       	pop	r11
 e30:	af 90       	pop	r10
 e32:	9f 90       	pop	r9
 e34:	8f 90       	pop	r8
 e36:	7f 90       	pop	r7
 e38:	6f 90       	pop	r6
 e3a:	5f 90       	pop	r5
 e3c:	4f 90       	pop	r4
 e3e:	3f 90       	pop	r3
 e40:	2f 90       	pop	r2
 e42:	08 95       	ret

00000e44 <strnlen_P>:
 e44:	fc 01       	movw	r30, r24
 e46:	05 90       	lpm	r0, Z+
 e48:	61 50       	subi	r22, 0x01	; 1
 e4a:	70 40       	sbci	r23, 0x00	; 0
 e4c:	01 10       	cpse	r0, r1
 e4e:	d8 f7       	brcc	.-10     	; 0xe46 <strnlen_P+0x2>
 e50:	80 95       	com	r24
 e52:	90 95       	com	r25
 e54:	8e 0f       	add	r24, r30
 e56:	9f 1f       	adc	r25, r31
 e58:	08 95       	ret

00000e5a <strnlen>:
 e5a:	fc 01       	movw	r30, r24
 e5c:	61 50       	subi	r22, 0x01	; 1
 e5e:	70 40       	sbci	r23, 0x00	; 0
 e60:	01 90       	ld	r0, Z+
 e62:	01 10       	cpse	r0, r1
 e64:	d8 f7       	brcc	.-10     	; 0xe5c <strnlen+0x2>
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	8e 0f       	add	r24, r30
 e6c:	9f 1f       	adc	r25, r31
 e6e:	08 95       	ret

00000e70 <fputc>:
 e70:	0f 93       	push	r16
 e72:	1f 93       	push	r17
 e74:	cf 93       	push	r28
 e76:	df 93       	push	r29
 e78:	fb 01       	movw	r30, r22
 e7a:	23 81       	ldd	r18, Z+3	; 0x03
 e7c:	21 fd       	sbrc	r18, 1
 e7e:	03 c0       	rjmp	.+6      	; 0xe86 <fputc+0x16>
 e80:	8f ef       	ldi	r24, 0xFF	; 255
 e82:	9f ef       	ldi	r25, 0xFF	; 255
 e84:	2c c0       	rjmp	.+88     	; 0xede <fputc+0x6e>
 e86:	22 ff       	sbrs	r18, 2
 e88:	16 c0       	rjmp	.+44     	; 0xeb6 <fputc+0x46>
 e8a:	46 81       	ldd	r20, Z+6	; 0x06
 e8c:	57 81       	ldd	r21, Z+7	; 0x07
 e8e:	24 81       	ldd	r18, Z+4	; 0x04
 e90:	35 81       	ldd	r19, Z+5	; 0x05
 e92:	42 17       	cp	r20, r18
 e94:	53 07       	cpc	r21, r19
 e96:	44 f4       	brge	.+16     	; 0xea8 <fputc+0x38>
 e98:	a0 81       	ld	r26, Z
 e9a:	b1 81       	ldd	r27, Z+1	; 0x01
 e9c:	9d 01       	movw	r18, r26
 e9e:	2f 5f       	subi	r18, 0xFF	; 255
 ea0:	3f 4f       	sbci	r19, 0xFF	; 255
 ea2:	31 83       	std	Z+1, r19	; 0x01
 ea4:	20 83       	st	Z, r18
 ea6:	8c 93       	st	X, r24
 ea8:	26 81       	ldd	r18, Z+6	; 0x06
 eaa:	37 81       	ldd	r19, Z+7	; 0x07
 eac:	2f 5f       	subi	r18, 0xFF	; 255
 eae:	3f 4f       	sbci	r19, 0xFF	; 255
 eb0:	37 83       	std	Z+7, r19	; 0x07
 eb2:	26 83       	std	Z+6, r18	; 0x06
 eb4:	14 c0       	rjmp	.+40     	; 0xede <fputc+0x6e>
 eb6:	8b 01       	movw	r16, r22
 eb8:	ec 01       	movw	r28, r24
 eba:	fb 01       	movw	r30, r22
 ebc:	00 84       	ldd	r0, Z+8	; 0x08
 ebe:	f1 85       	ldd	r31, Z+9	; 0x09
 ec0:	e0 2d       	mov	r30, r0
 ec2:	09 95       	icall
 ec4:	89 2b       	or	r24, r25
 ec6:	e1 f6       	brne	.-72     	; 0xe80 <fputc+0x10>
 ec8:	d8 01       	movw	r26, r16
 eca:	16 96       	adiw	r26, 0x06	; 6
 ecc:	8d 91       	ld	r24, X+
 ece:	9c 91       	ld	r25, X
 ed0:	17 97       	sbiw	r26, 0x07	; 7
 ed2:	01 96       	adiw	r24, 0x01	; 1
 ed4:	17 96       	adiw	r26, 0x07	; 7
 ed6:	9c 93       	st	X, r25
 ed8:	8e 93       	st	-X, r24
 eda:	16 97       	sbiw	r26, 0x06	; 6
 edc:	ce 01       	movw	r24, r28
 ede:	df 91       	pop	r29
 ee0:	cf 91       	pop	r28
 ee2:	1f 91       	pop	r17
 ee4:	0f 91       	pop	r16
 ee6:	08 95       	ret

00000ee8 <__ultoa_invert>:
 ee8:	fa 01       	movw	r30, r20
 eea:	aa 27       	eor	r26, r26
 eec:	28 30       	cpi	r18, 0x08	; 8
 eee:	51 f1       	breq	.+84     	; 0xf44 <__ultoa_invert+0x5c>
 ef0:	20 31       	cpi	r18, 0x10	; 16
 ef2:	81 f1       	breq	.+96     	; 0xf54 <__ultoa_invert+0x6c>
 ef4:	e8 94       	clt
 ef6:	6f 93       	push	r22
 ef8:	6e 7f       	andi	r22, 0xFE	; 254
 efa:	6e 5f       	subi	r22, 0xFE	; 254
 efc:	7f 4f       	sbci	r23, 0xFF	; 255
 efe:	8f 4f       	sbci	r24, 0xFF	; 255
 f00:	9f 4f       	sbci	r25, 0xFF	; 255
 f02:	af 4f       	sbci	r26, 0xFF	; 255
 f04:	b1 e0       	ldi	r27, 0x01	; 1
 f06:	3e d0       	rcall	.+124    	; 0xf84 <__ultoa_invert+0x9c>
 f08:	b4 e0       	ldi	r27, 0x04	; 4
 f0a:	3c d0       	rcall	.+120    	; 0xf84 <__ultoa_invert+0x9c>
 f0c:	67 0f       	add	r22, r23
 f0e:	78 1f       	adc	r23, r24
 f10:	89 1f       	adc	r24, r25
 f12:	9a 1f       	adc	r25, r26
 f14:	a1 1d       	adc	r26, r1
 f16:	68 0f       	add	r22, r24
 f18:	79 1f       	adc	r23, r25
 f1a:	8a 1f       	adc	r24, r26
 f1c:	91 1d       	adc	r25, r1
 f1e:	a1 1d       	adc	r26, r1
 f20:	6a 0f       	add	r22, r26
 f22:	71 1d       	adc	r23, r1
 f24:	81 1d       	adc	r24, r1
 f26:	91 1d       	adc	r25, r1
 f28:	a1 1d       	adc	r26, r1
 f2a:	20 d0       	rcall	.+64     	; 0xf6c <__ultoa_invert+0x84>
 f2c:	09 f4       	brne	.+2      	; 0xf30 <__ultoa_invert+0x48>
 f2e:	68 94       	set
 f30:	3f 91       	pop	r19
 f32:	2a e0       	ldi	r18, 0x0A	; 10
 f34:	26 9f       	mul	r18, r22
 f36:	11 24       	eor	r1, r1
 f38:	30 19       	sub	r19, r0
 f3a:	30 5d       	subi	r19, 0xD0	; 208
 f3c:	31 93       	st	Z+, r19
 f3e:	de f6       	brtc	.-74     	; 0xef6 <__ultoa_invert+0xe>
 f40:	cf 01       	movw	r24, r30
 f42:	08 95       	ret
 f44:	46 2f       	mov	r20, r22
 f46:	47 70       	andi	r20, 0x07	; 7
 f48:	40 5d       	subi	r20, 0xD0	; 208
 f4a:	41 93       	st	Z+, r20
 f4c:	b3 e0       	ldi	r27, 0x03	; 3
 f4e:	0f d0       	rcall	.+30     	; 0xf6e <__ultoa_invert+0x86>
 f50:	c9 f7       	brne	.-14     	; 0xf44 <__ultoa_invert+0x5c>
 f52:	f6 cf       	rjmp	.-20     	; 0xf40 <__ultoa_invert+0x58>
 f54:	46 2f       	mov	r20, r22
 f56:	4f 70       	andi	r20, 0x0F	; 15
 f58:	40 5d       	subi	r20, 0xD0	; 208
 f5a:	4a 33       	cpi	r20, 0x3A	; 58
 f5c:	18 f0       	brcs	.+6      	; 0xf64 <__ultoa_invert+0x7c>
 f5e:	49 5d       	subi	r20, 0xD9	; 217
 f60:	31 fd       	sbrc	r19, 1
 f62:	40 52       	subi	r20, 0x20	; 32
 f64:	41 93       	st	Z+, r20
 f66:	02 d0       	rcall	.+4      	; 0xf6c <__ultoa_invert+0x84>
 f68:	a9 f7       	brne	.-22     	; 0xf54 <__ultoa_invert+0x6c>
 f6a:	ea cf       	rjmp	.-44     	; 0xf40 <__ultoa_invert+0x58>
 f6c:	b4 e0       	ldi	r27, 0x04	; 4
 f6e:	a6 95       	lsr	r26
 f70:	97 95       	ror	r25
 f72:	87 95       	ror	r24
 f74:	77 95       	ror	r23
 f76:	67 95       	ror	r22
 f78:	ba 95       	dec	r27
 f7a:	c9 f7       	brne	.-14     	; 0xf6e <__ultoa_invert+0x86>
 f7c:	00 97       	sbiw	r24, 0x00	; 0
 f7e:	61 05       	cpc	r22, r1
 f80:	71 05       	cpc	r23, r1
 f82:	08 95       	ret
 f84:	9b 01       	movw	r18, r22
 f86:	ac 01       	movw	r20, r24
 f88:	0a 2e       	mov	r0, r26
 f8a:	06 94       	lsr	r0
 f8c:	57 95       	ror	r21
 f8e:	47 95       	ror	r20
 f90:	37 95       	ror	r19
 f92:	27 95       	ror	r18
 f94:	ba 95       	dec	r27
 f96:	c9 f7       	brne	.-14     	; 0xf8a <__ultoa_invert+0xa2>
 f98:	62 0f       	add	r22, r18
 f9a:	73 1f       	adc	r23, r19
 f9c:	84 1f       	adc	r24, r20
 f9e:	95 1f       	adc	r25, r21
 fa0:	a0 1d       	adc	r26, r0
 fa2:	08 95       	ret

00000fa4 <_exit>:
 fa4:	f8 94       	cli

00000fa6 <__stop_program>:
 fa6:	ff cf       	rjmp	.-2      	; 0xfa6 <__stop_program>
