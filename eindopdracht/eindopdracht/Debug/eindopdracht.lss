
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000cf2  00000d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  00000d96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b8  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c86  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8c  00000000  00000000  000033d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00004064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  000043a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b63  00000000  00000000  00004a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000055ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	00 00       	nop
   4:	75 c1       	rjmp	.+746    	; 0x2f0 <__vector_1>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	12 c1       	rjmp	.+548    	; 0x256 <__vector_12>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5c 02       	muls	r21, r28
  8e:	98 02       	muls	r25, r24
  90:	5f 02       	muls	r21, r31
  92:	62 02       	muls	r22, r18
  94:	65 02       	muls	r22, r21
  96:	68 02       	muls	r22, r24
  98:	6b 02       	muls	r22, r27
  9a:	6e 02       	muls	r22, r30
  9c:	71 02       	muls	r23, r17
  9e:	74 02       	muls	r23, r20
  a0:	95 02       	muls	r25, r21
  a2:	77 02       	muls	r23, r23
  a4:	95 02       	muls	r25, r21
  a6:	7a 02       	muls	r23, r26
  a8:	7d 02       	muls	r23, r29
  aa:	80 02       	muls	r24, r16
  ac:	83 02       	muls	r24, r19
  ae:	86 02       	muls	r24, r22
  b0:	89 02       	muls	r24, r25
  b2:	8c 02       	muls	r24, r28
  b4:	8f 02       	muls	r24, r31
  b6:	95 02       	muls	r25, r21
  b8:	95 02       	muls	r25, r21
  ba:	95 02       	muls	r25, r21
  bc:	92 02       	muls	r25, r18

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d0 e1       	ldi	r29, 0x10	; 16
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e2 ef       	ldi	r30, 0xF2	; 242
  d2:	fc e0       	ldi	r31, 0x0C	; 12
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
  da:	07 90       	elpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 31       	cpi	r26, 0x10	; 16
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a0 e1       	ldi	r26, 0x10	; 16
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a6 31       	cpi	r26, 0x16	; 22
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	13 d1       	rcall	.+550    	; 0x31c <main>
  f6:	fb c5       	rjmp	.+3062   	; 0xcee <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <adc_init>:
#include <avr/io.h>
#include "adc.h"


void adc_init(){
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  fe:	86 ee       	ldi	r24, 0xE6	; 230
 100:	86 b9       	out	0x06, r24	; 6
 102:	08 95       	ret

00000104 <writeInitCommand_strobe_e>:
#include <stdio.h>
#include "lcd.h"

void writeInitCommand_strobe_e(unsigned char byte)
{
	byte &= 0xF0;
 104:	80 7f       	andi	r24, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
 106:	88 60       	ori	r24, 0x08	; 8
 108:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	97 e0       	ldi	r25, 0x07	; 7
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <writeInitCommand_strobe_e+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <writeInitCommand_strobe_e+0x10>
 114:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 116:	85 b3       	in	r24, 0x15	; 21
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <writeInitCommand_strobe_e+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <writeInitCommand_strobe_e+0x22>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <write2NibbleCommand_strobe_e>:
void write2NibbleCommand_strobe_e(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte &= 0xF0;
 12a:	98 2f       	mov	r25, r24
 12c:	90 7f       	andi	r25, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
 12e:	98 60       	ori	r25, 0x08	; 8
 130:	95 bb       	out	0x15, r25	; 21
 132:	ef ec       	ldi	r30, 0xCF	; 207
 134:	f7 e0       	ldi	r31, 0x07	; 7
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <write2NibbleCommand_strobe_e+0xc>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <write2NibbleCommand_strobe_e+0x12>
 13c:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 13e:	95 b3       	in	r25, 0x15	; 21
 140:	97 7f       	andi	r25, 0xF7	; 247
 142:	95 bb       	out	0x15, r25	; 21
 144:	ef ec       	ldi	r30, 0xCF	; 207
 146:	f7 e0       	ldi	r31, 0x07	; 7
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <write2NibbleCommand_strobe_e+0x1e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <write2NibbleCommand_strobe_e+0x24>
 14e:	00 00       	nop
	_delay_ms(1);				// nodig?
	
	// Second nibble
	byte = (tmpByte<<4);
 150:	82 95       	swap	r24
 152:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	PORTC = byte | (1<<LCD_E);	// E high
 154:	88 60       	ori	r24, 0x08	; 8
 156:	85 bb       	out	0x15, r24	; 21
 158:	8f ec       	ldi	r24, 0xCF	; 207
 15a:	97 e0       	ldi	r25, 0x07	; 7
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <write2NibbleCommand_strobe_e+0x32>
 160:	00 c0       	rjmp	.+0      	; 0x162 <write2NibbleCommand_strobe_e+0x38>
 162:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 164:	85 b3       	in	r24, 0x15	; 21
 166:	87 7f       	andi	r24, 0xF7	; 247
 168:	85 bb       	out	0x15, r24	; 21
 16a:	ef ec       	ldi	r30, 0xCF	; 207
 16c:	f7 e0       	ldi	r31, 0x07	; 7
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <write2NibbleCommand_strobe_e+0x44>
 172:	00 c0       	rjmp	.+0      	; 0x174 <write2NibbleCommand_strobe_e+0x4a>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <write2NibbleData_Strobe_E>:
void write2NibbleData_Strobe_E(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte = byte & 0xF0;
 178:	98 2f       	mov	r25, r24
 17a:	90 7f       	andi	r25, 0xF0	; 240
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
 17c:	9c 60       	ori	r25, 0x0C	; 12
 17e:	95 bb       	out	0x15, r25	; 21
 180:	ef ec       	ldi	r30, 0xCF	; 207
 182:	f7 e0       	ldi	r31, 0x07	; 7
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <write2NibbleData_Strobe_E+0xc>
 188:	00 c0       	rjmp	.+0      	; 0x18a <write2NibbleData_Strobe_E+0x12>
 18a:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 18c:	95 b3       	in	r25, 0x15	; 21
 18e:	97 7f       	andi	r25, 0xF7	; 247
 190:	95 bb       	out	0x15, r25	; 21
 192:	ef ec       	ldi	r30, 0xCF	; 207
 194:	f7 e0       	ldi	r31, 0x07	; 7
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <write2NibbleData_Strobe_E+0x1e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <write2NibbleData_Strobe_E+0x24>
 19c:	00 00       	nop
	_delay_ms(1);				// nodig?

	// Second nibble
	byte = (tmpByte<<4);
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
 1a2:	8c 60       	ori	r24, 0x0C	; 12
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	8f ec       	ldi	r24, 0xCF	; 207
 1a8:	97 e0       	ldi	r25, 0x07	; 7
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <write2NibbleData_Strobe_E+0x32>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <write2NibbleData_Strobe_E+0x38>
 1b0:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	ef ec       	ldi	r30, 0xCF	; 207
 1ba:	f7 e0       	ldi	r31, 0x07	; 7
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <write2NibbleData_Strobe_E+0x44>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <write2NibbleData_Strobe_E+0x4a>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <init_4bits_mode>:

void init_4bits_mode(void)
{
	// Step 2 (table 12)
	// function set
	writeInitCommand_strobe_e(0x20);
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	9d df       	rcall	.-198    	; 0x104 <writeInitCommand_strobe_e>

	// Step 3 (table 12)
	// function set
	write2NibbleCommand_strobe_e(0x28);
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	ae df       	rcall	.-164    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Display on/off control
	write2NibbleCommand_strobe_e(0x0F);
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	ac df       	rcall	.-168    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Entry mode set
	write2NibbleCommand_strobe_e(0x06);
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	aa cf       	rjmp	.-172    	; 0x12a <write2NibbleCommand_strobe_e>
 1d6:	08 95       	ret

000001d8 <lcd_write_string>:
 1d8:	cf 93       	push	r28
}

void lcd_write_string(char *str)
{
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	// of met een for:
	for(;*str; str++){
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcd_write_string+0xc>
		write2NibbleData_Strobe_E(*str);
 1e0:	cb df       	rcall	.-106    	; 0x178 <write2NibbleData_Strobe_E>
}

void lcd_write_string(char *str)
{
	// of met een for:
	for(;*str; str++){
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	88 81       	ld	r24, Y
 1e6:	81 11       	cpse	r24, r1
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <lcd_write_string+0x8>
		write2NibbleData_Strobe_E(*str);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <lcd_write_integer>:

void lcd_write_integer(int data)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	60 97       	sbiw	r28, 0x10	; 16
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
	char data_out[16];
	memset(data_out, 0, sizeof(data_out[0]) * 16);
 208:	8e 01       	movw	r16, r28
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	20 e1       	ldi	r18, 0x10	; 16
 210:	f8 01       	movw	r30, r16
 212:	11 92       	st	Z+, r1
 214:	2a 95       	dec	r18
 216:	e9 f7       	brne	.-6      	; 0x212 <lcd_write_integer+0x22>
	sprintf(data_out, "%u", data);
 218:	9f 93       	push	r25
 21a:	8f 93       	push	r24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	9f 93       	push	r25
 222:	8f 93       	push	r24
 224:	1f 93       	push	r17
 226:	0f 93       	push	r16
 228:	87 d2       	rcall	.+1294   	; 0x738 <sprintf>
	lcd_write_string(data_out);
 22a:	c8 01       	movw	r24, r16
 22c:	d5 df       	rcall	.-86     	; 0x1d8 <lcd_write_string>
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	60 96       	adiw	r28, 0x10	; 16
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <lcd_clear>:

void lcd_clear()
{
	write2NibbleCommand_strobe_e (0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	6b cf       	rjmp	.-298    	; 0x12a <write2NibbleCommand_strobe_e>
 254:	08 95       	ret

00000256 <__vector_12>:
volatile int msCount = 0;
bool right_direction = true;

int number = 0;

ISR( TIMER1_COMPA_vect ) {
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	0b b6       	in	r0, 0x3b	; 59
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	//writeLedDisplay(msCount);
	number = ADCH << 2;
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 28c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	number |= ADCL >> 6;
 290:	24 b1       	in	r18, 0x04	; 4
 292:	22 95       	swap	r18
 294:	26 95       	lsr	r18
 296:	26 95       	lsr	r18
 298:	23 70       	andi	r18, 0x03	; 3
 29a:	82 2b       	or	r24, r18
 29c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	timer_set_compare_value(20*number);
 2a4:	24 e1       	ldi	r18, 0x14	; 20
 2a6:	ac 01       	movw	r20, r24
 2a8:	24 9f       	mul	r18, r20
 2aa:	c0 01       	movw	r24, r0
 2ac:	25 9f       	mul	r18, r21
 2ae:	90 0d       	add	r25, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	fa d1       	rcall	.+1012   	; 0x6a8 <timer_set_compare_value>
	
	if(right_direction){
 2b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b8:	88 23       	and	r24, r24
 2ba:	21 f0       	breq	.+8      	; 0x2c4 <__vector_12+0x6e>
		moveText(1);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 d1       	rcall	.+768    	; 0x5c2 <moveText>
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <__vector_12+0x74>
	} else {
		moveText(-1);
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	9f ef       	ldi	r25, 0xFF	; 255
 2c8:	7c d1       	rcall	.+760    	; 0x5c2 <moveText>
	}
	
	
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0b be       	out	0x3b, r0	; 59
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_1>:

ISR( INT0_vect ) {
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	8f 93       	push	r24
    if(right_direction){
 2fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 300:	88 23       	and	r24, r24
 302:	19 f0       	breq	.+6      	; 0x30a <__vector_1+0x1a>
		right_direction = false;
 304:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 308:	03 c0       	rjmp	.+6      	; 0x310 <__vector_1+0x20>
	} else {
		right_direction = true;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <main>:

int main(void)
{
	//lcd
	DDRC = 0xFF;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 320:	15 ba       	out	0x15, r1	; 21
	
	init_4bits_mode();
 322:	51 df       	rcall	.-350    	; 0x1c6 <init_4bits_mode>
	lcd_clear();
 324:	95 df       	rcall	.-214    	; 0x250 <lcd_clear>
 326:	81 e0       	ldi	r24, 0x01	; 1
	
	//spi
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 328:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 32a:	79 d0       	rcall	.+242    	; 0x41e <spi_masterInit>
 32c:	ad d0       	rcall	.+346    	; 0x488 <displayDriverInit>
	displayDriverInit();            // Initialize display chip
 32e:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 330:	09 c0       	rjmp	.+18     	; 0x344 <main+0x28>
	{
		spi_slaveSelect(0); 		// Select display chip
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	83 d0       	rcall	.+262    	; 0x43c <spi_slaveSelect>
		spi_write(i);  				// 	digit adress: (digit place)
 336:	8c 2f       	mov	r24, r28
 338:	7d d0       	rcall	.+250    	; 0x434 <spi_write>
		spi_write(0);				// 	digit value: 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	7b d0       	rcall	.+246    	; 0x434 <spi_write>
 33e:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0);		// Deselect display chip
 340:	89 d0       	rcall	.+274    	; 0x454 <spi_slaveDeSelect>
 342:	cf 5f       	subi	r28, 0xFF	; 255
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	displayDriverInit();            // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 344:	c5 30       	cpi	r28, 0x05	; 5
 346:	a8 f3       	brcs	.-22     	; 0x332 <main+0x16>
		spi_slaveDeSelect(0);		// Deselect display chip
	}
	
	char *text = "a   ";
	
	setText(text);
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	34 d1       	rcall	.+616    	; 0x5b6 <setText>
 34e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
		
	//adc
	DDRF = 0x00;				// set PORTF for input (ADC)
 352:	8f ef       	ldi	r24, 0xFF	; 255
	DDRA = 0xFF;
 354:	8a bb       	out	0x1a, r24	; 26
 356:	d1 de       	rcall	.-606    	; 0xfa <adc_init>
	//DDRD = 0xFF;
	adc_init();
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	90 e0       	ldi	r25, 0x00	; 0
	
	number = ADCH << 2;
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 368:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 36c:	24 b1       	in	r18, 0x04	; 4
 36e:	22 95       	swap	r18
	number |= ADCL >> 6;
 370:	26 95       	lsr	r18
 372:	26 95       	lsr	r18
 374:	23 70       	andi	r18, 0x03	; 3
 376:	82 2b       	or	r24, r18
 378:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 37c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 380:	88 d1       	rcall	.+784    	; 0x692 <timer_init>
	
	//timer
	//DDRD = 0xFF;
	timer_init();
 382:	85 b1       	in	r24, 0x05	; 5
 384:	90 e0       	ldi	r25, 0x00	; 0
	number = ADCH << 2;
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 392:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 396:	24 b1       	in	r18, 0x04	; 4
 398:	22 95       	swap	r18
	number |= ADCL >> 6;
 39a:	26 95       	lsr	r18
 39c:	26 95       	lsr	r18
 39e:	23 70       	andi	r18, 0x03	; 3
 3a0:	82 2b       	or	r24, r18
 3a2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 3a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 3aa:	9c 01       	movw	r18, r24
	timer_set_compare_value(6*number);
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	82 0f       	add	r24, r18
 3b2:	93 1f       	adc	r25, r19
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	77 d1       	rcall	.+750    	; 0x6a8 <timer_set_compare_value>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	82 b9       	out	0x02, r24	; 2
	
	//interupt
	// Init I/O
	DDRE = 0x01;			// PORTE 0 input	
 3be:	ea e6       	ldi	r30, 0x6A	; 106

	// Init Interrupt hardware
	EICRA |= 0x03;			// INT0 rising edge
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	83 60       	ori	r24, 0x03	; 3
 3c6:	80 83       	st	Z, r24
	EIMSK |= 0x01;			// Enable INT0
 3c8:	89 b7       	in	r24, 0x39	; 57
 3ca:	81 60       	ori	r24, 0x01	; 1
	sei();
	
    while (1) 
    {

		PORTA = ADCH;
 3cc:	89 bf       	out	0x39, r24	; 57
 3ce:	78 94       	sei
		//PORTD = ADCL;
		
		lcd_clear();
 3d0:	85 b1       	in	r24, 0x05	; 5
		lcd_write_string("a");
 3d2:	8b bb       	out	0x1b, r24	; 27
 3d4:	3d df       	rcall	.-390    	; 0x250 <lcd_clear>
 3d6:	89 e0       	ldi	r24, 0x09	; 9
		wait(3);
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	fe de       	rcall	.-516    	; 0x1d8 <lcd_write_string>
 3dc:	83 e0       	ldi	r24, 0x03	; 3
		lcd_write_string(" - ");
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0f d0       	rcall	.+30     	; 0x400 <wait>
 3e2:	8b e0       	ldi	r24, 0x0B	; 11
 3e4:	91 e0       	ldi	r25, 0x01	; 1
		wait(3);
 3e6:	f8 de       	rcall	.-528    	; 0x1d8 <lcd_write_string>
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	09 d0       	rcall	.+18     	; 0x400 <wait>
		lcd_write_integer(number);
 3ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3f2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 3f6:	fc de       	rcall	.-520    	; 0x1f0 <lcd_write_integer>
 3f8:	88 ee       	ldi	r24, 0xE8	; 232

		wait(1000);
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	01 d0       	rcall	.+2      	; 0x400 <wait>
 3fe:	e8 cf       	rjmp	.-48     	; 0x3d0 <main+0xb4>

00000400 <wait>:
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
void displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
 404:	08 c0       	rjmp	.+16     	; 0x416 <wait+0x16>
 406:	ef ec       	ldi	r30, 0xCF	; 207
 408:	f7 e0       	ldi	r31, 0x07	; 7
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <wait+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <wait+0x10>
 410:	00 00       	nop
 412:	2f 5f       	subi	r18, 0xFF	; 255
 414:	3f 4f       	sbci	r19, 0xFF	; 255
 416:	28 17       	cp	r18, r24
 418:	39 07       	cpc	r19, r25
 41a:	ac f3       	brlt	.-22     	; 0x406 <wait+0x6>
 41c:	08 95       	ret

0000041e <spi_masterInit>:
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	87 bb       	out	0x17, r24	; 23
 422:	87 b3       	in	r24, 0x17	; 23
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	87 bb       	out	0x17, r24	; 23
 428:	88 b3       	in	r24, 0x18	; 24
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	88 bb       	out	0x18, r24	; 24
 42e:	82 e5       	ldi	r24, 0x52	; 82
 430:	8d b9       	out	0x0d, r24	; 13
 432:	08 95       	ret

00000434 <spi_write>:
 434:	8f b9       	out	0x0f, r24	; 15
 436:	77 9b       	sbis	0x0e, 7	; 14
 438:	fe cf       	rjmp	.-4      	; 0x436 <spi_write+0x2>
 43a:	08 95       	ret

0000043c <spi_slaveSelect>:
 43c:	98 b3       	in	r25, 0x18	; 24
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <spi_slaveSelect+0xc>
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <spi_slaveSelect+0x8>
 44c:	20 95       	com	r18
 44e:	29 23       	and	r18, r25
 450:	28 bb       	out	0x18, r18	; 24
 452:	08 95       	ret

00000454 <spi_slaveDeSelect>:
 454:	98 b3       	in	r25, 0x18	; 24
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <spi_slaveDeSelect+0xc>
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <spi_slaveDeSelect+0x8>
 464:	29 2b       	or	r18, r25
 466:	28 bb       	out	0x18, r18	; 24
 468:	08 95       	ret

0000046a <spi_writeWord>:
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	d8 2f       	mov	r29, r24
 470:	c6 2f       	mov	r28, r22
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	e3 df       	rcall	.-58     	; 0x43c <spi_slaveSelect>
 476:	8d 2f       	mov	r24, r29
 478:	dd df       	rcall	.-70     	; 0x434 <spi_write>
 47a:	8c 2f       	mov	r24, r28
 47c:	db df       	rcall	.-74     	; 0x434 <spi_write>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	e9 df       	rcall	.-46     	; 0x454 <spi_slaveDeSelect>
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <displayDriverInit>:
 488:	6f ef       	ldi	r22, 0xFF	; 255
 48a:	89 e0       	ldi	r24, 0x09	; 9
 48c:	ee df       	rcall	.-36     	; 0x46a <spi_writeWord>
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	eb df       	rcall	.-42     	; 0x46a <spi_writeWord>
 494:	63 e0       	ldi	r22, 0x03	; 3
 496:	8b e0       	ldi	r24, 0x0B	; 11
 498:	e8 df       	rcall	.-48     	; 0x46a <spi_writeWord>
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	8c e0       	ldi	r24, 0x0C	; 12
 49e:	e5 cf       	rjmp	.-54     	; 0x46a <spi_writeWord>
 4a0:	08 95       	ret

000004a2 <getCharacterCode>:
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
	writeText(newText);
}

int getCharacterCode(char character) {
	switch (toupper(character)) {
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	36 d1       	rcall	.+620    	; 0x712 <toupper>
 4a6:	81 54       	subi	r24, 0x41	; 65
 4a8:	91 09       	sbc	r25, r1
 4aa:	89 31       	cpi	r24, 0x19	; 25
 4ac:	91 05       	cpc	r25, r1
 4ae:	e8 f5       	brcc	.+122    	; 0x52a <getCharacterCode+0x88>
 4b0:	8a 5b       	subi	r24, 0xBA	; 186
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	fc 01       	movw	r30, r24
 4b6:	10 c1       	rjmp	.+544    	; 0x6d8 <__tablejump2__>
		case 'A':
			return 0x77;
 4b8:	87 e7       	ldi	r24, 0x77	; 119
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	08 95       	ret
		case 'B':
			return 0x1F;
		case 'C':
			return 0x4E;
 4be:	8e e4       	ldi	r24, 0x4E	; 78
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	08 95       	ret
		case 'D':
			return 0x3D;
 4c4:	8d e3       	ldi	r24, 0x3D	; 61
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	08 95       	ret
		case 'E':
			return 0x4F;
 4ca:	8f e4       	ldi	r24, 0x4F	; 79
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	08 95       	ret
		case 'F':
			return 0x47;
 4d0:	87 e4       	ldi	r24, 0x47	; 71
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	08 95       	ret
		case 'G':
			return 0x5E;
 4d6:	8e e5       	ldi	r24, 0x5E	; 94
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	08 95       	ret
		case 'H':
			return 0x37;
 4dc:	87 e3       	ldi	r24, 0x37	; 55
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	08 95       	ret
		case 'I':
			return 0x06;
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	08 95       	ret
		case 'J':
			return 0x3C;
 4e8:	8c e3       	ldi	r24, 0x3C	; 60
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	08 95       	ret
		case 'L':
			return 0x0E;
 4ee:	8e e0       	ldi	r24, 0x0E	; 14
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	08 95       	ret
		case 'N':
			return 0x15;
 4f4:	85 e1       	ldi	r24, 0x15	; 21
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	08 95       	ret
		case 'O':
			return 0x7E;
 4fa:	8e e7       	ldi	r24, 0x7E	; 126
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	08 95       	ret
		case 'P':
			return 0x67;
 500:	87 e6       	ldi	r24, 0x67	; 103
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	08 95       	ret
		case 'Q':
			return 0x73;
 506:	83 e7       	ldi	r24, 0x73	; 115
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	08 95       	ret
		case 'R':
			return 0x05;
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	08 95       	ret
		case 'S':
			return 0x5B;
 512:	8b e5       	ldi	r24, 0x5B	; 91
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	08 95       	ret
		case 'T':
			return 0x0F;
 518:	8f e0       	ldi	r24, 0x0F	; 15
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	08 95       	ret
		case 'U':
			return 0x3E;
 51e:	8e e3       	ldi	r24, 0x3E	; 62
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	08 95       	ret
		case 'Y':
			return 0x3B;
 524:	8b e3       	ldi	r24, 0x3B	; 59
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	08 95       	ret
		default:
			return 0x00;  // return 0x00 for any other character
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	08 95       	ret
int getCharacterCode(char character) {
	switch (toupper(character)) {
		case 'A':
			return 0x77;
		case 'B':
			return 0x1F;
 530:	8f e1       	ldi	r24, 0x1F	; 31
 532:	90 e0       	ldi	r25, 0x00	; 0
		case 'Y':
			return 0x3B;
		default:
			return 0x00;  // return 0x00 for any other character
	}
}
 534:	08 95       	ret

00000536 <writeCharacter>:
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
}

void writeCharacter(char character, char index) {
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	d8 2f       	mov	r29, r24
 53c:	c6 2f       	mov	r28, r22
	spi_writeWord(0x9, 0);
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	89 e0       	ldi	r24, 0x09	; 9
 542:	93 df       	rcall	.-218    	; 0x46a <spi_writeWord>
	spi_writeWord(index, getCharacterCode(character));
 544:	8d 2f       	mov	r24, r29
 546:	ad df       	rcall	.-166    	; 0x4a2 <getCharacterCode>
 548:	68 2f       	mov	r22, r24
 54a:	8c 2f       	mov	r24, r28
 54c:	8e df       	rcall	.-228    	; 0x46a <spi_writeWord>
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <writeText>:
void setText(char *str) {
	text = str;
	writeText(str);
}

void writeText(char *string) {
 554:	ef 92       	push	r14
 556:	ff 92       	push	r15
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	ec 01       	movw	r28, r24
	while(strlen(string) < 4){
 562:	04 c0       	rjmp	.+8      	; 0x56c <writeText+0x18>
		strcat(string, (char*)' ');
 564:	60 e2       	ldi	r22, 0x20	; 32
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	ce 01       	movw	r24, r28
 56a:	db d0       	rcall	.+438    	; 0x722 <strcat>
	text = str;
	writeText(str);
}

void writeText(char *string) {
	while(strlen(string) < 4){
 56c:	fe 01       	movw	r30, r28
 56e:	01 90       	ld	r0, Z+
 570:	00 20       	and	r0, r0
 572:	e9 f7       	brne	.-6      	; 0x56e <writeText+0x1a>
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	ec 1b       	sub	r30, r28
 578:	fd 0b       	sbc	r31, r29
 57a:	34 97       	sbiw	r30, 0x04	; 4
 57c:	98 f3       	brcs	.-26     	; 0x564 <writeText+0x10>
 57e:	00 e0       	ldi	r16, 0x00	; 0
 580:	10 e0       	ldi	r17, 0x00	; 0
 582:	68 94       	set
 584:	ee 24       	eor	r14, r14
 586:	e2 f8       	bld	r14, 2
 588:	f1 2c       	mov	r15, r1
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <writeText+0x4e>
		strcat(string, (char*)' ');
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
		writeCharacter(string[i], j);
 58c:	fe 01       	movw	r30, r28
 58e:	e0 0f       	add	r30, r16
 590:	f1 1f       	adc	r31, r17
 592:	6e 2d       	mov	r22, r14
 594:	80 81       	ld	r24, Z
 596:	cf df       	rcall	.-98     	; 0x536 <writeCharacter>
	while(strlen(string) < 4){
		strcat(string, (char*)' ');
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	e8 1a       	sub	r14, r24
 5a0:	f1 08       	sbc	r15, r1
 5a2:	04 30       	cpi	r16, 0x04	; 4
 5a4:	11 05       	cpc	r17, r1
 5a6:	94 f3       	brlt	.-28     	; 0x58c <writeText+0x38>
		writeCharacter(string[i], j);
	}
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	08 95       	ret

000005b6 <setText>:
void writeCharacter(char character, char index) {
	spi_writeWord(0x9, 0);
	spi_writeWord(index, getCharacterCode(character));
}
void setText(char *str) {
	text = str;
 5b6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <text+0x1>
 5ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <text>
	writeText(str);
 5be:	ca cf       	rjmp	.-108    	; 0x554 <writeText>
 5c0:	08 95       	ret

000005c2 <moveText>:
	for (int i = 0; i < 4; i++, j--) {
		writeCharacter(string[i], j);
	}
}

void moveText(int steps) {
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <moveText+0xa>
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <moveText+0xc>
 5ce:	1f 92       	push	r1
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
	int len = strlen(text)+1;
 5d4:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <text>
 5d8:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <text+0x1>
 5dc:	f8 01       	movw	r30, r16
 5de:	01 90       	ld	r0, Z+
 5e0:	00 20       	and	r0, r0
 5e2:	e9 f7       	brne	.-6      	; 0x5de <moveText+0x1c>
 5e4:	31 97       	sbiw	r30, 0x01	; 1
 5e6:	9f 01       	movw	r18, r30
 5e8:	20 1b       	sub	r18, r16
 5ea:	31 0b       	sbc	r19, r17
 5ec:	2f 5f       	subi	r18, 0xFF	; 255
 5ee:	3f 4f       	sbci	r19, 0xFF	; 255
 5f0:	62 2f       	mov	r22, r18
 5f2:	73 2f       	mov	r23, r19
	position+=steps;
 5f4:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <position>
 5f8:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <position+0x1>
 5fc:	48 0f       	add	r20, r24
 5fe:	59 1f       	adc	r21, r25
 600:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <position+0x1>
 604:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <position>
	if(position < 0){
 608:	55 23       	and	r21, r21
 60a:	3c f4       	brge	.+14     	; 0x61a <moveText+0x58>
		position = len + steps-1;
 60c:	82 0f       	add	r24, r18
 60e:	93 1f       	adc	r25, r19
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <position+0x1>
 616:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <position>
	}
	position%=len;
 61a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <position>
 61e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <position+0x1>
 622:	47 d0       	rcall	.+142    	; 0x6b2 <__divmodhi4>
 624:	fc 01       	movw	r30, r24
 626:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <position+0x1>
 62a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <position>
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
 62e:	21 50       	subi	r18, 0x01	; 1
 630:	31 09       	sbc	r19, r1
 632:	b9 01       	movw	r22, r18
 634:	3e d0       	rcall	.+124    	; 0x6b2 <__divmodhi4>
 636:	d8 01       	movw	r26, r16
 638:	a8 0f       	add	r26, r24
 63a:	b9 1f       	adc	r27, r25
 63c:	8c 91       	ld	r24, X
 63e:	89 83       	std	Y+1, r24	; 0x01
 640:	cf 01       	movw	r24, r30
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	b9 01       	movw	r22, r18
 646:	35 d0       	rcall	.+106    	; 0x6b2 <__divmodhi4>
 648:	d8 01       	movw	r26, r16
 64a:	a8 0f       	add	r26, r24
 64c:	b9 1f       	adc	r27, r25
 64e:	8c 91       	ld	r24, X
 650:	8a 83       	std	Y+2, r24	; 0x02
 652:	cf 01       	movw	r24, r30
 654:	02 96       	adiw	r24, 0x02	; 2
 656:	b9 01       	movw	r22, r18
 658:	2c d0       	rcall	.+88     	; 0x6b2 <__divmodhi4>
 65a:	d8 01       	movw	r26, r16
 65c:	a8 0f       	add	r26, r24
 65e:	b9 1f       	adc	r27, r25
 660:	8c 91       	ld	r24, X
 662:	8b 83       	std	Y+3, r24	; 0x03
 664:	cf 01       	movw	r24, r30
 666:	03 96       	adiw	r24, 0x03	; 3
 668:	b9 01       	movw	r22, r18
 66a:	23 d0       	rcall	.+70     	; 0x6b2 <__divmodhi4>
 66c:	f8 01       	movw	r30, r16
 66e:	e8 0f       	add	r30, r24
 670:	f9 1f       	adc	r31, r25
 672:	80 81       	ld	r24, Z
 674:	8c 83       	std	Y+4, r24	; 0x04
 676:	1d 82       	std	Y+5, r1	; 0x05
	writeText(newText);
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	6b df       	rcall	.-298    	; 0x554 <writeText>
 67e:	0f 90       	pop	r0
}
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	08 95       	ret

00000692 <timer_init>:
#include "timer.h"
#include <avr/io.h>
#include <avr/interrupt.h>
 
void timer_init(){
	OCR1A = 31250; // 16-bits compare value of counter 1
 692:	82 e1       	ldi	r24, 0x12	; 18
 694:	9a e7       	ldi	r25, 0x7A	; 122
 696:	9b bd       	out	0x2b, r25	; 43
 698:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0b00000000;
 69a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // // Initialize T1: timer, prescaler = 256, compare output disconnected, CTC, RUN
 69c:	8c e0       	ldi	r24, 0x0C	; 12
 69e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<4); // T1 compare match A interrupt enable
 6a0:	87 b7       	in	r24, 0x37	; 55
 6a2:	80 61       	ori	r24, 0x10	; 16
 6a4:	87 bf       	out	0x37, r24	; 55
 6a6:	08 95       	ret

000006a8 <timer_set_compare_value>:
}

void timer_set_compare_value(int value){
	OCR1A = (10000+value);
 6a8:	80 5f       	subi	r24, 0xF0	; 240
 6aa:	98 4d       	sbci	r25, 0xD8	; 216
 6ac:	9b bd       	out	0x2b, r25	; 43
 6ae:	8a bd       	out	0x2a, r24	; 42
 6b0:	08 95       	ret

000006b2 <__divmodhi4>:
 6b2:	97 fb       	bst	r25, 7
 6b4:	07 2e       	mov	r0, r23
 6b6:	16 f4       	brtc	.+4      	; 0x6bc <__divmodhi4+0xa>
 6b8:	00 94       	com	r0
 6ba:	06 d0       	rcall	.+12     	; 0x6c8 <__divmodhi4_neg1>
 6bc:	77 fd       	sbrc	r23, 7
 6be:	08 d0       	rcall	.+16     	; 0x6d0 <__divmodhi4_neg2>
 6c0:	14 d0       	rcall	.+40     	; 0x6ea <__udivmodhi4>
 6c2:	07 fc       	sbrc	r0, 7
 6c4:	05 d0       	rcall	.+10     	; 0x6d0 <__divmodhi4_neg2>
 6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__divmodhi4_exit>

000006c8 <__divmodhi4_neg1>:
 6c8:	90 95       	com	r25
 6ca:	81 95       	neg	r24
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	08 95       	ret

000006d0 <__divmodhi4_neg2>:
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255

000006d6 <__divmodhi4_exit>:
 6d6:	08 95       	ret

000006d8 <__tablejump2__>:
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	00 24       	eor	r0, r0
 6de:	00 1c       	adc	r0, r0
 6e0:	0b be       	out	0x3b, r0	; 59
 6e2:	07 90       	elpm	r0, Z+
 6e4:	f6 91       	elpm	r31, Z
 6e6:	e0 2d       	mov	r30, r0
 6e8:	09 94       	ijmp

000006ea <__udivmodhi4>:
 6ea:	aa 1b       	sub	r26, r26
 6ec:	bb 1b       	sub	r27, r27
 6ee:	51 e1       	ldi	r21, 0x11	; 17
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <__udivmodhi4_ep>

000006f2 <__udivmodhi4_loop>:
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	a6 17       	cp	r26, r22
 6f8:	b7 07       	cpc	r27, r23
 6fa:	10 f0       	brcs	.+4      	; 0x700 <__udivmodhi4_ep>
 6fc:	a6 1b       	sub	r26, r22
 6fe:	b7 0b       	sbc	r27, r23

00000700 <__udivmodhi4_ep>:
 700:	88 1f       	adc	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	5a 95       	dec	r21
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__udivmodhi4_loop>
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	bc 01       	movw	r22, r24
 70e:	cd 01       	movw	r24, r26
 710:	08 95       	ret

00000712 <toupper>:
 712:	91 11       	cpse	r25, r1
 714:	08 95       	ret
 716:	81 56       	subi	r24, 0x61	; 97
 718:	8a 51       	subi	r24, 0x1A	; 26
 71a:	08 f4       	brcc	.+2      	; 0x71e <toupper+0xc>
 71c:	80 52       	subi	r24, 0x20	; 32
 71e:	85 58       	subi	r24, 0x85	; 133
 720:	08 95       	ret

00000722 <strcat>:
 722:	fb 01       	movw	r30, r22
 724:	dc 01       	movw	r26, r24
 726:	0d 90       	ld	r0, X+
 728:	00 20       	and	r0, r0
 72a:	e9 f7       	brne	.-6      	; 0x726 <strcat+0x4>
 72c:	11 97       	sbiw	r26, 0x01	; 1
 72e:	01 90       	ld	r0, Z+
 730:	0d 92       	st	X+, r0
 732:	00 20       	and	r0, r0
 734:	e1 f7       	brne	.-8      	; 0x72e <strcat+0xc>
 736:	08 95       	ret

00000738 <sprintf>:
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	2e 97       	sbiw	r28, 0x0e	; 14
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	0d 89       	ldd	r16, Y+21	; 0x15
 752:	1e 89       	ldd	r17, Y+22	; 0x16
 754:	86 e0       	ldi	r24, 0x06	; 6
 756:	8c 83       	std	Y+4, r24	; 0x04
 758:	1a 83       	std	Y+2, r17	; 0x02
 75a:	09 83       	std	Y+1, r16	; 0x01
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	9f e7       	ldi	r25, 0x7F	; 127
 760:	9e 83       	std	Y+6, r25	; 0x06
 762:	8d 83       	std	Y+5, r24	; 0x05
 764:	ae 01       	movw	r20, r28
 766:	47 5e       	subi	r20, 0xE7	; 231
 768:	5f 4f       	sbci	r21, 0xFF	; 255
 76a:	6f 89       	ldd	r22, Y+23	; 0x17
 76c:	78 8d       	ldd	r23, Y+24	; 0x18
 76e:	ce 01       	movw	r24, r28
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	10 d0       	rcall	.+32     	; 0x794 <vfprintf>
 774:	ef 81       	ldd	r30, Y+7	; 0x07
 776:	f8 85       	ldd	r31, Y+8	; 0x08
 778:	e0 0f       	add	r30, r16
 77a:	f1 1f       	adc	r31, r17
 77c:	10 82       	st	Z, r1
 77e:	2e 96       	adiw	r28, 0x0e	; 14
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	de bf       	out	0x3e, r29	; 62
 786:	0f be       	out	0x3f, r0	; 63
 788:	cd bf       	out	0x3d, r28	; 61
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <vfprintf>:
 794:	2f 92       	push	r2
 796:	3f 92       	push	r3
 798:	4f 92       	push	r4
 79a:	5f 92       	push	r5
 79c:	6f 92       	push	r6
 79e:	7f 92       	push	r7
 7a0:	8f 92       	push	r8
 7a2:	9f 92       	push	r9
 7a4:	af 92       	push	r10
 7a6:	bf 92       	push	r11
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	2b 97       	sbiw	r28, 0x0b	; 11
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
 7c8:	6c 01       	movw	r12, r24
 7ca:	7b 01       	movw	r14, r22
 7cc:	8a 01       	movw	r16, r20
 7ce:	fc 01       	movw	r30, r24
 7d0:	17 82       	std	Z+7, r1	; 0x07
 7d2:	16 82       	std	Z+6, r1	; 0x06
 7d4:	83 81       	ldd	r24, Z+3	; 0x03
 7d6:	81 ff       	sbrs	r24, 1
 7d8:	bf c1       	rjmp	.+894    	; 0xb58 <vfprintf+0x3c4>
 7da:	ce 01       	movw	r24, r28
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	3c 01       	movw	r6, r24
 7e0:	f6 01       	movw	r30, r12
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	f7 01       	movw	r30, r14
 7e6:	93 fd       	sbrc	r25, 3
 7e8:	85 91       	lpm	r24, Z+
 7ea:	93 ff       	sbrs	r25, 3
 7ec:	81 91       	ld	r24, Z+
 7ee:	7f 01       	movw	r14, r30
 7f0:	88 23       	and	r24, r24
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <vfprintf+0x62>
 7f4:	ad c1       	rjmp	.+858    	; 0xb50 <vfprintf+0x3bc>
 7f6:	85 32       	cpi	r24, 0x25	; 37
 7f8:	39 f4       	brne	.+14     	; 0x808 <vfprintf+0x74>
 7fa:	93 fd       	sbrc	r25, 3
 7fc:	85 91       	lpm	r24, Z+
 7fe:	93 ff       	sbrs	r25, 3
 800:	81 91       	ld	r24, Z+
 802:	7f 01       	movw	r14, r30
 804:	85 32       	cpi	r24, 0x25	; 37
 806:	21 f4       	brne	.+8      	; 0x810 <vfprintf+0x7c>
 808:	b6 01       	movw	r22, r12
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	d6 d1       	rcall	.+940    	; 0xbba <fputc>
 80e:	e8 cf       	rjmp	.-48     	; 0x7e0 <vfprintf+0x4c>
 810:	91 2c       	mov	r9, r1
 812:	21 2c       	mov	r2, r1
 814:	31 2c       	mov	r3, r1
 816:	ff e1       	ldi	r31, 0x1F	; 31
 818:	f3 15       	cp	r31, r3
 81a:	d8 f0       	brcs	.+54     	; 0x852 <vfprintf+0xbe>
 81c:	8b 32       	cpi	r24, 0x2B	; 43
 81e:	79 f0       	breq	.+30     	; 0x83e <vfprintf+0xaa>
 820:	38 f4       	brcc	.+14     	; 0x830 <vfprintf+0x9c>
 822:	80 32       	cpi	r24, 0x20	; 32
 824:	79 f0       	breq	.+30     	; 0x844 <vfprintf+0xb0>
 826:	83 32       	cpi	r24, 0x23	; 35
 828:	a1 f4       	brne	.+40     	; 0x852 <vfprintf+0xbe>
 82a:	23 2d       	mov	r18, r3
 82c:	20 61       	ori	r18, 0x10	; 16
 82e:	1d c0       	rjmp	.+58     	; 0x86a <vfprintf+0xd6>
 830:	8d 32       	cpi	r24, 0x2D	; 45
 832:	61 f0       	breq	.+24     	; 0x84c <vfprintf+0xb8>
 834:	80 33       	cpi	r24, 0x30	; 48
 836:	69 f4       	brne	.+26     	; 0x852 <vfprintf+0xbe>
 838:	23 2d       	mov	r18, r3
 83a:	21 60       	ori	r18, 0x01	; 1
 83c:	16 c0       	rjmp	.+44     	; 0x86a <vfprintf+0xd6>
 83e:	83 2d       	mov	r24, r3
 840:	82 60       	ori	r24, 0x02	; 2
 842:	38 2e       	mov	r3, r24
 844:	e3 2d       	mov	r30, r3
 846:	e4 60       	ori	r30, 0x04	; 4
 848:	3e 2e       	mov	r3, r30
 84a:	2a c0       	rjmp	.+84     	; 0x8a0 <vfprintf+0x10c>
 84c:	f3 2d       	mov	r31, r3
 84e:	f8 60       	ori	r31, 0x08	; 8
 850:	1d c0       	rjmp	.+58     	; 0x88c <vfprintf+0xf8>
 852:	37 fc       	sbrc	r3, 7
 854:	2d c0       	rjmp	.+90     	; 0x8b0 <vfprintf+0x11c>
 856:	20 ed       	ldi	r18, 0xD0	; 208
 858:	28 0f       	add	r18, r24
 85a:	2a 30       	cpi	r18, 0x0A	; 10
 85c:	40 f0       	brcs	.+16     	; 0x86e <vfprintf+0xda>
 85e:	8e 32       	cpi	r24, 0x2E	; 46
 860:	b9 f4       	brne	.+46     	; 0x890 <vfprintf+0xfc>
 862:	36 fc       	sbrc	r3, 6
 864:	75 c1       	rjmp	.+746    	; 0xb50 <vfprintf+0x3bc>
 866:	23 2d       	mov	r18, r3
 868:	20 64       	ori	r18, 0x40	; 64
 86a:	32 2e       	mov	r3, r18
 86c:	19 c0       	rjmp	.+50     	; 0x8a0 <vfprintf+0x10c>
 86e:	36 fe       	sbrs	r3, 6
 870:	06 c0       	rjmp	.+12     	; 0x87e <vfprintf+0xea>
 872:	8a e0       	ldi	r24, 0x0A	; 10
 874:	98 9e       	mul	r9, r24
 876:	20 0d       	add	r18, r0
 878:	11 24       	eor	r1, r1
 87a:	92 2e       	mov	r9, r18
 87c:	11 c0       	rjmp	.+34     	; 0x8a0 <vfprintf+0x10c>
 87e:	ea e0       	ldi	r30, 0x0A	; 10
 880:	2e 9e       	mul	r2, r30
 882:	20 0d       	add	r18, r0
 884:	11 24       	eor	r1, r1
 886:	22 2e       	mov	r2, r18
 888:	f3 2d       	mov	r31, r3
 88a:	f0 62       	ori	r31, 0x20	; 32
 88c:	3f 2e       	mov	r3, r31
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <vfprintf+0x10c>
 890:	8c 36       	cpi	r24, 0x6C	; 108
 892:	21 f4       	brne	.+8      	; 0x89c <vfprintf+0x108>
 894:	83 2d       	mov	r24, r3
 896:	80 68       	ori	r24, 0x80	; 128
 898:	38 2e       	mov	r3, r24
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <vfprintf+0x10c>
 89c:	88 36       	cpi	r24, 0x68	; 104
 89e:	41 f4       	brne	.+16     	; 0x8b0 <vfprintf+0x11c>
 8a0:	f7 01       	movw	r30, r14
 8a2:	93 fd       	sbrc	r25, 3
 8a4:	85 91       	lpm	r24, Z+
 8a6:	93 ff       	sbrs	r25, 3
 8a8:	81 91       	ld	r24, Z+
 8aa:	7f 01       	movw	r14, r30
 8ac:	81 11       	cpse	r24, r1
 8ae:	b3 cf       	rjmp	.-154    	; 0x816 <vfprintf+0x82>
 8b0:	98 2f       	mov	r25, r24
 8b2:	9f 7d       	andi	r25, 0xDF	; 223
 8b4:	95 54       	subi	r25, 0x45	; 69
 8b6:	93 30       	cpi	r25, 0x03	; 3
 8b8:	28 f4       	brcc	.+10     	; 0x8c4 <vfprintf+0x130>
 8ba:	0c 5f       	subi	r16, 0xFC	; 252
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	9f e3       	ldi	r25, 0x3F	; 63
 8c0:	99 83       	std	Y+1, r25	; 0x01
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <vfprintf+0x14a>
 8c4:	83 36       	cpi	r24, 0x63	; 99
 8c6:	31 f0       	breq	.+12     	; 0x8d4 <vfprintf+0x140>
 8c8:	83 37       	cpi	r24, 0x73	; 115
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <vfprintf+0x154>
 8cc:	83 35       	cpi	r24, 0x53	; 83
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <vfprintf+0x13e>
 8d0:	55 c0       	rjmp	.+170    	; 0x97c <vfprintf+0x1e8>
 8d2:	20 c0       	rjmp	.+64     	; 0x914 <vfprintf+0x180>
 8d4:	f8 01       	movw	r30, r16
 8d6:	80 81       	ld	r24, Z
 8d8:	89 83       	std	Y+1, r24	; 0x01
 8da:	0e 5f       	subi	r16, 0xFE	; 254
 8dc:	1f 4f       	sbci	r17, 0xFF	; 255
 8de:	88 24       	eor	r8, r8
 8e0:	83 94       	inc	r8
 8e2:	91 2c       	mov	r9, r1
 8e4:	53 01       	movw	r10, r6
 8e6:	12 c0       	rjmp	.+36     	; 0x90c <vfprintf+0x178>
 8e8:	28 01       	movw	r4, r16
 8ea:	f2 e0       	ldi	r31, 0x02	; 2
 8ec:	4f 0e       	add	r4, r31
 8ee:	51 1c       	adc	r5, r1
 8f0:	f8 01       	movw	r30, r16
 8f2:	a0 80       	ld	r10, Z
 8f4:	b1 80       	ldd	r11, Z+1	; 0x01
 8f6:	36 fe       	sbrs	r3, 6
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <vfprintf+0x16c>
 8fa:	69 2d       	mov	r22, r9
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <vfprintf+0x170>
 900:	6f ef       	ldi	r22, 0xFF	; 255
 902:	7f ef       	ldi	r23, 0xFF	; 255
 904:	c5 01       	movw	r24, r10
 906:	4e d1       	rcall	.+668    	; 0xba4 <strnlen>
 908:	4c 01       	movw	r8, r24
 90a:	82 01       	movw	r16, r4
 90c:	f3 2d       	mov	r31, r3
 90e:	ff 77       	andi	r31, 0x7F	; 127
 910:	3f 2e       	mov	r3, r31
 912:	15 c0       	rjmp	.+42     	; 0x93e <vfprintf+0x1aa>
 914:	28 01       	movw	r4, r16
 916:	22 e0       	ldi	r18, 0x02	; 2
 918:	42 0e       	add	r4, r18
 91a:	51 1c       	adc	r5, r1
 91c:	f8 01       	movw	r30, r16
 91e:	a0 80       	ld	r10, Z
 920:	b1 80       	ldd	r11, Z+1	; 0x01
 922:	36 fe       	sbrs	r3, 6
 924:	03 c0       	rjmp	.+6      	; 0x92c <vfprintf+0x198>
 926:	69 2d       	mov	r22, r9
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <vfprintf+0x19c>
 92c:	6f ef       	ldi	r22, 0xFF	; 255
 92e:	7f ef       	ldi	r23, 0xFF	; 255
 930:	c5 01       	movw	r24, r10
 932:	2d d1       	rcall	.+602    	; 0xb8e <strnlen_P>
 934:	4c 01       	movw	r8, r24
 936:	f3 2d       	mov	r31, r3
 938:	f0 68       	ori	r31, 0x80	; 128
 93a:	3f 2e       	mov	r3, r31
 93c:	82 01       	movw	r16, r4
 93e:	33 fc       	sbrc	r3, 3
 940:	19 c0       	rjmp	.+50     	; 0x974 <vfprintf+0x1e0>
 942:	82 2d       	mov	r24, r2
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	88 16       	cp	r8, r24
 948:	99 06       	cpc	r9, r25
 94a:	a0 f4       	brcc	.+40     	; 0x974 <vfprintf+0x1e0>
 94c:	b6 01       	movw	r22, r12
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	33 d1       	rcall	.+614    	; 0xbba <fputc>
 954:	2a 94       	dec	r2
 956:	f5 cf       	rjmp	.-22     	; 0x942 <vfprintf+0x1ae>
 958:	f5 01       	movw	r30, r10
 95a:	37 fc       	sbrc	r3, 7
 95c:	85 91       	lpm	r24, Z+
 95e:	37 fe       	sbrs	r3, 7
 960:	81 91       	ld	r24, Z+
 962:	5f 01       	movw	r10, r30
 964:	b6 01       	movw	r22, r12
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	28 d1       	rcall	.+592    	; 0xbba <fputc>
 96a:	21 10       	cpse	r2, r1
 96c:	2a 94       	dec	r2
 96e:	21 e0       	ldi	r18, 0x01	; 1
 970:	82 1a       	sub	r8, r18
 972:	91 08       	sbc	r9, r1
 974:	81 14       	cp	r8, r1
 976:	91 04       	cpc	r9, r1
 978:	79 f7       	brne	.-34     	; 0x958 <vfprintf+0x1c4>
 97a:	e1 c0       	rjmp	.+450    	; 0xb3e <vfprintf+0x3aa>
 97c:	84 36       	cpi	r24, 0x64	; 100
 97e:	11 f0       	breq	.+4      	; 0x984 <vfprintf+0x1f0>
 980:	89 36       	cpi	r24, 0x69	; 105
 982:	39 f5       	brne	.+78     	; 0x9d2 <vfprintf+0x23e>
 984:	f8 01       	movw	r30, r16
 986:	37 fe       	sbrs	r3, 7
 988:	07 c0       	rjmp	.+14     	; 0x998 <vfprintf+0x204>
 98a:	60 81       	ld	r22, Z
 98c:	71 81       	ldd	r23, Z+1	; 0x01
 98e:	82 81       	ldd	r24, Z+2	; 0x02
 990:	93 81       	ldd	r25, Z+3	; 0x03
 992:	0c 5f       	subi	r16, 0xFC	; 252
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	08 c0       	rjmp	.+16     	; 0x9a8 <vfprintf+0x214>
 998:	60 81       	ld	r22, Z
 99a:	71 81       	ldd	r23, Z+1	; 0x01
 99c:	07 2e       	mov	r0, r23
 99e:	00 0c       	add	r0, r0
 9a0:	88 0b       	sbc	r24, r24
 9a2:	99 0b       	sbc	r25, r25
 9a4:	0e 5f       	subi	r16, 0xFE	; 254
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	f3 2d       	mov	r31, r3
 9aa:	ff 76       	andi	r31, 0x6F	; 111
 9ac:	3f 2e       	mov	r3, r31
 9ae:	97 ff       	sbrs	r25, 7
 9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <vfprintf+0x230>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	f0 68       	ori	r31, 0x80	; 128
 9c2:	3f 2e       	mov	r3, r31
 9c4:	2a e0       	ldi	r18, 0x0A	; 10
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	a3 01       	movw	r20, r6
 9ca:	33 d1       	rcall	.+614    	; 0xc32 <__ultoa_invert>
 9cc:	88 2e       	mov	r8, r24
 9ce:	86 18       	sub	r8, r6
 9d0:	44 c0       	rjmp	.+136    	; 0xa5a <vfprintf+0x2c6>
 9d2:	85 37       	cpi	r24, 0x75	; 117
 9d4:	31 f4       	brne	.+12     	; 0x9e2 <vfprintf+0x24e>
 9d6:	23 2d       	mov	r18, r3
 9d8:	2f 7e       	andi	r18, 0xEF	; 239
 9da:	b2 2e       	mov	r11, r18
 9dc:	2a e0       	ldi	r18, 0x0A	; 10
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	25 c0       	rjmp	.+74     	; 0xa2c <vfprintf+0x298>
 9e2:	93 2d       	mov	r25, r3
 9e4:	99 7f       	andi	r25, 0xF9	; 249
 9e6:	b9 2e       	mov	r11, r25
 9e8:	8f 36       	cpi	r24, 0x6F	; 111
 9ea:	c1 f0       	breq	.+48     	; 0xa1c <vfprintf+0x288>
 9ec:	18 f4       	brcc	.+6      	; 0x9f4 <vfprintf+0x260>
 9ee:	88 35       	cpi	r24, 0x58	; 88
 9f0:	79 f0       	breq	.+30     	; 0xa10 <vfprintf+0x27c>
 9f2:	ae c0       	rjmp	.+348    	; 0xb50 <vfprintf+0x3bc>
 9f4:	80 37       	cpi	r24, 0x70	; 112
 9f6:	19 f0       	breq	.+6      	; 0x9fe <vfprintf+0x26a>
 9f8:	88 37       	cpi	r24, 0x78	; 120
 9fa:	21 f0       	breq	.+8      	; 0xa04 <vfprintf+0x270>
 9fc:	a9 c0       	rjmp	.+338    	; 0xb50 <vfprintf+0x3bc>
 9fe:	e9 2f       	mov	r30, r25
 a00:	e0 61       	ori	r30, 0x10	; 16
 a02:	be 2e       	mov	r11, r30
 a04:	b4 fe       	sbrs	r11, 4
 a06:	0d c0       	rjmp	.+26     	; 0xa22 <vfprintf+0x28e>
 a08:	fb 2d       	mov	r31, r11
 a0a:	f4 60       	ori	r31, 0x04	; 4
 a0c:	bf 2e       	mov	r11, r31
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <vfprintf+0x28e>
 a10:	34 fe       	sbrs	r3, 4
 a12:	0a c0       	rjmp	.+20     	; 0xa28 <vfprintf+0x294>
 a14:	29 2f       	mov	r18, r25
 a16:	26 60       	ori	r18, 0x06	; 6
 a18:	b2 2e       	mov	r11, r18
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <vfprintf+0x294>
 a1c:	28 e0       	ldi	r18, 0x08	; 8
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	05 c0       	rjmp	.+10     	; 0xa2c <vfprintf+0x298>
 a22:	20 e1       	ldi	r18, 0x10	; 16
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <vfprintf+0x298>
 a28:	20 e1       	ldi	r18, 0x10	; 16
 a2a:	32 e0       	ldi	r19, 0x02	; 2
 a2c:	f8 01       	movw	r30, r16
 a2e:	b7 fe       	sbrs	r11, 7
 a30:	07 c0       	rjmp	.+14     	; 0xa40 <vfprintf+0x2ac>
 a32:	60 81       	ld	r22, Z
 a34:	71 81       	ldd	r23, Z+1	; 0x01
 a36:	82 81       	ldd	r24, Z+2	; 0x02
 a38:	93 81       	ldd	r25, Z+3	; 0x03
 a3a:	0c 5f       	subi	r16, 0xFC	; 252
 a3c:	1f 4f       	sbci	r17, 0xFF	; 255
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0x2b8>
 a40:	60 81       	ld	r22, Z
 a42:	71 81       	ldd	r23, Z+1	; 0x01
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 5f       	subi	r16, 0xFE	; 254
 a4a:	1f 4f       	sbci	r17, 0xFF	; 255
 a4c:	a3 01       	movw	r20, r6
 a4e:	f1 d0       	rcall	.+482    	; 0xc32 <__ultoa_invert>
 a50:	88 2e       	mov	r8, r24
 a52:	86 18       	sub	r8, r6
 a54:	fb 2d       	mov	r31, r11
 a56:	ff 77       	andi	r31, 0x7F	; 127
 a58:	3f 2e       	mov	r3, r31
 a5a:	36 fe       	sbrs	r3, 6
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vfprintf+0x2e4>
 a5e:	23 2d       	mov	r18, r3
 a60:	2e 7f       	andi	r18, 0xFE	; 254
 a62:	a2 2e       	mov	r10, r18
 a64:	89 14       	cp	r8, r9
 a66:	58 f4       	brcc	.+22     	; 0xa7e <vfprintf+0x2ea>
 a68:	34 fe       	sbrs	r3, 4
 a6a:	0b c0       	rjmp	.+22     	; 0xa82 <vfprintf+0x2ee>
 a6c:	32 fc       	sbrc	r3, 2
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <vfprintf+0x2ee>
 a70:	83 2d       	mov	r24, r3
 a72:	8e 7e       	andi	r24, 0xEE	; 238
 a74:	a8 2e       	mov	r10, r24
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <vfprintf+0x2ee>
 a78:	b8 2c       	mov	r11, r8
 a7a:	a3 2c       	mov	r10, r3
 a7c:	03 c0       	rjmp	.+6      	; 0xa84 <vfprintf+0x2f0>
 a7e:	b8 2c       	mov	r11, r8
 a80:	01 c0       	rjmp	.+2      	; 0xa84 <vfprintf+0x2f0>
 a82:	b9 2c       	mov	r11, r9
 a84:	a4 fe       	sbrs	r10, 4
 a86:	0f c0       	rjmp	.+30     	; 0xaa6 <vfprintf+0x312>
 a88:	fe 01       	movw	r30, r28
 a8a:	e8 0d       	add	r30, r8
 a8c:	f1 1d       	adc	r31, r1
 a8e:	80 81       	ld	r24, Z
 a90:	80 33       	cpi	r24, 0x30	; 48
 a92:	21 f4       	brne	.+8      	; 0xa9c <vfprintf+0x308>
 a94:	9a 2d       	mov	r25, r10
 a96:	99 7e       	andi	r25, 0xE9	; 233
 a98:	a9 2e       	mov	r10, r25
 a9a:	09 c0       	rjmp	.+18     	; 0xaae <vfprintf+0x31a>
 a9c:	a2 fe       	sbrs	r10, 2
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <vfprintf+0x318>
 aa0:	b3 94       	inc	r11
 aa2:	b3 94       	inc	r11
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <vfprintf+0x31a>
 aa6:	8a 2d       	mov	r24, r10
 aa8:	86 78       	andi	r24, 0x86	; 134
 aaa:	09 f0       	breq	.+2      	; 0xaae <vfprintf+0x31a>
 aac:	b3 94       	inc	r11
 aae:	a3 fc       	sbrc	r10, 3
 ab0:	10 c0       	rjmp	.+32     	; 0xad2 <vfprintf+0x33e>
 ab2:	a0 fe       	sbrs	r10, 0
 ab4:	06 c0       	rjmp	.+12     	; 0xac2 <vfprintf+0x32e>
 ab6:	b2 14       	cp	r11, r2
 ab8:	80 f4       	brcc	.+32     	; 0xada <vfprintf+0x346>
 aba:	28 0c       	add	r2, r8
 abc:	92 2c       	mov	r9, r2
 abe:	9b 18       	sub	r9, r11
 ac0:	0d c0       	rjmp	.+26     	; 0xadc <vfprintf+0x348>
 ac2:	b2 14       	cp	r11, r2
 ac4:	58 f4       	brcc	.+22     	; 0xadc <vfprintf+0x348>
 ac6:	b6 01       	movw	r22, r12
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	76 d0       	rcall	.+236    	; 0xbba <fputc>
 ace:	b3 94       	inc	r11
 ad0:	f8 cf       	rjmp	.-16     	; 0xac2 <vfprintf+0x32e>
 ad2:	b2 14       	cp	r11, r2
 ad4:	18 f4       	brcc	.+6      	; 0xadc <vfprintf+0x348>
 ad6:	2b 18       	sub	r2, r11
 ad8:	02 c0       	rjmp	.+4      	; 0xade <vfprintf+0x34a>
 ada:	98 2c       	mov	r9, r8
 adc:	21 2c       	mov	r2, r1
 ade:	a4 fe       	sbrs	r10, 4
 ae0:	0f c0       	rjmp	.+30     	; 0xb00 <vfprintf+0x36c>
 ae2:	b6 01       	movw	r22, r12
 ae4:	80 e3       	ldi	r24, 0x30	; 48
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	68 d0       	rcall	.+208    	; 0xbba <fputc>
 aea:	a2 fe       	sbrs	r10, 2
 aec:	16 c0       	rjmp	.+44     	; 0xb1a <vfprintf+0x386>
 aee:	a1 fc       	sbrc	r10, 1
 af0:	03 c0       	rjmp	.+6      	; 0xaf8 <vfprintf+0x364>
 af2:	88 e7       	ldi	r24, 0x78	; 120
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <vfprintf+0x368>
 af8:	88 e5       	ldi	r24, 0x58	; 88
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	b6 01       	movw	r22, r12
 afe:	0c c0       	rjmp	.+24     	; 0xb18 <vfprintf+0x384>
 b00:	8a 2d       	mov	r24, r10
 b02:	86 78       	andi	r24, 0x86	; 134
 b04:	51 f0       	breq	.+20     	; 0xb1a <vfprintf+0x386>
 b06:	a1 fe       	sbrs	r10, 1
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <vfprintf+0x37a>
 b0a:	8b e2       	ldi	r24, 0x2B	; 43
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <vfprintf+0x37c>
 b0e:	80 e2       	ldi	r24, 0x20	; 32
 b10:	a7 fc       	sbrc	r10, 7
 b12:	8d e2       	ldi	r24, 0x2D	; 45
 b14:	b6 01       	movw	r22, r12
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	50 d0       	rcall	.+160    	; 0xbba <fputc>
 b1a:	89 14       	cp	r8, r9
 b1c:	30 f4       	brcc	.+12     	; 0xb2a <vfprintf+0x396>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e3       	ldi	r24, 0x30	; 48
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	4a d0       	rcall	.+148    	; 0xbba <fputc>
 b26:	9a 94       	dec	r9
 b28:	f8 cf       	rjmp	.-16     	; 0xb1a <vfprintf+0x386>
 b2a:	8a 94       	dec	r8
 b2c:	f3 01       	movw	r30, r6
 b2e:	e8 0d       	add	r30, r8
 b30:	f1 1d       	adc	r31, r1
 b32:	80 81       	ld	r24, Z
 b34:	b6 01       	movw	r22, r12
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	40 d0       	rcall	.+128    	; 0xbba <fputc>
 b3a:	81 10       	cpse	r8, r1
 b3c:	f6 cf       	rjmp	.-20     	; 0xb2a <vfprintf+0x396>
 b3e:	22 20       	and	r2, r2
 b40:	09 f4       	brne	.+2      	; 0xb44 <vfprintf+0x3b0>
 b42:	4e ce       	rjmp	.-868    	; 0x7e0 <vfprintf+0x4c>
 b44:	b6 01       	movw	r22, r12
 b46:	80 e2       	ldi	r24, 0x20	; 32
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	37 d0       	rcall	.+110    	; 0xbba <fputc>
 b4c:	2a 94       	dec	r2
 b4e:	f7 cf       	rjmp	.-18     	; 0xb3e <vfprintf+0x3aa>
 b50:	f6 01       	movw	r30, r12
 b52:	86 81       	ldd	r24, Z+6	; 0x06
 b54:	97 81       	ldd	r25, Z+7	; 0x07
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <vfprintf+0x3c8>
 b58:	8f ef       	ldi	r24, 0xFF	; 255
 b5a:	9f ef       	ldi	r25, 0xFF	; 255
 b5c:	2b 96       	adiw	r28, 0x0b	; 11
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	de bf       	out	0x3e, r29	; 62
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	cd bf       	out	0x3d, r28	; 61
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	ff 90       	pop	r15
 b72:	ef 90       	pop	r14
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	bf 90       	pop	r11
 b7a:	af 90       	pop	r10
 b7c:	9f 90       	pop	r9
 b7e:	8f 90       	pop	r8
 b80:	7f 90       	pop	r7
 b82:	6f 90       	pop	r6
 b84:	5f 90       	pop	r5
 b86:	4f 90       	pop	r4
 b88:	3f 90       	pop	r3
 b8a:	2f 90       	pop	r2
 b8c:	08 95       	ret

00000b8e <strnlen_P>:
 b8e:	fc 01       	movw	r30, r24
 b90:	05 90       	lpm	r0, Z+
 b92:	61 50       	subi	r22, 0x01	; 1
 b94:	70 40       	sbci	r23, 0x00	; 0
 b96:	01 10       	cpse	r0, r1
 b98:	d8 f7       	brcc	.-10     	; 0xb90 <strnlen_P+0x2>
 b9a:	80 95       	com	r24
 b9c:	90 95       	com	r25
 b9e:	8e 0f       	add	r24, r30
 ba0:	9f 1f       	adc	r25, r31
 ba2:	08 95       	ret

00000ba4 <strnlen>:
 ba4:	fc 01       	movw	r30, r24
 ba6:	61 50       	subi	r22, 0x01	; 1
 ba8:	70 40       	sbci	r23, 0x00	; 0
 baa:	01 90       	ld	r0, Z+
 bac:	01 10       	cpse	r0, r1
 bae:	d8 f7       	brcc	.-10     	; 0xba6 <strnlen+0x2>
 bb0:	80 95       	com	r24
 bb2:	90 95       	com	r25
 bb4:	8e 0f       	add	r24, r30
 bb6:	9f 1f       	adc	r25, r31
 bb8:	08 95       	ret

00000bba <fputc>:
 bba:	0f 93       	push	r16
 bbc:	1f 93       	push	r17
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	fb 01       	movw	r30, r22
 bc4:	23 81       	ldd	r18, Z+3	; 0x03
 bc6:	21 fd       	sbrc	r18, 1
 bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <fputc+0x16>
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	9f ef       	ldi	r25, 0xFF	; 255
 bce:	2c c0       	rjmp	.+88     	; 0xc28 <fputc+0x6e>
 bd0:	22 ff       	sbrs	r18, 2
 bd2:	16 c0       	rjmp	.+44     	; 0xc00 <fputc+0x46>
 bd4:	46 81       	ldd	r20, Z+6	; 0x06
 bd6:	57 81       	ldd	r21, Z+7	; 0x07
 bd8:	24 81       	ldd	r18, Z+4	; 0x04
 bda:	35 81       	ldd	r19, Z+5	; 0x05
 bdc:	42 17       	cp	r20, r18
 bde:	53 07       	cpc	r21, r19
 be0:	44 f4       	brge	.+16     	; 0xbf2 <fputc+0x38>
 be2:	a0 81       	ld	r26, Z
 be4:	b1 81       	ldd	r27, Z+1	; 0x01
 be6:	9d 01       	movw	r18, r26
 be8:	2f 5f       	subi	r18, 0xFF	; 255
 bea:	3f 4f       	sbci	r19, 0xFF	; 255
 bec:	31 83       	std	Z+1, r19	; 0x01
 bee:	20 83       	st	Z, r18
 bf0:	8c 93       	st	X, r24
 bf2:	26 81       	ldd	r18, Z+6	; 0x06
 bf4:	37 81       	ldd	r19, Z+7	; 0x07
 bf6:	2f 5f       	subi	r18, 0xFF	; 255
 bf8:	3f 4f       	sbci	r19, 0xFF	; 255
 bfa:	37 83       	std	Z+7, r19	; 0x07
 bfc:	26 83       	std	Z+6, r18	; 0x06
 bfe:	14 c0       	rjmp	.+40     	; 0xc28 <fputc+0x6e>
 c00:	8b 01       	movw	r16, r22
 c02:	ec 01       	movw	r28, r24
 c04:	fb 01       	movw	r30, r22
 c06:	00 84       	ldd	r0, Z+8	; 0x08
 c08:	f1 85       	ldd	r31, Z+9	; 0x09
 c0a:	e0 2d       	mov	r30, r0
 c0c:	09 95       	icall
 c0e:	89 2b       	or	r24, r25
 c10:	e1 f6       	brne	.-72     	; 0xbca <fputc+0x10>
 c12:	d8 01       	movw	r26, r16
 c14:	16 96       	adiw	r26, 0x06	; 6
 c16:	8d 91       	ld	r24, X+
 c18:	9c 91       	ld	r25, X
 c1a:	17 97       	sbiw	r26, 0x07	; 7
 c1c:	01 96       	adiw	r24, 0x01	; 1
 c1e:	17 96       	adiw	r26, 0x07	; 7
 c20:	9c 93       	st	X, r25
 c22:	8e 93       	st	-X, r24
 c24:	16 97       	sbiw	r26, 0x06	; 6
 c26:	ce 01       	movw	r24, r28
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	1f 91       	pop	r17
 c2e:	0f 91       	pop	r16
 c30:	08 95       	ret

00000c32 <__ultoa_invert>:
 c32:	fa 01       	movw	r30, r20
 c34:	aa 27       	eor	r26, r26
 c36:	28 30       	cpi	r18, 0x08	; 8
 c38:	51 f1       	breq	.+84     	; 0xc8e <__ultoa_invert+0x5c>
 c3a:	20 31       	cpi	r18, 0x10	; 16
 c3c:	81 f1       	breq	.+96     	; 0xc9e <__ultoa_invert+0x6c>
 c3e:	e8 94       	clt
 c40:	6f 93       	push	r22
 c42:	6e 7f       	andi	r22, 0xFE	; 254
 c44:	6e 5f       	subi	r22, 0xFE	; 254
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	af 4f       	sbci	r26, 0xFF	; 255
 c4e:	b1 e0       	ldi	r27, 0x01	; 1
 c50:	3e d0       	rcall	.+124    	; 0xcce <__ultoa_invert+0x9c>
 c52:	b4 e0       	ldi	r27, 0x04	; 4
 c54:	3c d0       	rcall	.+120    	; 0xcce <__ultoa_invert+0x9c>
 c56:	67 0f       	add	r22, r23
 c58:	78 1f       	adc	r23, r24
 c5a:	89 1f       	adc	r24, r25
 c5c:	9a 1f       	adc	r25, r26
 c5e:	a1 1d       	adc	r26, r1
 c60:	68 0f       	add	r22, r24
 c62:	79 1f       	adc	r23, r25
 c64:	8a 1f       	adc	r24, r26
 c66:	91 1d       	adc	r25, r1
 c68:	a1 1d       	adc	r26, r1
 c6a:	6a 0f       	add	r22, r26
 c6c:	71 1d       	adc	r23, r1
 c6e:	81 1d       	adc	r24, r1
 c70:	91 1d       	adc	r25, r1
 c72:	a1 1d       	adc	r26, r1
 c74:	20 d0       	rcall	.+64     	; 0xcb6 <__ultoa_invert+0x84>
 c76:	09 f4       	brne	.+2      	; 0xc7a <__ultoa_invert+0x48>
 c78:	68 94       	set
 c7a:	3f 91       	pop	r19
 c7c:	2a e0       	ldi	r18, 0x0A	; 10
 c7e:	26 9f       	mul	r18, r22
 c80:	11 24       	eor	r1, r1
 c82:	30 19       	sub	r19, r0
 c84:	30 5d       	subi	r19, 0xD0	; 208
 c86:	31 93       	st	Z+, r19
 c88:	de f6       	brtc	.-74     	; 0xc40 <__ultoa_invert+0xe>
 c8a:	cf 01       	movw	r24, r30
 c8c:	08 95       	ret
 c8e:	46 2f       	mov	r20, r22
 c90:	47 70       	andi	r20, 0x07	; 7
 c92:	40 5d       	subi	r20, 0xD0	; 208
 c94:	41 93       	st	Z+, r20
 c96:	b3 e0       	ldi	r27, 0x03	; 3
 c98:	0f d0       	rcall	.+30     	; 0xcb8 <__ultoa_invert+0x86>
 c9a:	c9 f7       	brne	.-14     	; 0xc8e <__ultoa_invert+0x5c>
 c9c:	f6 cf       	rjmp	.-20     	; 0xc8a <__ultoa_invert+0x58>
 c9e:	46 2f       	mov	r20, r22
 ca0:	4f 70       	andi	r20, 0x0F	; 15
 ca2:	40 5d       	subi	r20, 0xD0	; 208
 ca4:	4a 33       	cpi	r20, 0x3A	; 58
 ca6:	18 f0       	brcs	.+6      	; 0xcae <__ultoa_invert+0x7c>
 ca8:	49 5d       	subi	r20, 0xD9	; 217
 caa:	31 fd       	sbrc	r19, 1
 cac:	40 52       	subi	r20, 0x20	; 32
 cae:	41 93       	st	Z+, r20
 cb0:	02 d0       	rcall	.+4      	; 0xcb6 <__ultoa_invert+0x84>
 cb2:	a9 f7       	brne	.-22     	; 0xc9e <__ultoa_invert+0x6c>
 cb4:	ea cf       	rjmp	.-44     	; 0xc8a <__ultoa_invert+0x58>
 cb6:	b4 e0       	ldi	r27, 0x04	; 4
 cb8:	a6 95       	lsr	r26
 cba:	97 95       	ror	r25
 cbc:	87 95       	ror	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	ba 95       	dec	r27
 cc4:	c9 f7       	brne	.-14     	; 0xcb8 <__ultoa_invert+0x86>
 cc6:	00 97       	sbiw	r24, 0x00	; 0
 cc8:	61 05       	cpc	r22, r1
 cca:	71 05       	cpc	r23, r1
 ccc:	08 95       	ret
 cce:	9b 01       	movw	r18, r22
 cd0:	ac 01       	movw	r20, r24
 cd2:	0a 2e       	mov	r0, r26
 cd4:	06 94       	lsr	r0
 cd6:	57 95       	ror	r21
 cd8:	47 95       	ror	r20
 cda:	37 95       	ror	r19
 cdc:	27 95       	ror	r18
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__ultoa_invert+0xa2>
 ce2:	62 0f       	add	r22, r18
 ce4:	73 1f       	adc	r23, r19
 ce6:	84 1f       	adc	r24, r20
 ce8:	95 1f       	adc	r25, r21
 cea:	a0 1d       	adc	r26, r0
 cec:	08 95       	ret

00000cee <_exit>:
 cee:	f8 94       	cli

00000cf0 <__stop_program>:
 cf0:	ff cf       	rjmp	.-2      	; 0xcf0 <__stop_program>
