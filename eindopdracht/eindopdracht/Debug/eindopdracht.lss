
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001076  0000110a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800126  00800126  00001130  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001849  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb5  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf4  00000000  00000000  00003836  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  0000452c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000727  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c15  00000000  00000000  00004fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
       2:	00 00       	nop
       4:	6f c1       	rjmp	.+734    	; 0x2e4 <__vector_1>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__vector_2>
       a:	00 00       	nop
       c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	12 c1       	rjmp	.+548    	; 0x256 <__vector_12>
      32:	00 00       	nop
      34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
      52:	00 00       	nop
      54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b0 02       	muls	r27, r16
      8e:	ec 02       	muls	r30, r28
      90:	b3 02       	muls	r27, r19
      92:	b6 02       	muls	r27, r22
      94:	b9 02       	muls	r27, r25
      96:	bc 02       	muls	r27, r28
      98:	bf 02       	muls	r27, r31
      9a:	c2 02       	muls	r28, r18
      9c:	c5 02       	muls	r28, r21
      9e:	c8 02       	muls	r28, r24
      a0:	e9 02       	muls	r30, r25
      a2:	cb 02       	muls	r28, r27
      a4:	e9 02       	muls	r30, r25
      a6:	ce 02       	muls	r28, r30
      a8:	d1 02       	muls	r29, r17
      aa:	d4 02       	muls	r29, r20
      ac:	d7 02       	muls	r29, r23
      ae:	da 02       	muls	r29, r26
      b0:	dd 02       	muls	r29, r29
      b2:	e0 02       	muls	r30, r16
      b4:	e3 02       	muls	r30, r19
      b6:	e9 02       	muls	r30, r25
      b8:	e9 02       	muls	r30, r25
      ba:	e9 02       	muls	r30, r25
      bc:	e6 02       	muls	r30, r22

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d0 e1       	ldi	r29, 0x10	; 16
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e6 e7       	ldi	r30, 0x76	; 118
      d2:	f0 e1       	ldi	r31, 0x10	; 16
      d4:	00 e0       	ldi	r16, 0x00	; 0
      d6:	0b bf       	out	0x3b, r16	; 59
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
      da:	07 90       	elpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a6 32       	cpi	r26, 0x26	; 38
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	a6 e2       	ldi	r26, 0x26	; 38
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a1 33       	cpi	r26, 0x31	; 49
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	1c d1       	rcall	.+568    	; 0x32e <main>
      f6:	bd c7       	rjmp	.+3962   	; 0x1072 <_exit>

000000f8 <__bad_interrupt>:
      f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <adc_init>:
#include <avr/io.h>
#include "adc.h"

//initialise the adc
void adc_init(){
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
      fa:	81 e6       	ldi	r24, 0x61	; 97
      fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
      fe:	86 ee       	ldi	r24, 0xE6	; 230
     100:	86 b9       	out	0x06, r24	; 6
     102:	08 95       	ret

00000104 <writeInitCommand_strobe_e>:
#include <stdio.h>
#include "lcd.h"

void writeInitCommand_strobe_e(unsigned char byte)
{
	byte &= 0xF0;
     104:	80 7f       	andi	r24, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
     106:	88 60       	ori	r24, 0x08	; 8
     108:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10a:	8f ec       	ldi	r24, 0xCF	; 207
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	01 97       	sbiw	r24, 0x01	; 1
     110:	f1 f7       	brne	.-4      	; 0x10e <writeInitCommand_strobe_e+0xa>
     112:	00 c0       	rjmp	.+0      	; 0x114 <writeInitCommand_strobe_e+0x10>
     114:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
     116:	85 b3       	in	r24, 0x15	; 21
     118:	87 7f       	andi	r24, 0xF7	; 247
     11a:	85 bb       	out	0x15, r24	; 21
     11c:	8f ec       	ldi	r24, 0xCF	; 207
     11e:	97 e0       	ldi	r25, 0x07	; 7
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <writeInitCommand_strobe_e+0x1c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <writeInitCommand_strobe_e+0x22>
     126:	00 00       	nop
     128:	08 95       	ret

0000012a <write2NibbleCommand_strobe_e>:
void write2NibbleCommand_strobe_e(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte &= 0xF0;
     12a:	98 2f       	mov	r25, r24
     12c:	90 7f       	andi	r25, 0xF0	; 240
	PORTC = byte | (1<<LCD_E);	// E high
     12e:	98 60       	ori	r25, 0x08	; 8
     130:	95 bb       	out	0x15, r25	; 21
     132:	ef ec       	ldi	r30, 0xCF	; 207
     134:	f7 e0       	ldi	r31, 0x07	; 7
     136:	31 97       	sbiw	r30, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <write2NibbleCommand_strobe_e+0xc>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <write2NibbleCommand_strobe_e+0x12>
     13c:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
     13e:	95 b3       	in	r25, 0x15	; 21
     140:	97 7f       	andi	r25, 0xF7	; 247
     142:	95 bb       	out	0x15, r25	; 21
     144:	ef ec       	ldi	r30, 0xCF	; 207
     146:	f7 e0       	ldi	r31, 0x07	; 7
     148:	31 97       	sbiw	r30, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <write2NibbleCommand_strobe_e+0x1e>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <write2NibbleCommand_strobe_e+0x24>
     14e:	00 00       	nop
	_delay_ms(1);				// nodig?
	
	// Second nibble
	byte = (tmpByte<<4);
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	PORTC = byte | (1<<LCD_E);	// E high
     154:	88 60       	ori	r24, 0x08	; 8
     156:	85 bb       	out	0x15, r24	; 21
     158:	8f ec       	ldi	r24, 0xCF	; 207
     15a:	97 e0       	ldi	r25, 0x07	; 7
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <write2NibbleCommand_strobe_e+0x32>
     160:	00 c0       	rjmp	.+0      	; 0x162 <write2NibbleCommand_strobe_e+0x38>
     162:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
     164:	85 b3       	in	r24, 0x15	; 21
     166:	87 7f       	andi	r24, 0xF7	; 247
     168:	85 bb       	out	0x15, r24	; 21
     16a:	ef ec       	ldi	r30, 0xCF	; 207
     16c:	f7 e0       	ldi	r31, 0x07	; 7
     16e:	31 97       	sbiw	r30, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <write2NibbleCommand_strobe_e+0x44>
     172:	00 c0       	rjmp	.+0      	; 0x174 <write2NibbleCommand_strobe_e+0x4a>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <write2NibbleData_Strobe_E>:
void write2NibbleData_Strobe_E(unsigned char byte)
{
	unsigned char tmpByte = byte;

	// First nibble.
	byte = byte & 0xF0;
     178:	98 2f       	mov	r25, r24
     17a:	90 7f       	andi	r25, 0xF0	; 240
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
     17c:	9c 60       	ori	r25, 0x0C	; 12
     17e:	95 bb       	out	0x15, r25	; 21
     180:	ef ec       	ldi	r30, 0xCF	; 207
     182:	f7 e0       	ldi	r31, 0x07	; 7
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <write2NibbleData_Strobe_E+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <write2NibbleData_Strobe_E+0x12>
     18a:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
     18c:	95 b3       	in	r25, 0x15	; 21
     18e:	97 7f       	andi	r25, 0xF7	; 247
     190:	95 bb       	out	0x15, r25	; 21
     192:	ef ec       	ldi	r30, 0xCF	; 207
     194:	f7 e0       	ldi	r31, 0x07	; 7
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <write2NibbleData_Strobe_E+0x1e>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <write2NibbleData_Strobe_E+0x24>
     19c:	00 00       	nop
	_delay_ms(1);				// nodig?

	// Second nibble
	byte = (tmpByte<<4);
     19e:	82 95       	swap	r24
     1a0:	80 7f       	andi	r24, 0xF0	; 240
	byte &= 0xF0;
	byte |= (1<<LCD_RS);  		// RS high
	PORTC = byte | (1<<LCD_E);	// E high
     1a2:	8c 60       	ori	r24, 0x0C	; 12
     1a4:	85 bb       	out	0x15, r24	; 21
     1a6:	8f ec       	ldi	r24, 0xCF	; 207
     1a8:	97 e0       	ldi	r25, 0x07	; 7
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <write2NibbleData_Strobe_E+0x32>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <write2NibbleData_Strobe_E+0x38>
     1b0:	00 00       	nop
	_delay_ms(1);				// nodig
	PORTC &= ~(1<<LCD_E);  		// E low
     1b2:	85 b3       	in	r24, 0x15	; 21
     1b4:	87 7f       	andi	r24, 0xF7	; 247
     1b6:	85 bb       	out	0x15, r24	; 21
     1b8:	ef ec       	ldi	r30, 0xCF	; 207
     1ba:	f7 e0       	ldi	r31, 0x07	; 7
     1bc:	31 97       	sbiw	r30, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <write2NibbleData_Strobe_E+0x44>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <write2NibbleData_Strobe_E+0x4a>
     1c2:	00 00       	nop
     1c4:	08 95       	ret

000001c6 <init_4bits_mode>:

void init_4bits_mode(void)
{
	// Step 2 (table 12)
	// function set
	writeInitCommand_strobe_e(0x20);
     1c6:	80 e2       	ldi	r24, 0x20	; 32
     1c8:	9d df       	rcall	.-198    	; 0x104 <writeInitCommand_strobe_e>

	// Step 3 (table 12)
	// function set
	write2NibbleCommand_strobe_e(0x28);
     1ca:	88 e2       	ldi	r24, 0x28	; 40
     1cc:	ae df       	rcall	.-164    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Display on/off control
	write2NibbleCommand_strobe_e(0x0F);
     1ce:	8f e0       	ldi	r24, 0x0F	; 15
     1d0:	ac df       	rcall	.-168    	; 0x12a <write2NibbleCommand_strobe_e>

	// Step 4 (table 12)
	// Entry mode set
	write2NibbleCommand_strobe_e(0x06);
     1d2:	86 e0       	ldi	r24, 0x06	; 6
     1d4:	aa cf       	rjmp	.-172    	; 0x12a <write2NibbleCommand_strobe_e>
     1d6:	08 95       	ret

000001d8 <lcd_write_string>:
     1d8:	cf 93       	push	r28
}

void lcd_write_string(char *str)
{
     1da:	df 93       	push	r29
     1dc:	ec 01       	movw	r28, r24
	// of met een for:
	for(;*str; str++){
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcd_write_string+0xc>
		write2NibbleData_Strobe_E(*str);
     1e0:	cb df       	rcall	.-106    	; 0x178 <write2NibbleData_Strobe_E>
}

void lcd_write_string(char *str)
{
	// of met een for:
	for(;*str; str++){
     1e2:	21 96       	adiw	r28, 0x01	; 1
     1e4:	88 81       	ld	r24, Y
     1e6:	81 11       	cpse	r24, r1
     1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <lcd_write_string+0x8>
		write2NibbleData_Strobe_E(*str);
	}
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <lcd_write_integer>:

void lcd_write_integer(int data)
{
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	60 97       	sbiw	r28, 0x10	; 16
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
	char data_out[16];
	memset(data_out, 0, sizeof(data_out[0]) * 16);
     208:	8e 01       	movw	r16, r28
     20a:	0f 5f       	subi	r16, 0xFF	; 255
     20c:	1f 4f       	sbci	r17, 0xFF	; 255
     20e:	20 e1       	ldi	r18, 0x10	; 16
     210:	f8 01       	movw	r30, r16
     212:	11 92       	st	Z+, r1
     214:	2a 95       	dec	r18
     216:	e9 f7       	brne	.-6      	; 0x212 <lcd_write_integer+0x22>
	sprintf(data_out, "%u", data);
     218:	9f 93       	push	r25
     21a:	8f 93       	push	r24
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	1f 93       	push	r17
     226:	0f 93       	push	r16
     228:	49 d4       	rcall	.+2194   	; 0xabc <sprintf>
	lcd_write_string(data_out);
     22a:	c8 01       	movw	r24, r16
     22c:	d5 df       	rcall	.-86     	; 0x1d8 <lcd_write_string>
}
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	60 96       	adiw	r28, 0x10	; 16
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	f8 94       	cli
     240:	de bf       	out	0x3e, r29	; 62
     242:	0f be       	out	0x3f, r0	; 63
     244:	cd bf       	out	0x3d, r28	; 61
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	08 95       	ret

00000250 <lcd_clear>:

void lcd_clear()
{
	write2NibbleCommand_strobe_e (0x01);
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	6b cf       	rjmp	.-298    	; 0x12a <write2NibbleCommand_strobe_e>
     254:	08 95       	ret

00000256 <__vector_12>:
static int number = 0;
static int text_id = 0;
static bool change_text = false;

//compare timer set with 256 prescaler, to scroll 7-seg display
ISR( TIMER1_COMPA_vect ) {
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
     260:	0b b6       	in	r0, 0x3b	; 59
     262:	0f 92       	push	r0
     264:	2f 93       	push	r18
     266:	3f 93       	push	r19
     268:	4f 93       	push	r20
     26a:	5f 93       	push	r21
     26c:	6f 93       	push	r22
     26e:	7f 93       	push	r23
     270:	8f 93       	push	r24
     272:	9f 93       	push	r25
     274:	af 93       	push	r26
     276:	bf 93       	push	r27
     278:	ef 93       	push	r30
     27a:	ff 93       	push	r31
	//read out the 10 bit value
	number = ADCH << 2;
     27c:	85 b1       	in	r24, 0x05	; 5
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
	number |= ADCL >> 6;
     288:	24 b1       	in	r18, 0x04	; 4
     28a:	22 95       	swap	r18
     28c:	26 95       	lsr	r18
     28e:	26 95       	lsr	r18
     290:	23 70       	andi	r18, 0x03	; 3
     292:	82 2b       	or	r24, r18
	
	//10.240 + 54 * 1024(max 10 bit value) = 65536(max value of an 16 bit integer)
	timer_set_compare_value(64*number);
     294:	00 24       	eor	r0, r0
     296:	96 95       	lsr	r25
     298:	87 95       	ror	r24
     29a:	07 94       	ror	r0
     29c:	96 95       	lsr	r25
     29e:	87 95       	ror	r24
     2a0:	07 94       	ror	r0
     2a2:	98 2f       	mov	r25, r24
     2a4:	80 2d       	mov	r24, r0
     2a6:	57 d2       	rcall	.+1198   	; 0x756 <timer_set_compare_value>
	
	//move the text on the 7-seg display
	if(right_direction){
     2a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <right_direction>
     2ac:	88 23       	and	r24, r24
     2ae:	21 f0       	breq	.+8      	; 0x2b8 <__vector_12+0x62>
		spi_moveText(1);
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	dd d1       	rcall	.+954    	; 0x670 <spi_moveText>
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <__vector_12+0x68>
	} else {
		spi_moveText(-1);
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	9f ef       	ldi	r25, 0xFF	; 255
     2bc:	d9 d1       	rcall	.+946    	; 0x670 <spi_moveText>
	}
	
	
}
     2be:	ff 91       	pop	r31
     2c0:	ef 91       	pop	r30
     2c2:	bf 91       	pop	r27
     2c4:	af 91       	pop	r26
     2c6:	9f 91       	pop	r25
     2c8:	8f 91       	pop	r24
     2ca:	7f 91       	pop	r23
     2cc:	6f 91       	pop	r22
     2ce:	5f 91       	pop	r21
     2d0:	4f 91       	pop	r20
     2d2:	3f 91       	pop	r19
     2d4:	2f 91       	pop	r18
     2d6:	0f 90       	pop	r0
     2d8:	0b be       	out	0x3b, r0	; 59
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_1>:

//react to button pres to change the direction the 7-seg display scrolls
ISR( INT0_vect ) {
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	8f 93       	push	r24
    if(right_direction){
     2f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <right_direction>
     2f4:	88 23       	and	r24, r24
     2f6:	19 f0       	breq	.+6      	; 0x2fe <__vector_1+0x1a>
		right_direction = false;
     2f8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <right_direction>
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <__vector_1+0x20>
	} else {
		right_direction = true;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <right_direction>
	}
}
     304:	8f 91       	pop	r24
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_2>:

//change diplayed text
ISR( INT1_vect ) {
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
	change_text = true;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}
     322:	8f 91       	pop	r24
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <main>:

int main(void)
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	00 d0       	rcall	.+0      	; 0x334 <main+0x6>
     334:	00 d0       	rcall	.+0      	; 0x336 <main+0x8>
     336:	00 d0       	rcall	.+0      	; 0x338 <main+0xa>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
	//lcd
	DDRC = 0xFF;
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     340:	15 ba       	out	0x15, r1	; 21
	
	init_4bits_mode();
     342:	41 df       	rcall	.-382    	; 0x1c6 <init_4bits_mode>
	lcd_clear();
     344:	85 df       	rcall	.-246    	; 0x250 <lcd_clear>
     346:	81 e0       	ldi	r24, 0x01	; 1
	
	//spi
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
     348:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
     34a:	bd d0       	rcall	.+378    	; 0x4c6 <spi_masterInit>
     34c:	f1 d0       	rcall	.+482    	; 0x530 <spi_displayDriverInit>
	spi_displayDriverInit();            // Initialize display chip
     34e:	11 e0       	ldi	r17, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
     350:	09 c0       	rjmp	.+18     	; 0x364 <main+0x36>
	{
		spi_slaveSelect(0); 		// Select display chip
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	c7 d0       	rcall	.+398    	; 0x4e4 <spi_slaveSelect>
		spi_write(i);  				// 	digit adress: (digit place)
     356:	81 2f       	mov	r24, r17
     358:	c1 d0       	rcall	.+386    	; 0x4dc <spi_write>
		spi_write(0);				// 	digit value: 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	bf d0       	rcall	.+382    	; 0x4dc <spi_write>
     35e:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0);		// Deselect display chip
     360:	cd d0       	rcall	.+410    	; 0x4fc <spi_slaveDeSelect>
     362:	1f 5f       	subi	r17, 0xFF	; 255
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	spi_displayDriverInit();            // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
     364:	15 30       	cpi	r17, 0x05	; 5
     366:	a8 f3       	brcs	.-22     	; 0x352 <main+0x24>
     368:	89 e1       	ldi	r24, 0x19	; 25
		spi_write(i);  				// 	digit adress: (digit place)
		spi_write(0);				// 	digit value: 0
		spi_slaveDeSelect(0);		// Deselect display chip
	}
	
	char *texts[] = {((char *) malloc(sizeof(char) * 25)), ((char *) malloc(sizeof(char) * 25)), ((char *) malloc(sizeof(char) * 25))};
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	7e d2       	rcall	.+1276   	; 0x86a <malloc>
     36e:	8c 01       	movw	r16, r24
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	89 e1       	ldi	r24, 0x19	; 25
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	78 d2       	rcall	.+1264   	; 0x86a <malloc>
     37a:	6c 01       	movw	r12, r24
     37c:	9c 83       	std	Y+4, r25	; 0x04
     37e:	8b 83       	std	Y+3, r24	; 0x03
     380:	89 e1       	ldi	r24, 0x19	; 25
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	72 d2       	rcall	.+1252   	; 0x86a <malloc>
     386:	9c 01       	movw	r18, r24
     388:	9e 83       	std	Y+6, r25	; 0x06
     38a:	8d 83       	std	Y+5, r24	; 0x05
     38c:	0f 2e       	mov	r0, r31
     38e:	f1 e6       	ldi	r31, 0x61	; 97
	snprintf(texts[0], 25, "a");
     390:	ef 2e       	mov	r14, r31
     392:	f1 2c       	mov	r15, r1
     394:	f0 2d       	mov	r31, r0
     396:	f8 01       	movw	r30, r16
     398:	f1 82       	std	Z+1, r15	; 0x01
     39a:	e0 82       	st	Z, r14
     39c:	86 e0       	ldi	r24, 0x06	; 6
     39e:	ea e0       	ldi	r30, 0x0A	; 10
	snprintf(texts[1], 25, "hallo");
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	d6 01       	movw	r26, r12
     3a4:	01 90       	ld	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	8a 95       	dec	r24
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x76>
     3ac:	9d e0       	ldi	r25, 0x0D	; 13
	snprintf(texts[2], 25, "langere text");
     3ae:	e0 e1       	ldi	r30, 0x10	; 16
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	d9 01       	movw	r26, r18
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	9a 95       	dec	r25
	
	spi_setText(texts[0]);
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x86>
     3bc:	c8 01       	movw	r24, r16
     3be:	52 d1       	rcall	.+676    	; 0x664 <spi_setText>
		
	//adc initialization
	DDRF = 0x00;				// set PORTF for input (ADC)
     3c0:	f7 01       	movw	r30, r14
     3c2:	10 82       	st	Z, r1
	DDRA = 0xFF;				// set PORTA for output
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	8a bb       	out	0x1a, r24	; 26
	adc_init();
     3c8:	98 de       	rcall	.-720    	; 0xfa <adc_init>
     3ca:	85 b1       	in	r24, 0x05	; 5
	
	//read the 10 bits from the adc into number
	number = ADCH << 2;
     3cc:	84 b1       	in	r24, 0x04	; 4
	number |= ADCL >> 6;
     3ce:	b8 d1       	rcall	.+880    	; 0x740 <timer_init>

	//timer initialization
	timer_init();
     3d0:	85 b1       	in	r24, 0x05	; 5
     3d2:	90 e0       	ldi	r25, 0x00	; 0
	number = ADCH << 2;
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	24 b1       	in	r18, 0x04	; 4
	number |= ADCL >> 6;
     3de:	22 95       	swap	r18
     3e0:	26 95       	lsr	r18
     3e2:	26 95       	lsr	r18
     3e4:	23 70       	andi	r18, 0x03	; 3
     3e6:	82 2b       	or	r24, r18
     3e8:	9c 01       	movw	r18, r24
	timer_set_compare_value(6*number);
     3ea:	22 0f       	add	r18, r18
     3ec:	33 1f       	adc	r19, r19
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	af d1       	rcall	.+862    	; 0x756 <timer_set_compare_value>
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	82 b9       	out	0x02, r24	; 2
	
	//interupt initialization
	DDRE = 0x02;			// PORTE 0, 1 input	
     3fc:	ea e6       	ldi	r30, 0x6A	; 106
     3fe:	f0 e0       	ldi	r31, 0x00	; 0

	// Init Interrupt hardware
	EICRA |= 0x03;			// INT0 rising edge
     400:	80 81       	ld	r24, Z
     402:	83 60       	ori	r24, 0x03	; 3
     404:	80 83       	st	Z, r24
     406:	89 b7       	in	r24, 0x39	; 57
     408:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= 0x01;			// Enable INT0
     40a:	89 bf       	out	0x39, r24	; 57
     40c:	78 94       	sei
     40e:	85 b1       	in	r24, 0x05	; 5
	
	//enable global interupts
	sei();
     410:	8b bb       	out	0x1b, r24	; 27
	
    while (1) 
    {

		PORTA = ADCH;
     412:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
		
		if(change_text){
     416:	88 23       	and	r24, r24
     418:	11 f1       	breq	.+68     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     41a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
			change_text = false;
     41e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <text_id>
			if(text_id + 1 > 2){
     422:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <text_id+0x1>
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	83 30       	cpi	r24, 0x03	; 3
     42a:	91 05       	cpc	r25, r1
     42c:	2c f0       	brlt	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <text_id+0x1>
				text_id = 0;
     432:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <text_id>
     436:	04 c0       	rjmp	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     438:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <text_id+0x1>
			} else{
				text_id++;
     43c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <text_id>
     440:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <text_id>
			}
			spi_setText(texts[text_id]);
     444:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <text_id+0x1>
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	8c 0f       	add	r24, r28
     452:	9d 1f       	adc	r25, r29
     454:	e8 0f       	add	r30, r24
     456:	f9 1f       	adc	r31, r25
     458:	80 81       	ld	r24, Z
     45a:	91 81       	ldd	r25, Z+1	; 0x01
     45c:	03 d1       	rcall	.+518    	; 0x664 <spi_setText>
     45e:	f8 de       	rcall	.-528    	; 0x250 <lcd_clear>
		}
		
		//write the full string and speed to the lcd, "<text> - <speed> hz"
		lcd_clear();
     460:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <text_id>
		lcd_write_string(texts[text_id]);
     464:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <text_id+0x1>
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	8c 0f       	add	r24, r28
     472:	9d 1f       	adc	r25, r29
     474:	e8 0f       	add	r30, r24
     476:	f9 1f       	adc	r31, r25
     478:	80 81       	ld	r24, Z
		wait(3);
     47a:	91 81       	ldd	r25, Z+1	; 0x01
     47c:	ad de       	rcall	.-678    	; 0x1d8 <lcd_write_string>
     47e:	83 e0       	ldi	r24, 0x03	; 3
		lcd_write_string(" - ");
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	12 d0       	rcall	.+36     	; 0x4a8 <wait>
     484:	8d e1       	ldi	r24, 0x1D	; 29
     486:	91 e0       	ldi	r25, 0x01	; 1
		wait(3);
     488:	a7 de       	rcall	.-690    	; 0x1d8 <lcd_write_string>
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0c d0       	rcall	.+24     	; 0x4a8 <wait>
		lcd_write_integer(timer_get_hz());
     490:	73 d1       	rcall	.+742    	; 0x778 <timer_get_hz>
     492:	ae de       	rcall	.-676    	; 0x1f0 <lcd_write_integer>
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e0       	ldi	r25, 0x00	; 0
		wait(3);
     498:	07 d0       	rcall	.+14     	; 0x4a8 <wait>
     49a:	81 e2       	ldi	r24, 0x21	; 33
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	9c de       	rcall	.-712    	; 0x1d8 <lcd_write_string>
		lcd_write_string(" Hz");
     4a0:	88 ee       	ldi	r24, 0xE8	; 232
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	01 d0       	rcall	.+2      	; 0x4a8 <wait>
     4a6:	b3 cf       	rjmp	.-154    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

000004a8 <wait>:
		
		wait(1000);
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	08 c0       	rjmp	.+16     	; 0x4be <wait+0x16>
     4ae:	ef ec       	ldi	r30, 0xCF	; 207
    }
     4b0:	f7 e0       	ldi	r31, 0x07	; 7
void spi_displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
     4b2:	31 97       	sbiw	r30, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <wait+0xa>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <wait+0x10>
     4b8:	00 00       	nop
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	ac f3       	brlt	.-22     	; 0x4ae <wait+0x6>
     4c4:	08 95       	ret

000004c6 <spi_masterInit>:
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	87 bb       	out	0x17, r24	; 23
     4ca:	87 b3       	in	r24, 0x17	; 23
     4cc:	87 7f       	andi	r24, 0xF7	; 247
     4ce:	87 bb       	out	0x17, r24	; 23
     4d0:	88 b3       	in	r24, 0x18	; 24
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	88 bb       	out	0x18, r24	; 24
     4d6:	82 e5       	ldi	r24, 0x52	; 82
     4d8:	8d b9       	out	0x0d, r24	; 13
     4da:	08 95       	ret

000004dc <spi_write>:
     4dc:	8f b9       	out	0x0f, r24	; 15
     4de:	77 9b       	sbis	0x0e, 7	; 14
     4e0:	fe cf       	rjmp	.-4      	; 0x4de <spi_write+0x2>
     4e2:	08 95       	ret

000004e4 <spi_slaveSelect>:
     4e4:	98 b3       	in	r25, 0x18	; 24
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <spi_slaveSelect+0xc>
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	8a 95       	dec	r24
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <spi_slaveSelect+0x8>
     4f4:	20 95       	com	r18
     4f6:	29 23       	and	r18, r25
     4f8:	28 bb       	out	0x18, r18	; 24
     4fa:	08 95       	ret

000004fc <spi_slaveDeSelect>:
     4fc:	98 b3       	in	r25, 0x18	; 24
     4fe:	21 e0       	ldi	r18, 0x01	; 1
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	02 c0       	rjmp	.+4      	; 0x508 <spi_slaveDeSelect+0xc>
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	8a 95       	dec	r24
     50a:	e2 f7       	brpl	.-8      	; 0x504 <spi_slaveDeSelect+0x8>
     50c:	29 2b       	or	r18, r25
     50e:	28 bb       	out	0x18, r18	; 24
     510:	08 95       	ret

00000512 <spi_writeWord>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	d8 2f       	mov	r29, r24
     518:	c6 2f       	mov	r28, r22
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	e3 df       	rcall	.-58     	; 0x4e4 <spi_slaveSelect>
     51e:	8d 2f       	mov	r24, r29
     520:	dd df       	rcall	.-70     	; 0x4dc <spi_write>
     522:	8c 2f       	mov	r24, r28
     524:	db df       	rcall	.-74     	; 0x4dc <spi_write>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	e9 df       	rcall	.-46     	; 0x4fc <spi_slaveDeSelect>
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <spi_displayDriverInit>:
     530:	6f ef       	ldi	r22, 0xFF	; 255
     532:	89 e0       	ldi	r24, 0x09	; 9
     534:	ee df       	rcall	.-36     	; 0x512 <spi_writeWord>
     536:	64 e0       	ldi	r22, 0x04	; 4
     538:	8a e0       	ldi	r24, 0x0A	; 10
     53a:	eb df       	rcall	.-42     	; 0x512 <spi_writeWord>
     53c:	63 e0       	ldi	r22, 0x03	; 3
     53e:	8b e0       	ldi	r24, 0x0B	; 11
     540:	e8 df       	rcall	.-48     	; 0x512 <spi_writeWord>
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	8c e0       	ldi	r24, 0x0C	; 12
     546:	e5 cf       	rjmp	.-54     	; 0x512 <spi_writeWord>
     548:	08 95       	ret

0000054a <spi_getCharacterCode>:
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
	spi_writeText(newText);
}

int spi_getCharacterCode(char character) {
	switch (toupper(character)) {
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	af d2       	rcall	.+1374   	; 0xaac <toupper>
     54e:	81 54       	subi	r24, 0x41	; 65
     550:	91 09       	sbc	r25, r1
     552:	89 31       	cpi	r24, 0x19	; 25
     554:	91 05       	cpc	r25, r1
     556:	e8 f5       	brcc	.+122    	; 0x5d2 <spi_getCharacterCode+0x88>
     558:	8a 5b       	subi	r24, 0xBA	; 186
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	fc 01       	movw	r30, r24
     55e:	46 c1       	rjmp	.+652    	; 0x7ec <__tablejump2__>
		case 'A':
			return 0x77;
     560:	87 e7       	ldi	r24, 0x77	; 119
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	08 95       	ret
		case 'B':
			return 0x1F;
		case 'C':
			return 0x4E;
     566:	8e e4       	ldi	r24, 0x4E	; 78
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	08 95       	ret
		case 'D':
			return 0x3D;
     56c:	8d e3       	ldi	r24, 0x3D	; 61
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	08 95       	ret
		case 'E':
			return 0x4F;
     572:	8f e4       	ldi	r24, 0x4F	; 79
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	08 95       	ret
		case 'F':
			return 0x47;
     578:	87 e4       	ldi	r24, 0x47	; 71
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	08 95       	ret
		case 'G':
			return 0x5E;
     57e:	8e e5       	ldi	r24, 0x5E	; 94
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	08 95       	ret
		case 'H':
			return 0x37;
     584:	87 e3       	ldi	r24, 0x37	; 55
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	08 95       	ret
		case 'I':
			return 0x06;
     58a:	86 e0       	ldi	r24, 0x06	; 6
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	08 95       	ret
		case 'J':
			return 0x3C;
     590:	8c e3       	ldi	r24, 0x3C	; 60
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	08 95       	ret
		case 'L':
			return 0x0E;
     596:	8e e0       	ldi	r24, 0x0E	; 14
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	08 95       	ret
		case 'N':
			return 0x15;
     59c:	85 e1       	ldi	r24, 0x15	; 21
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	08 95       	ret
		case 'O':
			return 0x7E;
     5a2:	8e e7       	ldi	r24, 0x7E	; 126
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	08 95       	ret
		case 'P':
			return 0x67;
     5a8:	87 e6       	ldi	r24, 0x67	; 103
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	08 95       	ret
		case 'Q':
			return 0x73;
     5ae:	83 e7       	ldi	r24, 0x73	; 115
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret
		case 'R':
			return 0x05;
     5b4:	85 e0       	ldi	r24, 0x05	; 5
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	08 95       	ret
		case 'S':
			return 0x5B;
     5ba:	8b e5       	ldi	r24, 0x5B	; 91
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	08 95       	ret
		case 'T':
			return 0x0F;
     5c0:	8f e0       	ldi	r24, 0x0F	; 15
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	08 95       	ret
		case 'U':
			return 0x3E;
     5c6:	8e e3       	ldi	r24, 0x3E	; 62
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	08 95       	ret
		case 'Y':
			return 0x3B;
     5cc:	8b e3       	ldi	r24, 0x3B	; 59
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret
		default:
			return 0x00;  // return 0x00 for any other character
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	08 95       	ret
int spi_getCharacterCode(char character) {
	switch (toupper(character)) {
		case 'A':
			return 0x77;
		case 'B':
			return 0x1F;
     5d8:	8f e1       	ldi	r24, 0x1F	; 31
     5da:	90 e0       	ldi	r25, 0x00	; 0
		case 'Y':
			return 0x3B;
		default:
			return 0x00;  // return 0x00 for any other character
	}
}
     5dc:	08 95       	ret

000005de <spi_writeCharacter>:
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
}

void spi_writeCharacter(char character, char index) {
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	d8 2f       	mov	r29, r24
     5e4:	c6 2f       	mov	r28, r22
	spi_writeWord(0x9, 0);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	89 e0       	ldi	r24, 0x09	; 9
     5ea:	93 df       	rcall	.-218    	; 0x512 <spi_writeWord>
	spi_writeWord(index, spi_getCharacterCode(character));
     5ec:	8d 2f       	mov	r24, r29
     5ee:	ad df       	rcall	.-166    	; 0x54a <spi_getCharacterCode>
     5f0:	68 2f       	mov	r22, r24
     5f2:	8c 2f       	mov	r24, r28
     5f4:	8e df       	rcall	.-228    	; 0x512 <spi_writeWord>
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <spi_writeText>:
void spi_setText(char *str) {
	text = str;
	spi_writeText(str);
}

void spi_writeText(char *string) {
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
	while(strlen(string) < 4){
     60a:	06 c0       	rjmp	.+12     	; 0x618 <spi_writeText+0x1c>
		strcat(string, " ");
     60c:	ec 0f       	add	r30, r28
     60e:	fd 1f       	adc	r31, r29
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	91 83       	std	Z+1, r25	; 0x01
     616:	80 83       	st	Z, r24
	text = str;
	spi_writeText(str);
}

void spi_writeText(char *string) {
	while(strlen(string) < 4){
     618:	fe 01       	movw	r30, r28
     61a:	01 90       	ld	r0, Z+
     61c:	00 20       	and	r0, r0
     61e:	e9 f7       	brne	.-6      	; 0x61a <spi_writeText+0x1e>
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	ec 1b       	sub	r30, r28
     624:	fd 0b       	sbc	r31, r29
     626:	e4 30       	cpi	r30, 0x04	; 4
     628:	f1 05       	cpc	r31, r1
     62a:	80 f3       	brcs	.-32     	; 0x60c <spi_writeText+0x10>
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	68 94       	set
     632:	ee 24       	eor	r14, r14
     634:	e2 f8       	bld	r14, 2
     636:	f1 2c       	mov	r15, r1
     638:	0b c0       	rjmp	.+22     	; 0x650 <spi_writeText+0x54>
		strcat(string, " ");
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
		spi_writeCharacter(string[i], j);
     63a:	fe 01       	movw	r30, r28
     63c:	e0 0f       	add	r30, r16
     63e:	f1 1f       	adc	r31, r17
     640:	6e 2d       	mov	r22, r14
     642:	80 81       	ld	r24, Z
     644:	cc df       	rcall	.-104    	; 0x5de <spi_writeCharacter>
	while(strlen(string) < 4){
		strcat(string, " ");
	}
	
	int j = 4;
	for (int i = 0; i < 4; i++, j--) {
     646:	0f 5f       	subi	r16, 0xFF	; 255
     648:	1f 4f       	sbci	r17, 0xFF	; 255
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	e8 1a       	sub	r14, r24
     64e:	f1 08       	sbc	r15, r1
     650:	04 30       	cpi	r16, 0x04	; 4
     652:	11 05       	cpc	r17, r1
     654:	94 f3       	brlt	.-28     	; 0x63a <spi_writeText+0x3e>
		spi_writeCharacter(string[i], j);
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	08 95       	ret

00000664 <spi_setText>:
void spi_writeCharacter(char character, char index) {
	spi_writeWord(0x9, 0);
	spi_writeWord(index, spi_getCharacterCode(character));
}
void spi_setText(char *str) {
	text = str;
     664:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <text+0x1>
     668:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <text>
	spi_writeText(str);
     66c:	c7 cf       	rjmp	.-114    	; 0x5fc <spi_writeText>
     66e:	08 95       	ret

00000670 <spi_moveText>:
	for (int i = 0; i < 4; i++, j--) {
		spi_writeCharacter(string[i], j);
	}
}

void spi_moveText(int steps) {
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	00 d0       	rcall	.+0      	; 0x67a <spi_moveText+0xa>
     67a:	00 d0       	rcall	.+0      	; 0x67c <spi_moveText+0xc>
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
	int len = strlen(text)+1;
     682:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <text>
     686:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <text+0x1>
     68a:	f8 01       	movw	r30, r16
     68c:	01 90       	ld	r0, Z+
     68e:	00 20       	and	r0, r0
     690:	e9 f7       	brne	.-6      	; 0x68c <spi_moveText+0x1c>
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	9f 01       	movw	r18, r30
     696:	20 1b       	sub	r18, r16
     698:	31 0b       	sbc	r19, r17
     69a:	2f 5f       	subi	r18, 0xFF	; 255
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	62 2f       	mov	r22, r18
     6a0:	73 2f       	mov	r23, r19
	position+=steps;
     6a2:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <position>
     6a6:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <position+0x1>
     6aa:	48 0f       	add	r20, r24
     6ac:	59 1f       	adc	r21, r25
     6ae:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <position+0x1>
     6b2:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <position>
	if(position < 0){
     6b6:	55 23       	and	r21, r21
     6b8:	3c f4       	brge	.+14     	; 0x6c8 <spi_moveText+0x58>
		position = len + steps-1;
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <position+0x1>
     6c4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <position>
	}
	position%=len;
     6c8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <position>
     6cc:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <position+0x1>
     6d0:	5e d0       	rcall	.+188    	; 0x78e <__divmodhi4>
     6d2:	fc 01       	movw	r30, r24
     6d4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <position+0x1>
     6d8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <position>
	char newText[] = {text[(position)%(len-1)],text[(1+position)%(len-1)],text[(2+position)%(len-1)],text[(3+position)%(len-1)], 0} ;
     6dc:	21 50       	subi	r18, 0x01	; 1
     6de:	31 09       	sbc	r19, r1
     6e0:	b9 01       	movw	r22, r18
     6e2:	55 d0       	rcall	.+170    	; 0x78e <__divmodhi4>
     6e4:	d8 01       	movw	r26, r16
     6e6:	a8 0f       	add	r26, r24
     6e8:	b9 1f       	adc	r27, r25
     6ea:	8c 91       	ld	r24, X
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	cf 01       	movw	r24, r30
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	b9 01       	movw	r22, r18
     6f4:	4c d0       	rcall	.+152    	; 0x78e <__divmodhi4>
     6f6:	d8 01       	movw	r26, r16
     6f8:	a8 0f       	add	r26, r24
     6fa:	b9 1f       	adc	r27, r25
     6fc:	8c 91       	ld	r24, X
     6fe:	8a 83       	std	Y+2, r24	; 0x02
     700:	cf 01       	movw	r24, r30
     702:	02 96       	adiw	r24, 0x02	; 2
     704:	b9 01       	movw	r22, r18
     706:	43 d0       	rcall	.+134    	; 0x78e <__divmodhi4>
     708:	d8 01       	movw	r26, r16
     70a:	a8 0f       	add	r26, r24
     70c:	b9 1f       	adc	r27, r25
     70e:	8c 91       	ld	r24, X
     710:	8b 83       	std	Y+3, r24	; 0x03
     712:	cf 01       	movw	r24, r30
     714:	03 96       	adiw	r24, 0x03	; 3
     716:	b9 01       	movw	r22, r18
     718:	3a d0       	rcall	.+116    	; 0x78e <__divmodhi4>
     71a:	f8 01       	movw	r30, r16
     71c:	e8 0f       	add	r30, r24
     71e:	f9 1f       	adc	r31, r25
     720:	80 81       	ld	r24, Z
     722:	8c 83       	std	Y+4, r24	; 0x04
     724:	1d 82       	std	Y+5, r1	; 0x05
	spi_writeText(newText);
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	68 df       	rcall	.-304    	; 0x5fc <spi_writeText>
     72c:	0f 90       	pop	r0
}
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
 
 //init a timer resulting in 10 Hz
void timer_init(){
	OCR1A = 31250; // 16-bits compare value of counter 1
     740:	82 e1       	ldi	r24, 0x12	; 18
     742:	9a e7       	ldi	r25, 0x7A	; 122
     744:	9b bd       	out	0x2b, r25	; 43
     746:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0b00000000;
     748:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // // Initialize T1: timer, prescaler = 256, compare output disconnected, CTC, RUN
     74a:	8c e0       	ldi	r24, 0x0C	; 12
     74c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<4); // T1 compare match A interrupt enable
     74e:	87 b7       	in	r24, 0x37	; 55
     750:	80 61       	ori	r24, 0x10	; 16
     752:	87 bf       	out	0x37, r24	; 55
     754:	08 95       	ret

00000756 <timer_set_compare_value>:
}

//set the compare value, starting at 10240, allowing the timer to be between 30.5 Hz and 4.76 Hz
void timer_set_compare_value(int value){
	//check for overflow
	if(10240 + value > 0xFFFF || 10000 + value < 10000){
     756:	9c 01       	movw	r18, r24
     758:	20 5f       	subi	r18, 0xF0	; 240
     75a:	38 4d       	sbci	r19, 0xD8	; 216
     75c:	20 31       	cpi	r18, 0x10	; 16
     75e:	37 42       	sbci	r19, 0x27	; 39
     760:	2c f4       	brge	.+10     	; 0x76c <timer_set_compare_value+0x16>
		OCR1A = 0xFFFF;
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	9f ef       	ldi	r25, 0xFF	; 255
     766:	9b bd       	out	0x2b, r25	; 43
     768:	8a bd       	out	0x2a, r24	; 42
     76a:	03 c0       	rjmp	.+6      	; 0x772 <timer_set_compare_value+0x1c>
	} else{
		OCR1A = (10240+value);
     76c:	98 5d       	subi	r25, 0xD8	; 216
     76e:	9b bd       	out	0x2b, r25	; 43
     770:	8a bd       	out	0x2a, r24	; 42
	}
	
	TCNT1 = 0x00;
     772:	1d bc       	out	0x2d, r1	; 45
     774:	1c bc       	out	0x2c, r1	; 44
     776:	08 95       	ret

00000778 <timer_get_hz>:
	
}

//calculate the hz of the current timer (80 Mhz / 256 prescaler / current compare value)
int timer_get_hz(){
	return 312500/OCR1A;
     778:	2a b5       	in	r18, 0x2a	; 42
     77a:	3b b5       	in	r19, 0x2b	; 43
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	64 eb       	ldi	r22, 0xB4	; 180
     782:	74 ec       	ldi	r23, 0xC4	; 196
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	15 d0       	rcall	.+42     	; 0x7b4 <__divmodsi4>
}
     78a:	c9 01       	movw	r24, r18
     78c:	08 95       	ret

0000078e <__divmodhi4>:
     78e:	97 fb       	bst	r25, 7
     790:	07 2e       	mov	r0, r23
     792:	16 f4       	brtc	.+4      	; 0x798 <__divmodhi4+0xa>
     794:	00 94       	com	r0
     796:	06 d0       	rcall	.+12     	; 0x7a4 <__divmodhi4_neg1>
     798:	77 fd       	sbrc	r23, 7
     79a:	08 d0       	rcall	.+16     	; 0x7ac <__divmodhi4_neg2>
     79c:	30 d0       	rcall	.+96     	; 0x7fe <__udivmodhi4>
     79e:	07 fc       	sbrc	r0, 7
     7a0:	05 d0       	rcall	.+10     	; 0x7ac <__divmodhi4_neg2>
     7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__divmodhi4_exit>

000007a4 <__divmodhi4_neg1>:
     7a4:	90 95       	com	r25
     7a6:	81 95       	neg	r24
     7a8:	9f 4f       	sbci	r25, 0xFF	; 255
     7aa:	08 95       	ret

000007ac <__divmodhi4_neg2>:
     7ac:	70 95       	com	r23
     7ae:	61 95       	neg	r22
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255

000007b2 <__divmodhi4_exit>:
     7b2:	08 95       	ret

000007b4 <__divmodsi4>:
     7b4:	05 2e       	mov	r0, r21
     7b6:	97 fb       	bst	r25, 7
     7b8:	16 f4       	brtc	.+4      	; 0x7be <__divmodsi4+0xa>
     7ba:	00 94       	com	r0
     7bc:	0f d0       	rcall	.+30     	; 0x7dc <__negsi2>
     7be:	57 fd       	sbrc	r21, 7
     7c0:	05 d0       	rcall	.+10     	; 0x7cc <__divmodsi4_neg2>
     7c2:	31 d0       	rcall	.+98     	; 0x826 <__udivmodsi4>
     7c4:	07 fc       	sbrc	r0, 7
     7c6:	02 d0       	rcall	.+4      	; 0x7cc <__divmodsi4_neg2>
     7c8:	46 f4       	brtc	.+16     	; 0x7da <__divmodsi4_exit>
     7ca:	08 c0       	rjmp	.+16     	; 0x7dc <__negsi2>

000007cc <__divmodsi4_neg2>:
     7cc:	50 95       	com	r21
     7ce:	40 95       	com	r20
     7d0:	30 95       	com	r19
     7d2:	21 95       	neg	r18
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	4f 4f       	sbci	r20, 0xFF	; 255
     7d8:	5f 4f       	sbci	r21, 0xFF	; 255

000007da <__divmodsi4_exit>:
     7da:	08 95       	ret

000007dc <__negsi2>:
     7dc:	90 95       	com	r25
     7de:	80 95       	com	r24
     7e0:	70 95       	com	r23
     7e2:	61 95       	neg	r22
     7e4:	7f 4f       	sbci	r23, 0xFF	; 255
     7e6:	8f 4f       	sbci	r24, 0xFF	; 255
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	08 95       	ret

000007ec <__tablejump2__>:
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	00 24       	eor	r0, r0
     7f2:	00 1c       	adc	r0, r0
     7f4:	0b be       	out	0x3b, r0	; 59
     7f6:	07 90       	elpm	r0, Z+
     7f8:	f6 91       	elpm	r31, Z
     7fa:	e0 2d       	mov	r30, r0
     7fc:	09 94       	ijmp

000007fe <__udivmodhi4>:
     7fe:	aa 1b       	sub	r26, r26
     800:	bb 1b       	sub	r27, r27
     802:	51 e1       	ldi	r21, 0x11	; 17
     804:	07 c0       	rjmp	.+14     	; 0x814 <__udivmodhi4_ep>

00000806 <__udivmodhi4_loop>:
     806:	aa 1f       	adc	r26, r26
     808:	bb 1f       	adc	r27, r27
     80a:	a6 17       	cp	r26, r22
     80c:	b7 07       	cpc	r27, r23
     80e:	10 f0       	brcs	.+4      	; 0x814 <__udivmodhi4_ep>
     810:	a6 1b       	sub	r26, r22
     812:	b7 0b       	sbc	r27, r23

00000814 <__udivmodhi4_ep>:
     814:	88 1f       	adc	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	5a 95       	dec	r21
     81a:	a9 f7       	brne	.-22     	; 0x806 <__udivmodhi4_loop>
     81c:	80 95       	com	r24
     81e:	90 95       	com	r25
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	08 95       	ret

00000826 <__udivmodsi4>:
     826:	a1 e2       	ldi	r26, 0x21	; 33
     828:	1a 2e       	mov	r1, r26
     82a:	aa 1b       	sub	r26, r26
     82c:	bb 1b       	sub	r27, r27
     82e:	fd 01       	movw	r30, r26
     830:	0d c0       	rjmp	.+26     	; 0x84c <__udivmodsi4_ep>

00000832 <__udivmodsi4_loop>:
     832:	aa 1f       	adc	r26, r26
     834:	bb 1f       	adc	r27, r27
     836:	ee 1f       	adc	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	a2 17       	cp	r26, r18
     83c:	b3 07       	cpc	r27, r19
     83e:	e4 07       	cpc	r30, r20
     840:	f5 07       	cpc	r31, r21
     842:	20 f0       	brcs	.+8      	; 0x84c <__udivmodsi4_ep>
     844:	a2 1b       	sub	r26, r18
     846:	b3 0b       	sbc	r27, r19
     848:	e4 0b       	sbc	r30, r20
     84a:	f5 0b       	sbc	r31, r21

0000084c <__udivmodsi4_ep>:
     84c:	66 1f       	adc	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	88 1f       	adc	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	1a 94       	dec	r1
     856:	69 f7       	brne	.-38     	; 0x832 <__udivmodsi4_loop>
     858:	60 95       	com	r22
     85a:	70 95       	com	r23
     85c:	80 95       	com	r24
     85e:	90 95       	com	r25
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	bd 01       	movw	r22, r26
     866:	cf 01       	movw	r24, r30
     868:	08 95       	ret

0000086a <malloc>:
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	91 05       	cpc	r25, r1
     876:	10 f4       	brcc	.+4      	; 0x87c <malloc+0x12>
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <__flp>
     880:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <__flp+0x1>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	30 97       	sbiw	r30, 0x00	; 0
     88e:	19 f1       	breq	.+70     	; 0x8d6 <malloc+0x6c>
     890:	40 81       	ld	r20, Z
     892:	51 81       	ldd	r21, Z+1	; 0x01
     894:	02 81       	ldd	r16, Z+2	; 0x02
     896:	13 81       	ldd	r17, Z+3	; 0x03
     898:	48 17       	cp	r20, r24
     89a:	59 07       	cpc	r21, r25
     89c:	c8 f0       	brcs	.+50     	; 0x8d0 <malloc+0x66>
     89e:	84 17       	cp	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	69 f4       	brne	.+26     	; 0x8be <malloc+0x54>
     8a4:	10 97       	sbiw	r26, 0x00	; 0
     8a6:	31 f0       	breq	.+12     	; 0x8b4 <malloc+0x4a>
     8a8:	12 96       	adiw	r26, 0x02	; 2
     8aa:	0c 93       	st	X, r16
     8ac:	12 97       	sbiw	r26, 0x02	; 2
     8ae:	13 96       	adiw	r26, 0x03	; 3
     8b0:	1c 93       	st	X, r17
     8b2:	27 c0       	rjmp	.+78     	; 0x902 <malloc+0x98>
     8b4:	00 93 2f 01 	sts	0x012F, r16	; 0x80012f <__flp>
     8b8:	10 93 30 01 	sts	0x0130, r17	; 0x800130 <__flp+0x1>
     8bc:	22 c0       	rjmp	.+68     	; 0x902 <malloc+0x98>
     8be:	21 15       	cp	r18, r1
     8c0:	31 05       	cpc	r19, r1
     8c2:	19 f0       	breq	.+6      	; 0x8ca <malloc+0x60>
     8c4:	42 17       	cp	r20, r18
     8c6:	53 07       	cpc	r21, r19
     8c8:	18 f4       	brcc	.+6      	; 0x8d0 <malloc+0x66>
     8ca:	9a 01       	movw	r18, r20
     8cc:	bd 01       	movw	r22, r26
     8ce:	ef 01       	movw	r28, r30
     8d0:	df 01       	movw	r26, r30
     8d2:	f8 01       	movw	r30, r16
     8d4:	db cf       	rjmp	.-74     	; 0x88c <malloc+0x22>
     8d6:	21 15       	cp	r18, r1
     8d8:	31 05       	cpc	r19, r1
     8da:	f9 f0       	breq	.+62     	; 0x91a <malloc+0xb0>
     8dc:	28 1b       	sub	r18, r24
     8de:	39 0b       	sbc	r19, r25
     8e0:	24 30       	cpi	r18, 0x04	; 4
     8e2:	31 05       	cpc	r19, r1
     8e4:	80 f4       	brcc	.+32     	; 0x906 <malloc+0x9c>
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	61 15       	cp	r22, r1
     8ec:	71 05       	cpc	r23, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <malloc+0x8e>
     8f0:	fb 01       	movw	r30, r22
     8f2:	93 83       	std	Z+3, r25	; 0x03
     8f4:	82 83       	std	Z+2, r24	; 0x02
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <malloc+0x96>
     8f8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__flp+0x1>
     8fc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__flp>
     900:	fe 01       	movw	r30, r28
     902:	32 96       	adiw	r30, 0x02	; 2
     904:	44 c0       	rjmp	.+136    	; 0x98e <malloc+0x124>
     906:	fe 01       	movw	r30, r28
     908:	e2 0f       	add	r30, r18
     90a:	f3 1f       	adc	r31, r19
     90c:	81 93       	st	Z+, r24
     90e:	91 93       	st	Z+, r25
     910:	22 50       	subi	r18, 0x02	; 2
     912:	31 09       	sbc	r19, r1
     914:	39 83       	std	Y+1, r19	; 0x01
     916:	28 83       	st	Y, r18
     918:	3a c0       	rjmp	.+116    	; 0x98e <malloc+0x124>
     91a:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
     91e:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
     922:	23 2b       	or	r18, r19
     924:	41 f4       	brne	.+16     	; 0x936 <malloc+0xcc>
     926:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     92a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     92e:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <__brkval+0x1>
     932:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <__brkval>
     936:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     93a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     93e:	21 15       	cp	r18, r1
     940:	31 05       	cpc	r19, r1
     942:	41 f4       	brne	.+16     	; 0x954 <malloc+0xea>
     944:	2d b7       	in	r18, 0x3d	; 61
     946:	3e b7       	in	r19, 0x3e	; 62
     948:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     94c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     950:	24 1b       	sub	r18, r20
     952:	35 0b       	sbc	r19, r21
     954:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__brkval>
     958:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__brkval+0x1>
     95c:	e2 17       	cp	r30, r18
     95e:	f3 07       	cpc	r31, r19
     960:	a0 f4       	brcc	.+40     	; 0x98a <malloc+0x120>
     962:	2e 1b       	sub	r18, r30
     964:	3f 0b       	sbc	r19, r31
     966:	28 17       	cp	r18, r24
     968:	39 07       	cpc	r19, r25
     96a:	78 f0       	brcs	.+30     	; 0x98a <malloc+0x120>
     96c:	ac 01       	movw	r20, r24
     96e:	4e 5f       	subi	r20, 0xFE	; 254
     970:	5f 4f       	sbci	r21, 0xFF	; 255
     972:	24 17       	cp	r18, r20
     974:	35 07       	cpc	r19, r21
     976:	48 f0       	brcs	.+18     	; 0x98a <malloc+0x120>
     978:	4e 0f       	add	r20, r30
     97a:	5f 1f       	adc	r21, r31
     97c:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <__brkval+0x1>
     980:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <__brkval>
     984:	81 93       	st	Z+, r24
     986:	91 93       	st	Z+, r25
     988:	02 c0       	rjmp	.+4      	; 0x98e <malloc+0x124>
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	cf 01       	movw	r24, r30
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <free>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <free+0xa>
     9a2:	81 c0       	rjmp	.+258    	; 0xaa6 <free+0x10c>
     9a4:	fc 01       	movw	r30, r24
     9a6:	32 97       	sbiw	r30, 0x02	; 2
     9a8:	13 82       	std	Z+3, r1	; 0x03
     9aa:	12 82       	std	Z+2, r1	; 0x02
     9ac:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <__flp>
     9b0:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <__flp+0x1>
     9b4:	10 97       	sbiw	r26, 0x00	; 0
     9b6:	81 f4       	brne	.+32     	; 0x9d8 <free+0x3e>
     9b8:	20 81       	ld	r18, Z
     9ba:	31 81       	ldd	r19, Z+1	; 0x01
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
     9c4:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
     9c8:	28 17       	cp	r18, r24
     9ca:	39 07       	cpc	r19, r25
     9cc:	51 f5       	brne	.+84     	; 0xa22 <free+0x88>
     9ce:	f0 93 2e 01 	sts	0x012E, r31	; 0x80012e <__brkval+0x1>
     9d2:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <__brkval>
     9d6:	67 c0       	rjmp	.+206    	; 0xaa6 <free+0x10c>
     9d8:	ed 01       	movw	r28, r26
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	ce 17       	cp	r28, r30
     9e0:	df 07       	cpc	r29, r31
     9e2:	40 f4       	brcc	.+16     	; 0x9f4 <free+0x5a>
     9e4:	4a 81       	ldd	r20, Y+2	; 0x02
     9e6:	5b 81       	ldd	r21, Y+3	; 0x03
     9e8:	9e 01       	movw	r18, r28
     9ea:	41 15       	cp	r20, r1
     9ec:	51 05       	cpc	r21, r1
     9ee:	f1 f0       	breq	.+60     	; 0xa2c <free+0x92>
     9f0:	ea 01       	movw	r28, r20
     9f2:	f5 cf       	rjmp	.-22     	; 0x9de <free+0x44>
     9f4:	d3 83       	std	Z+3, r29	; 0x03
     9f6:	c2 83       	std	Z+2, r28	; 0x02
     9f8:	40 81       	ld	r20, Z
     9fa:	51 81       	ldd	r21, Z+1	; 0x01
     9fc:	84 0f       	add	r24, r20
     9fe:	95 1f       	adc	r25, r21
     a00:	c8 17       	cp	r28, r24
     a02:	d9 07       	cpc	r29, r25
     a04:	59 f4       	brne	.+22     	; 0xa1c <free+0x82>
     a06:	88 81       	ld	r24, Y
     a08:	99 81       	ldd	r25, Y+1	; 0x01
     a0a:	84 0f       	add	r24, r20
     a0c:	95 1f       	adc	r25, r21
     a0e:	02 96       	adiw	r24, 0x02	; 2
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	80 83       	st	Z, r24
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	93 83       	std	Z+3, r25	; 0x03
     a1a:	82 83       	std	Z+2, r24	; 0x02
     a1c:	21 15       	cp	r18, r1
     a1e:	31 05       	cpc	r19, r1
     a20:	29 f4       	brne	.+10     	; 0xa2c <free+0x92>
     a22:	f0 93 30 01 	sts	0x0130, r31	; 0x800130 <__flp+0x1>
     a26:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <__flp>
     a2a:	3d c0       	rjmp	.+122    	; 0xaa6 <free+0x10c>
     a2c:	e9 01       	movw	r28, r18
     a2e:	fb 83       	std	Y+3, r31	; 0x03
     a30:	ea 83       	std	Y+2, r30	; 0x02
     a32:	49 91       	ld	r20, Y+
     a34:	59 91       	ld	r21, Y+
     a36:	c4 0f       	add	r28, r20
     a38:	d5 1f       	adc	r29, r21
     a3a:	ec 17       	cp	r30, r28
     a3c:	fd 07       	cpc	r31, r29
     a3e:	61 f4       	brne	.+24     	; 0xa58 <free+0xbe>
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	02 96       	adiw	r24, 0x02	; 2
     a4a:	e9 01       	movw	r28, r18
     a4c:	99 83       	std	Y+1, r25	; 0x01
     a4e:	88 83       	st	Y, r24
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	93 81       	ldd	r25, Z+3	; 0x03
     a54:	9b 83       	std	Y+3, r25	; 0x03
     a56:	8a 83       	std	Y+2, r24	; 0x02
     a58:	e0 e0       	ldi	r30, 0x00	; 0
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	12 96       	adiw	r26, 0x02	; 2
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	13 97       	sbiw	r26, 0x03	; 3
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	19 f0       	breq	.+6      	; 0xa6e <free+0xd4>
     a68:	fd 01       	movw	r30, r26
     a6a:	dc 01       	movw	r26, r24
     a6c:	f7 cf       	rjmp	.-18     	; 0xa5c <free+0xc2>
     a6e:	8d 91       	ld	r24, X+
     a70:	9c 91       	ld	r25, X
     a72:	11 97       	sbiw	r26, 0x01	; 1
     a74:	9d 01       	movw	r18, r26
     a76:	2e 5f       	subi	r18, 0xFE	; 254
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	82 0f       	add	r24, r18
     a7c:	93 1f       	adc	r25, r19
     a7e:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
     a82:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
     a86:	28 17       	cp	r18, r24
     a88:	39 07       	cpc	r19, r25
     a8a:	69 f4       	brne	.+26     	; 0xaa6 <free+0x10c>
     a8c:	30 97       	sbiw	r30, 0x00	; 0
     a8e:	29 f4       	brne	.+10     	; 0xa9a <free+0x100>
     a90:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__flp+0x1>
     a94:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__flp>
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <free+0x104>
     a9a:	13 82       	std	Z+3, r1	; 0x03
     a9c:	12 82       	std	Z+2, r1	; 0x02
     a9e:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <__brkval+0x1>
     aa2:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <__brkval>
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <toupper>:
     aac:	91 11       	cpse	r25, r1
     aae:	08 95       	ret
     ab0:	81 56       	subi	r24, 0x61	; 97
     ab2:	8a 51       	subi	r24, 0x1A	; 26
     ab4:	08 f4       	brcc	.+2      	; 0xab8 <toupper+0xc>
     ab6:	80 52       	subi	r24, 0x20	; 32
     ab8:	85 58       	subi	r24, 0x85	; 133
     aba:	08 95       	ret

00000abc <sprintf>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	2e 97       	sbiw	r28, 0x0e	; 14
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	0d 89       	ldd	r16, Y+21	; 0x15
     ad6:	1e 89       	ldd	r17, Y+22	; 0x16
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	8c 83       	std	Y+4, r24	; 0x04
     adc:	1a 83       	std	Y+2, r17	; 0x02
     ade:	09 83       	std	Y+1, r16	; 0x01
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	9f e7       	ldi	r25, 0x7F	; 127
     ae4:	9e 83       	std	Y+6, r25	; 0x06
     ae6:	8d 83       	std	Y+5, r24	; 0x05
     ae8:	ae 01       	movw	r20, r28
     aea:	47 5e       	subi	r20, 0xE7	; 231
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	6f 89       	ldd	r22, Y+23	; 0x17
     af0:	78 8d       	ldd	r23, Y+24	; 0x18
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	10 d0       	rcall	.+32     	; 0xb18 <vfprintf>
     af8:	ef 81       	ldd	r30, Y+7	; 0x07
     afa:	f8 85       	ldd	r31, Y+8	; 0x08
     afc:	e0 0f       	add	r30, r16
     afe:	f1 1f       	adc	r31, r17
     b00:	10 82       	st	Z, r1
     b02:	2e 96       	adiw	r28, 0x0e	; 14
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <vfprintf>:
     b18:	2f 92       	push	r2
     b1a:	3f 92       	push	r3
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	2b 97       	sbiw	r28, 0x0b	; 11
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	6c 01       	movw	r12, r24
     b4e:	7b 01       	movw	r14, r22
     b50:	8a 01       	movw	r16, r20
     b52:	fc 01       	movw	r30, r24
     b54:	17 82       	std	Z+7, r1	; 0x07
     b56:	16 82       	std	Z+6, r1	; 0x06
     b58:	83 81       	ldd	r24, Z+3	; 0x03
     b5a:	81 ff       	sbrs	r24, 1
     b5c:	bf c1       	rjmp	.+894    	; 0xedc <vfprintf+0x3c4>
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	3c 01       	movw	r6, r24
     b64:	f6 01       	movw	r30, r12
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	f7 01       	movw	r30, r14
     b6a:	93 fd       	sbrc	r25, 3
     b6c:	85 91       	lpm	r24, Z+
     b6e:	93 ff       	sbrs	r25, 3
     b70:	81 91       	ld	r24, Z+
     b72:	7f 01       	movw	r14, r30
     b74:	88 23       	and	r24, r24
     b76:	09 f4       	brne	.+2      	; 0xb7a <vfprintf+0x62>
     b78:	ad c1       	rjmp	.+858    	; 0xed4 <vfprintf+0x3bc>
     b7a:	85 32       	cpi	r24, 0x25	; 37
     b7c:	39 f4       	brne	.+14     	; 0xb8c <vfprintf+0x74>
     b7e:	93 fd       	sbrc	r25, 3
     b80:	85 91       	lpm	r24, Z+
     b82:	93 ff       	sbrs	r25, 3
     b84:	81 91       	ld	r24, Z+
     b86:	7f 01       	movw	r14, r30
     b88:	85 32       	cpi	r24, 0x25	; 37
     b8a:	21 f4       	brne	.+8      	; 0xb94 <vfprintf+0x7c>
     b8c:	b6 01       	movw	r22, r12
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	d6 d1       	rcall	.+940    	; 0xf3e <fputc>
     b92:	e8 cf       	rjmp	.-48     	; 0xb64 <vfprintf+0x4c>
     b94:	91 2c       	mov	r9, r1
     b96:	21 2c       	mov	r2, r1
     b98:	31 2c       	mov	r3, r1
     b9a:	ff e1       	ldi	r31, 0x1F	; 31
     b9c:	f3 15       	cp	r31, r3
     b9e:	d8 f0       	brcs	.+54     	; 0xbd6 <vfprintf+0xbe>
     ba0:	8b 32       	cpi	r24, 0x2B	; 43
     ba2:	79 f0       	breq	.+30     	; 0xbc2 <vfprintf+0xaa>
     ba4:	38 f4       	brcc	.+14     	; 0xbb4 <vfprintf+0x9c>
     ba6:	80 32       	cpi	r24, 0x20	; 32
     ba8:	79 f0       	breq	.+30     	; 0xbc8 <vfprintf+0xb0>
     baa:	83 32       	cpi	r24, 0x23	; 35
     bac:	a1 f4       	brne	.+40     	; 0xbd6 <vfprintf+0xbe>
     bae:	23 2d       	mov	r18, r3
     bb0:	20 61       	ori	r18, 0x10	; 16
     bb2:	1d c0       	rjmp	.+58     	; 0xbee <vfprintf+0xd6>
     bb4:	8d 32       	cpi	r24, 0x2D	; 45
     bb6:	61 f0       	breq	.+24     	; 0xbd0 <vfprintf+0xb8>
     bb8:	80 33       	cpi	r24, 0x30	; 48
     bba:	69 f4       	brne	.+26     	; 0xbd6 <vfprintf+0xbe>
     bbc:	23 2d       	mov	r18, r3
     bbe:	21 60       	ori	r18, 0x01	; 1
     bc0:	16 c0       	rjmp	.+44     	; 0xbee <vfprintf+0xd6>
     bc2:	83 2d       	mov	r24, r3
     bc4:	82 60       	ori	r24, 0x02	; 2
     bc6:	38 2e       	mov	r3, r24
     bc8:	e3 2d       	mov	r30, r3
     bca:	e4 60       	ori	r30, 0x04	; 4
     bcc:	3e 2e       	mov	r3, r30
     bce:	2a c0       	rjmp	.+84     	; 0xc24 <vfprintf+0x10c>
     bd0:	f3 2d       	mov	r31, r3
     bd2:	f8 60       	ori	r31, 0x08	; 8
     bd4:	1d c0       	rjmp	.+58     	; 0xc10 <vfprintf+0xf8>
     bd6:	37 fc       	sbrc	r3, 7
     bd8:	2d c0       	rjmp	.+90     	; 0xc34 <vfprintf+0x11c>
     bda:	20 ed       	ldi	r18, 0xD0	; 208
     bdc:	28 0f       	add	r18, r24
     bde:	2a 30       	cpi	r18, 0x0A	; 10
     be0:	40 f0       	brcs	.+16     	; 0xbf2 <vfprintf+0xda>
     be2:	8e 32       	cpi	r24, 0x2E	; 46
     be4:	b9 f4       	brne	.+46     	; 0xc14 <vfprintf+0xfc>
     be6:	36 fc       	sbrc	r3, 6
     be8:	75 c1       	rjmp	.+746    	; 0xed4 <vfprintf+0x3bc>
     bea:	23 2d       	mov	r18, r3
     bec:	20 64       	ori	r18, 0x40	; 64
     bee:	32 2e       	mov	r3, r18
     bf0:	19 c0       	rjmp	.+50     	; 0xc24 <vfprintf+0x10c>
     bf2:	36 fe       	sbrs	r3, 6
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0xea>
     bf6:	8a e0       	ldi	r24, 0x0A	; 10
     bf8:	98 9e       	mul	r9, r24
     bfa:	20 0d       	add	r18, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	92 2e       	mov	r9, r18
     c00:	11 c0       	rjmp	.+34     	; 0xc24 <vfprintf+0x10c>
     c02:	ea e0       	ldi	r30, 0x0A	; 10
     c04:	2e 9e       	mul	r2, r30
     c06:	20 0d       	add	r18, r0
     c08:	11 24       	eor	r1, r1
     c0a:	22 2e       	mov	r2, r18
     c0c:	f3 2d       	mov	r31, r3
     c0e:	f0 62       	ori	r31, 0x20	; 32
     c10:	3f 2e       	mov	r3, r31
     c12:	08 c0       	rjmp	.+16     	; 0xc24 <vfprintf+0x10c>
     c14:	8c 36       	cpi	r24, 0x6C	; 108
     c16:	21 f4       	brne	.+8      	; 0xc20 <vfprintf+0x108>
     c18:	83 2d       	mov	r24, r3
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	38 2e       	mov	r3, r24
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x10c>
     c20:	88 36       	cpi	r24, 0x68	; 104
     c22:	41 f4       	brne	.+16     	; 0xc34 <vfprintf+0x11c>
     c24:	f7 01       	movw	r30, r14
     c26:	93 fd       	sbrc	r25, 3
     c28:	85 91       	lpm	r24, Z+
     c2a:	93 ff       	sbrs	r25, 3
     c2c:	81 91       	ld	r24, Z+
     c2e:	7f 01       	movw	r14, r30
     c30:	81 11       	cpse	r24, r1
     c32:	b3 cf       	rjmp	.-154    	; 0xb9a <vfprintf+0x82>
     c34:	98 2f       	mov	r25, r24
     c36:	9f 7d       	andi	r25, 0xDF	; 223
     c38:	95 54       	subi	r25, 0x45	; 69
     c3a:	93 30       	cpi	r25, 0x03	; 3
     c3c:	28 f4       	brcc	.+10     	; 0xc48 <vfprintf+0x130>
     c3e:	0c 5f       	subi	r16, 0xFC	; 252
     c40:	1f 4f       	sbci	r17, 0xFF	; 255
     c42:	9f e3       	ldi	r25, 0x3F	; 63
     c44:	99 83       	std	Y+1, r25	; 0x01
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <vfprintf+0x14a>
     c48:	83 36       	cpi	r24, 0x63	; 99
     c4a:	31 f0       	breq	.+12     	; 0xc58 <vfprintf+0x140>
     c4c:	83 37       	cpi	r24, 0x73	; 115
     c4e:	71 f0       	breq	.+28     	; 0xc6c <vfprintf+0x154>
     c50:	83 35       	cpi	r24, 0x53	; 83
     c52:	09 f0       	breq	.+2      	; 0xc56 <vfprintf+0x13e>
     c54:	55 c0       	rjmp	.+170    	; 0xd00 <vfprintf+0x1e8>
     c56:	20 c0       	rjmp	.+64     	; 0xc98 <vfprintf+0x180>
     c58:	f8 01       	movw	r30, r16
     c5a:	80 81       	ld	r24, Z
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	0e 5f       	subi	r16, 0xFE	; 254
     c60:	1f 4f       	sbci	r17, 0xFF	; 255
     c62:	88 24       	eor	r8, r8
     c64:	83 94       	inc	r8
     c66:	91 2c       	mov	r9, r1
     c68:	53 01       	movw	r10, r6
     c6a:	12 c0       	rjmp	.+36     	; 0xc90 <vfprintf+0x178>
     c6c:	28 01       	movw	r4, r16
     c6e:	f2 e0       	ldi	r31, 0x02	; 2
     c70:	4f 0e       	add	r4, r31
     c72:	51 1c       	adc	r5, r1
     c74:	f8 01       	movw	r30, r16
     c76:	a0 80       	ld	r10, Z
     c78:	b1 80       	ldd	r11, Z+1	; 0x01
     c7a:	36 fe       	sbrs	r3, 6
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <vfprintf+0x16c>
     c7e:	69 2d       	mov	r22, r9
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x170>
     c84:	6f ef       	ldi	r22, 0xFF	; 255
     c86:	7f ef       	ldi	r23, 0xFF	; 255
     c88:	c5 01       	movw	r24, r10
     c8a:	4e d1       	rcall	.+668    	; 0xf28 <strnlen>
     c8c:	4c 01       	movw	r8, r24
     c8e:	82 01       	movw	r16, r4
     c90:	f3 2d       	mov	r31, r3
     c92:	ff 77       	andi	r31, 0x7F	; 127
     c94:	3f 2e       	mov	r3, r31
     c96:	15 c0       	rjmp	.+42     	; 0xcc2 <vfprintf+0x1aa>
     c98:	28 01       	movw	r4, r16
     c9a:	22 e0       	ldi	r18, 0x02	; 2
     c9c:	42 0e       	add	r4, r18
     c9e:	51 1c       	adc	r5, r1
     ca0:	f8 01       	movw	r30, r16
     ca2:	a0 80       	ld	r10, Z
     ca4:	b1 80       	ldd	r11, Z+1	; 0x01
     ca6:	36 fe       	sbrs	r3, 6
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <vfprintf+0x198>
     caa:	69 2d       	mov	r22, r9
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x19c>
     cb0:	6f ef       	ldi	r22, 0xFF	; 255
     cb2:	7f ef       	ldi	r23, 0xFF	; 255
     cb4:	c5 01       	movw	r24, r10
     cb6:	2d d1       	rcall	.+602    	; 0xf12 <strnlen_P>
     cb8:	4c 01       	movw	r8, r24
     cba:	f3 2d       	mov	r31, r3
     cbc:	f0 68       	ori	r31, 0x80	; 128
     cbe:	3f 2e       	mov	r3, r31
     cc0:	82 01       	movw	r16, r4
     cc2:	33 fc       	sbrc	r3, 3
     cc4:	19 c0       	rjmp	.+50     	; 0xcf8 <vfprintf+0x1e0>
     cc6:	82 2d       	mov	r24, r2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 16       	cp	r8, r24
     ccc:	99 06       	cpc	r9, r25
     cce:	a0 f4       	brcc	.+40     	; 0xcf8 <vfprintf+0x1e0>
     cd0:	b6 01       	movw	r22, r12
     cd2:	80 e2       	ldi	r24, 0x20	; 32
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	33 d1       	rcall	.+614    	; 0xf3e <fputc>
     cd8:	2a 94       	dec	r2
     cda:	f5 cf       	rjmp	.-22     	; 0xcc6 <vfprintf+0x1ae>
     cdc:	f5 01       	movw	r30, r10
     cde:	37 fc       	sbrc	r3, 7
     ce0:	85 91       	lpm	r24, Z+
     ce2:	37 fe       	sbrs	r3, 7
     ce4:	81 91       	ld	r24, Z+
     ce6:	5f 01       	movw	r10, r30
     ce8:	b6 01       	movw	r22, r12
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	28 d1       	rcall	.+592    	; 0xf3e <fputc>
     cee:	21 10       	cpse	r2, r1
     cf0:	2a 94       	dec	r2
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	82 1a       	sub	r8, r18
     cf6:	91 08       	sbc	r9, r1
     cf8:	81 14       	cp	r8, r1
     cfa:	91 04       	cpc	r9, r1
     cfc:	79 f7       	brne	.-34     	; 0xcdc <vfprintf+0x1c4>
     cfe:	e1 c0       	rjmp	.+450    	; 0xec2 <vfprintf+0x3aa>
     d00:	84 36       	cpi	r24, 0x64	; 100
     d02:	11 f0       	breq	.+4      	; 0xd08 <vfprintf+0x1f0>
     d04:	89 36       	cpi	r24, 0x69	; 105
     d06:	39 f5       	brne	.+78     	; 0xd56 <vfprintf+0x23e>
     d08:	f8 01       	movw	r30, r16
     d0a:	37 fe       	sbrs	r3, 7
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <vfprintf+0x204>
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	0c 5f       	subi	r16, 0xFC	; 252
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <vfprintf+0x214>
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	07 2e       	mov	r0, r23
     d22:	00 0c       	add	r0, r0
     d24:	88 0b       	sbc	r24, r24
     d26:	99 0b       	sbc	r25, r25
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	f3 2d       	mov	r31, r3
     d2e:	ff 76       	andi	r31, 0x6F	; 111
     d30:	3f 2e       	mov	r3, r31
     d32:	97 ff       	sbrs	r25, 7
     d34:	09 c0       	rjmp	.+18     	; 0xd48 <vfprintf+0x230>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	f0 68       	ori	r31, 0x80	; 128
     d46:	3f 2e       	mov	r3, r31
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	a3 01       	movw	r20, r6
     d4e:	33 d1       	rcall	.+614    	; 0xfb6 <__ultoa_invert>
     d50:	88 2e       	mov	r8, r24
     d52:	86 18       	sub	r8, r6
     d54:	44 c0       	rjmp	.+136    	; 0xdde <vfprintf+0x2c6>
     d56:	85 37       	cpi	r24, 0x75	; 117
     d58:	31 f4       	brne	.+12     	; 0xd66 <vfprintf+0x24e>
     d5a:	23 2d       	mov	r18, r3
     d5c:	2f 7e       	andi	r18, 0xEF	; 239
     d5e:	b2 2e       	mov	r11, r18
     d60:	2a e0       	ldi	r18, 0x0A	; 10
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	25 c0       	rjmp	.+74     	; 0xdb0 <vfprintf+0x298>
     d66:	93 2d       	mov	r25, r3
     d68:	99 7f       	andi	r25, 0xF9	; 249
     d6a:	b9 2e       	mov	r11, r25
     d6c:	8f 36       	cpi	r24, 0x6F	; 111
     d6e:	c1 f0       	breq	.+48     	; 0xda0 <vfprintf+0x288>
     d70:	18 f4       	brcc	.+6      	; 0xd78 <vfprintf+0x260>
     d72:	88 35       	cpi	r24, 0x58	; 88
     d74:	79 f0       	breq	.+30     	; 0xd94 <vfprintf+0x27c>
     d76:	ae c0       	rjmp	.+348    	; 0xed4 <vfprintf+0x3bc>
     d78:	80 37       	cpi	r24, 0x70	; 112
     d7a:	19 f0       	breq	.+6      	; 0xd82 <vfprintf+0x26a>
     d7c:	88 37       	cpi	r24, 0x78	; 120
     d7e:	21 f0       	breq	.+8      	; 0xd88 <vfprintf+0x270>
     d80:	a9 c0       	rjmp	.+338    	; 0xed4 <vfprintf+0x3bc>
     d82:	e9 2f       	mov	r30, r25
     d84:	e0 61       	ori	r30, 0x10	; 16
     d86:	be 2e       	mov	r11, r30
     d88:	b4 fe       	sbrs	r11, 4
     d8a:	0d c0       	rjmp	.+26     	; 0xda6 <vfprintf+0x28e>
     d8c:	fb 2d       	mov	r31, r11
     d8e:	f4 60       	ori	r31, 0x04	; 4
     d90:	bf 2e       	mov	r11, r31
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <vfprintf+0x28e>
     d94:	34 fe       	sbrs	r3, 4
     d96:	0a c0       	rjmp	.+20     	; 0xdac <vfprintf+0x294>
     d98:	29 2f       	mov	r18, r25
     d9a:	26 60       	ori	r18, 0x06	; 6
     d9c:	b2 2e       	mov	r11, r18
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <vfprintf+0x294>
     da0:	28 e0       	ldi	r18, 0x08	; 8
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <vfprintf+0x298>
     da6:	20 e1       	ldi	r18, 0x10	; 16
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x298>
     dac:	20 e1       	ldi	r18, 0x10	; 16
     dae:	32 e0       	ldi	r19, 0x02	; 2
     db0:	f8 01       	movw	r30, r16
     db2:	b7 fe       	sbrs	r11, 7
     db4:	07 c0       	rjmp	.+14     	; 0xdc4 <vfprintf+0x2ac>
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	0c 5f       	subi	r16, 0xFC	; 252
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0x2b8>
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 5f       	subi	r16, 0xFE	; 254
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	a3 01       	movw	r20, r6
     dd2:	f1 d0       	rcall	.+482    	; 0xfb6 <__ultoa_invert>
     dd4:	88 2e       	mov	r8, r24
     dd6:	86 18       	sub	r8, r6
     dd8:	fb 2d       	mov	r31, r11
     dda:	ff 77       	andi	r31, 0x7F	; 127
     ddc:	3f 2e       	mov	r3, r31
     dde:	36 fe       	sbrs	r3, 6
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <vfprintf+0x2e4>
     de2:	23 2d       	mov	r18, r3
     de4:	2e 7f       	andi	r18, 0xFE	; 254
     de6:	a2 2e       	mov	r10, r18
     de8:	89 14       	cp	r8, r9
     dea:	58 f4       	brcc	.+22     	; 0xe02 <vfprintf+0x2ea>
     dec:	34 fe       	sbrs	r3, 4
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <vfprintf+0x2ee>
     df0:	32 fc       	sbrc	r3, 2
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <vfprintf+0x2ee>
     df4:	83 2d       	mov	r24, r3
     df6:	8e 7e       	andi	r24, 0xEE	; 238
     df8:	a8 2e       	mov	r10, r24
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <vfprintf+0x2ee>
     dfc:	b8 2c       	mov	r11, r8
     dfe:	a3 2c       	mov	r10, r3
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x2f0>
     e02:	b8 2c       	mov	r11, r8
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <vfprintf+0x2f0>
     e06:	b9 2c       	mov	r11, r9
     e08:	a4 fe       	sbrs	r10, 4
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <vfprintf+0x312>
     e0c:	fe 01       	movw	r30, r28
     e0e:	e8 0d       	add	r30, r8
     e10:	f1 1d       	adc	r31, r1
     e12:	80 81       	ld	r24, Z
     e14:	80 33       	cpi	r24, 0x30	; 48
     e16:	21 f4       	brne	.+8      	; 0xe20 <vfprintf+0x308>
     e18:	9a 2d       	mov	r25, r10
     e1a:	99 7e       	andi	r25, 0xE9	; 233
     e1c:	a9 2e       	mov	r10, r25
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <vfprintf+0x31a>
     e20:	a2 fe       	sbrs	r10, 2
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <vfprintf+0x318>
     e24:	b3 94       	inc	r11
     e26:	b3 94       	inc	r11
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <vfprintf+0x31a>
     e2a:	8a 2d       	mov	r24, r10
     e2c:	86 78       	andi	r24, 0x86	; 134
     e2e:	09 f0       	breq	.+2      	; 0xe32 <vfprintf+0x31a>
     e30:	b3 94       	inc	r11
     e32:	a3 fc       	sbrc	r10, 3
     e34:	10 c0       	rjmp	.+32     	; 0xe56 <vfprintf+0x33e>
     e36:	a0 fe       	sbrs	r10, 0
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <vfprintf+0x32e>
     e3a:	b2 14       	cp	r11, r2
     e3c:	80 f4       	brcc	.+32     	; 0xe5e <vfprintf+0x346>
     e3e:	28 0c       	add	r2, r8
     e40:	92 2c       	mov	r9, r2
     e42:	9b 18       	sub	r9, r11
     e44:	0d c0       	rjmp	.+26     	; 0xe60 <vfprintf+0x348>
     e46:	b2 14       	cp	r11, r2
     e48:	58 f4       	brcc	.+22     	; 0xe60 <vfprintf+0x348>
     e4a:	b6 01       	movw	r22, r12
     e4c:	80 e2       	ldi	r24, 0x20	; 32
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	76 d0       	rcall	.+236    	; 0xf3e <fputc>
     e52:	b3 94       	inc	r11
     e54:	f8 cf       	rjmp	.-16     	; 0xe46 <vfprintf+0x32e>
     e56:	b2 14       	cp	r11, r2
     e58:	18 f4       	brcc	.+6      	; 0xe60 <vfprintf+0x348>
     e5a:	2b 18       	sub	r2, r11
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x34a>
     e5e:	98 2c       	mov	r9, r8
     e60:	21 2c       	mov	r2, r1
     e62:	a4 fe       	sbrs	r10, 4
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <vfprintf+0x36c>
     e66:	b6 01       	movw	r22, r12
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	68 d0       	rcall	.+208    	; 0xf3e <fputc>
     e6e:	a2 fe       	sbrs	r10, 2
     e70:	16 c0       	rjmp	.+44     	; 0xe9e <vfprintf+0x386>
     e72:	a1 fc       	sbrc	r10, 1
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x364>
     e76:	88 e7       	ldi	r24, 0x78	; 120
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x368>
     e7c:	88 e5       	ldi	r24, 0x58	; 88
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	b6 01       	movw	r22, r12
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <vfprintf+0x384>
     e84:	8a 2d       	mov	r24, r10
     e86:	86 78       	andi	r24, 0x86	; 134
     e88:	51 f0       	breq	.+20     	; 0xe9e <vfprintf+0x386>
     e8a:	a1 fe       	sbrs	r10, 1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x37a>
     e8e:	8b e2       	ldi	r24, 0x2B	; 43
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <vfprintf+0x37c>
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	a7 fc       	sbrc	r10, 7
     e96:	8d e2       	ldi	r24, 0x2D	; 45
     e98:	b6 01       	movw	r22, r12
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	50 d0       	rcall	.+160    	; 0xf3e <fputc>
     e9e:	89 14       	cp	r8, r9
     ea0:	30 f4       	brcc	.+12     	; 0xeae <vfprintf+0x396>
     ea2:	b6 01       	movw	r22, r12
     ea4:	80 e3       	ldi	r24, 0x30	; 48
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	4a d0       	rcall	.+148    	; 0xf3e <fputc>
     eaa:	9a 94       	dec	r9
     eac:	f8 cf       	rjmp	.-16     	; 0xe9e <vfprintf+0x386>
     eae:	8a 94       	dec	r8
     eb0:	f3 01       	movw	r30, r6
     eb2:	e8 0d       	add	r30, r8
     eb4:	f1 1d       	adc	r31, r1
     eb6:	80 81       	ld	r24, Z
     eb8:	b6 01       	movw	r22, r12
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	40 d0       	rcall	.+128    	; 0xf3e <fputc>
     ebe:	81 10       	cpse	r8, r1
     ec0:	f6 cf       	rjmp	.-20     	; 0xeae <vfprintf+0x396>
     ec2:	22 20       	and	r2, r2
     ec4:	09 f4       	brne	.+2      	; 0xec8 <vfprintf+0x3b0>
     ec6:	4e ce       	rjmp	.-868    	; 0xb64 <vfprintf+0x4c>
     ec8:	b6 01       	movw	r22, r12
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	37 d0       	rcall	.+110    	; 0xf3e <fputc>
     ed0:	2a 94       	dec	r2
     ed2:	f7 cf       	rjmp	.-18     	; 0xec2 <vfprintf+0x3aa>
     ed4:	f6 01       	movw	r30, r12
     ed6:	86 81       	ldd	r24, Z+6	; 0x06
     ed8:	97 81       	ldd	r25, Z+7	; 0x07
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x3c8>
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	2b 96       	adiw	r28, 0x0b	; 11
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	7f 90       	pop	r7
     f06:	6f 90       	pop	r6
     f08:	5f 90       	pop	r5
     f0a:	4f 90       	pop	r4
     f0c:	3f 90       	pop	r3
     f0e:	2f 90       	pop	r2
     f10:	08 95       	ret

00000f12 <strnlen_P>:
     f12:	fc 01       	movw	r30, r24
     f14:	05 90       	lpm	r0, Z+
     f16:	61 50       	subi	r22, 0x01	; 1
     f18:	70 40       	sbci	r23, 0x00	; 0
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen_P+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <strnlen>:
     f28:	fc 01       	movw	r30, r24
     f2a:	61 50       	subi	r22, 0x01	; 1
     f2c:	70 40       	sbci	r23, 0x00	; 0
     f2e:	01 90       	ld	r0, Z+
     f30:	01 10       	cpse	r0, r1
     f32:	d8 f7       	brcc	.-10     	; 0xf2a <strnlen+0x2>
     f34:	80 95       	com	r24
     f36:	90 95       	com	r25
     f38:	8e 0f       	add	r24, r30
     f3a:	9f 1f       	adc	r25, r31
     f3c:	08 95       	ret

00000f3e <fputc>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	fb 01       	movw	r30, r22
     f48:	23 81       	ldd	r18, Z+3	; 0x03
     f4a:	21 fd       	sbrc	r18, 1
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <fputc+0x16>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	2c c0       	rjmp	.+88     	; 0xfac <fputc+0x6e>
     f54:	22 ff       	sbrs	r18, 2
     f56:	16 c0       	rjmp	.+44     	; 0xf84 <fputc+0x46>
     f58:	46 81       	ldd	r20, Z+6	; 0x06
     f5a:	57 81       	ldd	r21, Z+7	; 0x07
     f5c:	24 81       	ldd	r18, Z+4	; 0x04
     f5e:	35 81       	ldd	r19, Z+5	; 0x05
     f60:	42 17       	cp	r20, r18
     f62:	53 07       	cpc	r21, r19
     f64:	44 f4       	brge	.+16     	; 0xf76 <fputc+0x38>
     f66:	a0 81       	ld	r26, Z
     f68:	b1 81       	ldd	r27, Z+1	; 0x01
     f6a:	9d 01       	movw	r18, r26
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 83       	st	Z, r18
     f74:	8c 93       	st	X, r24
     f76:	26 81       	ldd	r18, Z+6	; 0x06
     f78:	37 81       	ldd	r19, Z+7	; 0x07
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	37 83       	std	Z+7, r19	; 0x07
     f80:	26 83       	std	Z+6, r18	; 0x06
     f82:	14 c0       	rjmp	.+40     	; 0xfac <fputc+0x6e>
     f84:	8b 01       	movw	r16, r22
     f86:	ec 01       	movw	r28, r24
     f88:	fb 01       	movw	r30, r22
     f8a:	00 84       	ldd	r0, Z+8	; 0x08
     f8c:	f1 85       	ldd	r31, Z+9	; 0x09
     f8e:	e0 2d       	mov	r30, r0
     f90:	09 95       	icall
     f92:	89 2b       	or	r24, r25
     f94:	e1 f6       	brne	.-72     	; 0xf4e <fputc+0x10>
     f96:	d8 01       	movw	r26, r16
     f98:	16 96       	adiw	r26, 0x06	; 6
     f9a:	8d 91       	ld	r24, X+
     f9c:	9c 91       	ld	r25, X
     f9e:	17 97       	sbiw	r26, 0x07	; 7
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	17 96       	adiw	r26, 0x07	; 7
     fa4:	9c 93       	st	X, r25
     fa6:	8e 93       	st	-X, r24
     fa8:	16 97       	sbiw	r26, 0x06	; 6
     faa:	ce 01       	movw	r24, r28
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <__ultoa_invert>:
     fb6:	fa 01       	movw	r30, r20
     fb8:	aa 27       	eor	r26, r26
     fba:	28 30       	cpi	r18, 0x08	; 8
     fbc:	51 f1       	breq	.+84     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
     fbe:	20 31       	cpi	r18, 0x10	; 16
     fc0:	81 f1       	breq	.+96     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
     fc2:	e8 94       	clt
     fc4:	6f 93       	push	r22
     fc6:	6e 7f       	andi	r22, 0xFE	; 254
     fc8:	6e 5f       	subi	r22, 0xFE	; 254
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	af 4f       	sbci	r26, 0xFF	; 255
     fd2:	b1 e0       	ldi	r27, 0x01	; 1
     fd4:	3e d0       	rcall	.+124    	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
     fd6:	b4 e0       	ldi	r27, 0x04	; 4
     fd8:	3c d0       	rcall	.+120    	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
     fda:	67 0f       	add	r22, r23
     fdc:	78 1f       	adc	r23, r24
     fde:	89 1f       	adc	r24, r25
     fe0:	9a 1f       	adc	r25, r26
     fe2:	a1 1d       	adc	r26, r1
     fe4:	68 0f       	add	r22, r24
     fe6:	79 1f       	adc	r23, r25
     fe8:	8a 1f       	adc	r24, r26
     fea:	91 1d       	adc	r25, r1
     fec:	a1 1d       	adc	r26, r1
     fee:	6a 0f       	add	r22, r26
     ff0:	71 1d       	adc	r23, r1
     ff2:	81 1d       	adc	r24, r1
     ff4:	91 1d       	adc	r25, r1
     ff6:	a1 1d       	adc	r26, r1
     ff8:	20 d0       	rcall	.+64     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
     ffa:	09 f4       	brne	.+2      	; 0xffe <__ultoa_invert+0x48>
     ffc:	68 94       	set
     ffe:	3f 91       	pop	r19
    1000:	2a e0       	ldi	r18, 0x0A	; 10
    1002:	26 9f       	mul	r18, r22
    1004:	11 24       	eor	r1, r1
    1006:	30 19       	sub	r19, r0
    1008:	30 5d       	subi	r19, 0xD0	; 208
    100a:	31 93       	st	Z+, r19
    100c:	de f6       	brtc	.-74     	; 0xfc4 <__ultoa_invert+0xe>
    100e:	cf 01       	movw	r24, r30
    1010:	08 95       	ret
    1012:	46 2f       	mov	r20, r22
    1014:	47 70       	andi	r20, 0x07	; 7
    1016:	40 5d       	subi	r20, 0xD0	; 208
    1018:	41 93       	st	Z+, r20
    101a:	b3 e0       	ldi	r27, 0x03	; 3
    101c:	0f d0       	rcall	.+30     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    101e:	c9 f7       	brne	.-14     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
    1020:	f6 cf       	rjmp	.-20     	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    1022:	46 2f       	mov	r20, r22
    1024:	4f 70       	andi	r20, 0x0F	; 15
    1026:	40 5d       	subi	r20, 0xD0	; 208
    1028:	4a 33       	cpi	r20, 0x3A	; 58
    102a:	18 f0       	brcs	.+6      	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
    102c:	49 5d       	subi	r20, 0xD9	; 217
    102e:	31 fd       	sbrc	r19, 1
    1030:	40 52       	subi	r20, 0x20	; 32
    1032:	41 93       	st	Z+, r20
    1034:	02 d0       	rcall	.+4      	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1036:	a9 f7       	brne	.-22     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1038:	ea cf       	rjmp	.-44     	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    103a:	b4 e0       	ldi	r27, 0x04	; 4
    103c:	a6 95       	lsr	r26
    103e:	97 95       	ror	r25
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	ba 95       	dec	r27
    1048:	c9 f7       	brne	.-14     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	61 05       	cpc	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	08 95       	ret
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	0a 2e       	mov	r0, r26
    1058:	06 94       	lsr	r0
    105a:	57 95       	ror	r21
    105c:	47 95       	ror	r20
    105e:	37 95       	ror	r19
    1060:	27 95       	ror	r18
    1062:	ba 95       	dec	r27
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
    1066:	62 0f       	add	r22, r18
    1068:	73 1f       	adc	r23, r19
    106a:	84 1f       	adc	r24, r20
    106c:	95 1f       	adc	r25, r21
    106e:	a0 1d       	adc	r26, r0
    1070:	08 95       	ret

00001072 <_exit>:
    1072:	f8 94       	cli

00001074 <__stop_program>:
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <__stop_program>
